// @ts-nocheck
import { GraphQLResolveInfo, SelectionSetNode, FieldNode, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  StringScalar: any;
};

export type Query = {
  hCompaniesSearch: HCompaniesRes;
  hUnifiedCompaniesSearch: HUnifiedCompaniesRes;
  personDetails: PersonDetailsModel;
  personSearch: PersonSearchModel;
  scoopsSearch: Array<Scoops>;
  orgchartsSearch: OrgChart;
  companyHierarchySearch: CompanyHierarchyRes;
  facets: Facets;
  suggestions: SuggestionsModel;
  quickSearch: QuickSearchModel;
  companyDetails: CompanyDetailsModel;
  companySearch: CompanySearchResultModel;
};


export type QueryhCompaniesSearchArgs = {
  addressVerificationStatusList?: InputMaybe<Scalars['String']>;
  isLocationHierarchy?: InputMaybe<Scalars['Boolean']>;
  locationType?: InputMaybe<Scalars['String']>;
  parentId?: InputMaybe<Scalars['String']>;
  subUnitType?: InputMaybe<Scalars['String']>;
  ultimateParentId?: InputMaybe<Scalars['String']>;
  continent?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
};


export type QueryhUnifiedCompaniesSearchArgs = {
  isLocationHierarchy?: InputMaybe<Scalars['Boolean']>;
  page?: InputMaybe<Scalars['Float']>;
  rpp?: InputMaybe<Scalars['Float']>;
  subscribed?: InputMaybe<Scalars['Boolean']>;
  companyIds?: InputMaybe<Scalars['String']>;
  ultimateParentId?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  continent?: InputMaybe<Scalars['String']>;
  locationSearchType?: InputMaybe<Scalars['String']>;
};


export type QuerypersonDetailsArgs = {
  companyID?: InputMaybe<Scalars['String']>;
  fetchTechAddDropOptions?: InputMaybe<Scalars['Boolean']>;
  showUnmaskedContacts?: InputMaybe<Scalars['Boolean']>;
  defaultSearchParams?: InputMaybe<DefaultSearchParams>;
  packageName?: InputMaybe<Scalars['String']>;
  buyingCommittee?: InputMaybe<Scalars['String']>;
  companyPastOrPresent?: InputMaybe<Scalars['StringScalar']>;
  contactRequirements?: InputMaybe<Scalars['StringScalar']>;
  doziIndustry?: InputMaybe<Scalars['StringScalar']>;
  excludeDefunctCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeNoCompany?: InputMaybe<Scalars['StringScalar']>;
  isCertified?: InputMaybe<Scalars['StringScalar']>;
  sortBy?: InputMaybe<Scalars['StringScalar']>;
  sortOrder?: InputMaybe<Scalars['StringScalar']>;
  nnNegation?: InputMaybe<Scalars['StringScalar']>;
  nnQueryId?: InputMaybe<Scalars['StringScalar']>;
  nnStartDate?: InputMaybe<Scalars['StringScalar']>;
  nnEndDate?: InputMaybe<Scalars['StringScalar']>;
  companyId?: InputMaybe<Scalars['StringScalar']>;
  companyIds?: InputMaybe<Scalars['StringScalar']>;
  revenueMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  revenueMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMax?: InputMaybe<Scalars['StringScalar']>;
  techAttributesAddedDropped?: InputMaybe<TechAttributesAddedDropped>;
  techAttributeNotUsedAnd?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMin?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMax?: InputMaybe<Scalars['StringScalar']>;
  locationCountMin?: InputMaybe<Scalars['StringScalar']>;
  locationCountMax?: InputMaybe<Scalars['StringScalar']>;
  metroAreas?: InputMaybe<Scalars['StringScalar']>;
  doziPrimaryIndustry?: InputMaybe<Scalars['StringScalar']>;
  hqLocationAreaCodes?: InputMaybe<Scalars['StringScalar']>;
  departmentEmployeeCounts?: InputMaybe<DepartmentEmployeeCounts>;
  departmentBudgets?: InputMaybe<DepartmentBudgets>;
  street?: InputMaybe<Scalars['StringScalar']>;
  locationType?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  negateScope?: InputMaybe<Scalars['Boolean']>;
  itBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  itBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  anyFundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  anyFundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  fundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  anyFundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  allInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  recentInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  state?: InputMaybe<Scalars['StringScalar']>;
  metroRegion?: InputMaybe<Scalars['StringScalar']>;
  country?: InputMaybe<Scalars['StringScalar']>;
  continent?: InputMaybe<Scalars['StringScalar']>;
  companyType?: InputMaybe<Scalars['StringScalar']>;
  companyName?: InputMaybe<Scalars['StringScalar']>;
  companyDomainNames?: InputMaybe<Scalars['StringScalar']>;
  companyDesc?: InputMaybe<Scalars['StringScalar']>;
  isPublic?: InputMaybe<Scalars['StringScalar']>;
  location?: InputMaybe<Scalars['StringScalar']>;
  zipCode?: InputMaybe<Scalars['StringScalar']>;
  radiusMiles?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTag?: InputMaybe<Scalars['StringScalar']>;
  industryKeywordsMulti?: InputMaybe<Scalars['StringScalar']>;
  primaryIndustriesOnly?: InputMaybe<Scalars['StringScalar']>;
  industryClassification?: InputMaybe<Scalars['StringScalar']>;
  industryKeywords?: InputMaybe<Scalars['StringScalar']>;
  industryCodeList?: InputMaybe<Scalars['StringScalar']>;
  industryCode?: InputMaybe<Scalars['StringScalar']>;
  industryCodeAnd?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  revenueClassification?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassification?: InputMaybe<Scalars['StringScalar']>;
  companyRanking?: InputMaybe<Scalars['StringScalar']>;
  pubPrivateSectors?: InputMaybe<Scalars['StringScalar']>;
  locationSearchType?: InputMaybe<Scalars['StringScalar']>;
  fundingMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  fundingMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAnd?: InputMaybe<Scalars['StringScalar']>;
  allInvestors?: InputMaybe<Scalars['StringScalar']>;
  recentInvestors?: InputMaybe<Scalars['StringScalar']>;
  allFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  recentFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  certificationStartDate?: InputMaybe<Scalars['StringScalar']>;
  certificationEndDate?: InputMaybe<Scalars['StringScalar']>;
  streetLineTwo?: InputMaybe<Scalars['StringScalar']>;
  hashtagField?: InputMaybe<Scalars['StringScalar']>;
  fullName?: InputMaybe<Scalars['StringScalar']>;
  gender?: InputMaybe<Scalars['StringScalar']>;
  personIds?: InputMaybe<Scalars['StringScalar']>;
  personID?: InputMaybe<Scalars['String']>;
  personId?: InputMaybe<Scalars['StringScalar']>;
  hasCanadianEmail?: InputMaybe<Scalars['StringScalar']>;
  companyLocationIds?: InputMaybe<Scalars['StringScalar']>;
  emailAddress?: InputMaybe<Scalars['StringScalar']>;
  firstName?: InputMaybe<Scalars['StringScalar']>;
  lastName?: InputMaybe<Scalars['StringScalar']>;
  middleInitial?: InputMaybe<Scalars['StringScalar']>;
  excludedPersonTitle?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  titleCertification?: InputMaybe<Scalars['StringScalar']>;
  personTitle?: InputMaybe<Scalars['StringScalar']>;
  titleSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleSeniority?: InputMaybe<Scalars['StringScalar']>;
  degree?: InputMaybe<Scalars['StringScalar']>;
  school?: InputMaybe<Scalars['StringScalar']>;
  companyDomainName?: InputMaybe<Scalars['StringScalar']>;
  validDateMonthDist?: InputMaybe<Scalars['StringScalar']>;
  zoomJoinsAccount?: InputMaybe<ZoomJoinsAccount>;
  orgJoinsAccount?: InputMaybe<OrgJoinsAccount>;
  titleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeOrgExportedCompanies?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgExportedContacts?: InputMaybe<Scalars['StringScalar']>;
  excludeCompanyTags?: InputMaybe<Scalars['StringScalar']>;
  personWebReferences?: InputMaybe<Scalars['StringScalar']>;
  personWebReferencesURL?: InputMaybe<Scalars['StringScalar']>;
  departments?: InputMaybe<Scalars['StringScalar']>;
  jobFunctions?: InputMaybe<Scalars['StringScalar']>;
  isEU?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMin?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMax?: InputMaybe<Scalars['StringScalar']>;
  hasLocationId?: InputMaybe<Scalars['StringScalar']>;
  hasPersonalEmail?: InputMaybe<Scalars['StringScalar']>;
  hasMobilePhone?: InputMaybe<Scalars['StringScalar']>;
  hasEmail?: InputMaybe<Scalars['StringScalar']>;
  hasPhone?: InputMaybe<Scalars['StringScalar']>;
  hasDirectPhone?: InputMaybe<Scalars['StringScalar']>;
  hasCompanyPhone?: InputMaybe<Scalars['StringScalar']>;
  hasTitle?: InputMaybe<Scalars['StringScalar']>;
  hasBeenNotified?: InputMaybe<Scalars['StringScalar']>;
  hasDepartment?: InputMaybe<Scalars['StringScalar']>;
  hasJobFunction?: InputMaybe<Scalars['StringScalar']>;
  hasSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgChartTier?: InputMaybe<Scalars['StringScalar']>;
  orgChartTier?: InputMaybe<Scalars['StringScalar']>;
  personCreationStartDate?: InputMaybe<Scalars['StringScalar']>;
  positionStartDate?: InputMaybe<Scalars['StringScalar']>;
  personCreationEndDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedStartDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedEndDate?: InputMaybe<Scalars['StringScalar']>;
  executivesOnly?: InputMaybe<Scalars['StringScalar']>;
  returnOnlyBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  excludeBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  page?: InputMaybe<Scalars['Float']>;
  rpp?: InputMaybe<Scalars['StringScalar']>;
  facetOptions?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  techAttributeTagNotUsedAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  findRecommendedContacts?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompanies?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesPage?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesRpp?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesSortBy?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesContacts?: InputMaybe<Scalars['StringScalar']>;
  solrPseudoOutputFields?: InputMaybe<Scalars['StringScalar']>;
  scoopEndDate?: InputMaybe<Scalars['StringScalar']>;
  scoopStartDate?: InputMaybe<Scalars['StringScalar']>;
  updatedSinceCreation?: InputMaybe<Scalars['StringScalar']>;
  scoopTypes?: InputMaybe<Scalars['StringScalar']>;
  scoopTopics?: InputMaybe<Scalars['StringScalar']>;
  scoopDepartments?: InputMaybe<Scalars['StringScalar']>;
  scoopDesc?: InputMaybe<Scalars['StringScalar']>;
  scoopIds?: InputMaybe<Scalars['StringScalar']>;
  scoringOptions?: InputMaybe<Scalars['StringScalar']>;
  masked?: InputMaybe<Scalars['Boolean']>;
  subscribed?: InputMaybe<Scalars['Boolean']>;
  orgImported?: InputMaybe<Scalars['Boolean']>;
  sessionToken?: InputMaybe<Scalars['StringScalar']>;
  definedUniverse?: InputMaybe<Scalars['StringScalar']>;
  outputFieldOptions?: InputMaybe<Scalars['StringScalar']>;
  ignoreDefaultFields?: InputMaybe<Scalars['StringScalar']>;
  includeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPersonOnlyMe?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedContacts?: InputMaybe<Scalars['Boolean']>;
  pTag?: InputMaybe<Scalars['StringScalar']>;
  cTag?: InputMaybe<Scalars['StringScalar']>;
  excludePeopleTags?: InputMaybe<Scalars['StringScalar']>;
  includeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAssociatedDeals?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeAllOrgImportLeads?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOptout?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  excludeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  orgImportOpportunities?: InputMaybe<Array<OrgImportOpportunities>>;
  includeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  jobTitle?: InputMaybe<Scalars['String']>;
  isTopExecutives?: InputMaybe<Scalars['Boolean']>;
};


export type QuerypersonSearchArgs = {
  personID?: InputMaybe<Scalars['StringScalar']>;
  jobTitle?: InputMaybe<Scalars['String']>;
  packageName?: InputMaybe<Scalars['String']>;
  isTopExecutives?: InputMaybe<Scalars['Boolean']>;
  companyID?: InputMaybe<Scalars['String']>;
  fetchTechAddDropOptions?: InputMaybe<Scalars['Boolean']>;
  showUnmaskedContacts?: InputMaybe<Scalars['Boolean']>;
  defaultSearchParams?: InputMaybe<DefaultSearchParams>;
  buyingCommittee?: InputMaybe<Scalars['String']>;
  companyPastOrPresent?: InputMaybe<Scalars['StringScalar']>;
  contactRequirements?: InputMaybe<Scalars['StringScalar']>;
  doziIndustry?: InputMaybe<Scalars['StringScalar']>;
  excludeDefunctCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeNoCompany?: InputMaybe<Scalars['StringScalar']>;
  isCertified?: InputMaybe<Scalars['StringScalar']>;
  sortBy?: InputMaybe<Scalars['StringScalar']>;
  sortOrder?: InputMaybe<Scalars['StringScalar']>;
  nnNegation?: InputMaybe<Scalars['StringScalar']>;
  nnQueryId?: InputMaybe<Scalars['StringScalar']>;
  nnStartDate?: InputMaybe<Scalars['StringScalar']>;
  nnEndDate?: InputMaybe<Scalars['StringScalar']>;
  companyId?: InputMaybe<Scalars['StringScalar']>;
  companyIds?: InputMaybe<Scalars['StringScalar']>;
  revenueMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  revenueMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMax?: InputMaybe<Scalars['StringScalar']>;
  techAttributesAddedDropped?: InputMaybe<TechAttributesAddedDropped>;
  techAttributeNotUsedAnd?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMin?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMax?: InputMaybe<Scalars['StringScalar']>;
  locationCountMin?: InputMaybe<Scalars['StringScalar']>;
  locationCountMax?: InputMaybe<Scalars['StringScalar']>;
  metroAreas?: InputMaybe<Scalars['StringScalar']>;
  doziPrimaryIndustry?: InputMaybe<Scalars['StringScalar']>;
  hqLocationAreaCodes?: InputMaybe<Scalars['StringScalar']>;
  departmentEmployeeCounts?: InputMaybe<DepartmentEmployeeCounts>;
  departmentBudgets?: InputMaybe<DepartmentBudgets>;
  street?: InputMaybe<Scalars['StringScalar']>;
  locationType?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  negateScope?: InputMaybe<Scalars['Boolean']>;
  itBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  itBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  anyFundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  anyFundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  fundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  anyFundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  allInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  recentInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  state?: InputMaybe<Scalars['StringScalar']>;
  metroRegion?: InputMaybe<Scalars['StringScalar']>;
  country?: InputMaybe<Scalars['StringScalar']>;
  continent?: InputMaybe<Scalars['StringScalar']>;
  companyType?: InputMaybe<Scalars['StringScalar']>;
  companyName?: InputMaybe<Scalars['StringScalar']>;
  companyDomainNames?: InputMaybe<Scalars['StringScalar']>;
  companyDesc?: InputMaybe<Scalars['StringScalar']>;
  isPublic?: InputMaybe<Scalars['StringScalar']>;
  location?: InputMaybe<Scalars['StringScalar']>;
  zipCode?: InputMaybe<Scalars['StringScalar']>;
  radiusMiles?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTag?: InputMaybe<Scalars['StringScalar']>;
  industryKeywordsMulti?: InputMaybe<Scalars['StringScalar']>;
  primaryIndustriesOnly?: InputMaybe<Scalars['StringScalar']>;
  industryClassification?: InputMaybe<Scalars['StringScalar']>;
  industryKeywords?: InputMaybe<Scalars['StringScalar']>;
  industryCodeList?: InputMaybe<Scalars['StringScalar']>;
  industryCode?: InputMaybe<Scalars['StringScalar']>;
  industryCodeAnd?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  revenueClassification?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassification?: InputMaybe<Scalars['StringScalar']>;
  companyRanking?: InputMaybe<Scalars['StringScalar']>;
  pubPrivateSectors?: InputMaybe<Scalars['StringScalar']>;
  locationSearchType?: InputMaybe<Scalars['StringScalar']>;
  fundingMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  fundingMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAnd?: InputMaybe<Scalars['StringScalar']>;
  allInvestors?: InputMaybe<Scalars['StringScalar']>;
  recentInvestors?: InputMaybe<Scalars['StringScalar']>;
  allFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  recentFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  certificationStartDate?: InputMaybe<Scalars['StringScalar']>;
  certificationEndDate?: InputMaybe<Scalars['StringScalar']>;
  streetLineTwo?: InputMaybe<Scalars['StringScalar']>;
  hashtagField?: InputMaybe<Scalars['StringScalar']>;
  fullName?: InputMaybe<Scalars['StringScalar']>;
  gender?: InputMaybe<Scalars['StringScalar']>;
  personIds?: InputMaybe<Scalars['StringScalar']>;
  personId?: InputMaybe<Scalars['StringScalar']>;
  hasCanadianEmail?: InputMaybe<Scalars['StringScalar']>;
  companyLocationIds?: InputMaybe<Scalars['StringScalar']>;
  emailAddress?: InputMaybe<Scalars['StringScalar']>;
  firstName?: InputMaybe<Scalars['StringScalar']>;
  lastName?: InputMaybe<Scalars['StringScalar']>;
  middleInitial?: InputMaybe<Scalars['StringScalar']>;
  excludedPersonTitle?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  titleCertification?: InputMaybe<Scalars['StringScalar']>;
  personTitle?: InputMaybe<Scalars['StringScalar']>;
  titleSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleSeniority?: InputMaybe<Scalars['StringScalar']>;
  degree?: InputMaybe<Scalars['StringScalar']>;
  school?: InputMaybe<Scalars['StringScalar']>;
  companyDomainName?: InputMaybe<Scalars['StringScalar']>;
  validDateMonthDist?: InputMaybe<Scalars['StringScalar']>;
  zoomJoinsAccount?: InputMaybe<ZoomJoinsAccount>;
  orgJoinsAccount?: InputMaybe<OrgJoinsAccount>;
  titleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeOrgExportedCompanies?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgExportedContacts?: InputMaybe<Scalars['StringScalar']>;
  excludeCompanyTags?: InputMaybe<Scalars['StringScalar']>;
  personWebReferences?: InputMaybe<Scalars['StringScalar']>;
  personWebReferencesURL?: InputMaybe<Scalars['StringScalar']>;
  departments?: InputMaybe<Scalars['StringScalar']>;
  jobFunctions?: InputMaybe<Scalars['StringScalar']>;
  isEU?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMin?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMax?: InputMaybe<Scalars['StringScalar']>;
  hasLocationId?: InputMaybe<Scalars['StringScalar']>;
  hasPersonalEmail?: InputMaybe<Scalars['StringScalar']>;
  hasMobilePhone?: InputMaybe<Scalars['StringScalar']>;
  hasEmail?: InputMaybe<Scalars['StringScalar']>;
  hasPhone?: InputMaybe<Scalars['StringScalar']>;
  hasDirectPhone?: InputMaybe<Scalars['StringScalar']>;
  hasCompanyPhone?: InputMaybe<Scalars['StringScalar']>;
  hasTitle?: InputMaybe<Scalars['StringScalar']>;
  hasBeenNotified?: InputMaybe<Scalars['StringScalar']>;
  hasDepartment?: InputMaybe<Scalars['StringScalar']>;
  hasJobFunction?: InputMaybe<Scalars['StringScalar']>;
  hasSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgChartTier?: InputMaybe<Scalars['StringScalar']>;
  orgChartTier?: InputMaybe<Scalars['StringScalar']>;
  personCreationStartDate?: InputMaybe<Scalars['StringScalar']>;
  positionStartDate?: InputMaybe<Scalars['StringScalar']>;
  personCreationEndDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedStartDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedEndDate?: InputMaybe<Scalars['StringScalar']>;
  executivesOnly?: InputMaybe<Scalars['StringScalar']>;
  returnOnlyBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  excludeBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  page?: InputMaybe<Scalars['Float']>;
  rpp?: InputMaybe<Scalars['StringScalar']>;
  facetOptions?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  techAttributeTagNotUsedAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  findRecommendedContacts?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompanies?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesPage?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesRpp?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesSortBy?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesContacts?: InputMaybe<Scalars['StringScalar']>;
  solrPseudoOutputFields?: InputMaybe<Scalars['StringScalar']>;
  scoopEndDate?: InputMaybe<Scalars['StringScalar']>;
  scoopStartDate?: InputMaybe<Scalars['StringScalar']>;
  updatedSinceCreation?: InputMaybe<Scalars['StringScalar']>;
  scoopTypes?: InputMaybe<Scalars['StringScalar']>;
  scoopTopics?: InputMaybe<Scalars['StringScalar']>;
  scoopDepartments?: InputMaybe<Scalars['StringScalar']>;
  scoopDesc?: InputMaybe<Scalars['StringScalar']>;
  scoopIds?: InputMaybe<Scalars['StringScalar']>;
  scoringOptions?: InputMaybe<Scalars['StringScalar']>;
  masked?: InputMaybe<Scalars['Boolean']>;
  subscribed?: InputMaybe<Scalars['Boolean']>;
  orgImported?: InputMaybe<Scalars['Boolean']>;
  sessionToken?: InputMaybe<Scalars['StringScalar']>;
  definedUniverse?: InputMaybe<Scalars['StringScalar']>;
  outputFieldOptions?: InputMaybe<Scalars['StringScalar']>;
  ignoreDefaultFields?: InputMaybe<Scalars['StringScalar']>;
  includeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPersonOnlyMe?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedContacts?: InputMaybe<Scalars['Boolean']>;
  pTag?: InputMaybe<Scalars['StringScalar']>;
  cTag?: InputMaybe<Scalars['StringScalar']>;
  excludePeopleTags?: InputMaybe<Scalars['StringScalar']>;
  includeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAssociatedDeals?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeAllOrgImportLeads?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOptout?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  excludeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  orgImportOpportunities?: InputMaybe<Array<OrgImportOpportunities>>;
  includeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  searchFacadeParams?: InputMaybe<PersonArgs>;
};


export type QueryscoopsSearchArgs = {
  nnNegation?: InputMaybe<Scalars['StringScalar']>;
  nnQueryId?: InputMaybe<Scalars['StringScalar']>;
  nnStartDate?: InputMaybe<Scalars['StringScalar']>;
  nnEndDate?: InputMaybe<Scalars['StringScalar']>;
  companyId?: InputMaybe<Scalars['StringScalar']>;
  companyIds?: InputMaybe<Scalars['String']>;
  revenueMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  revenueMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMax?: InputMaybe<Scalars['StringScalar']>;
  techAttributesAddedDropped?: InputMaybe<TechAttributesAddedDropped>;
  techAttributeNotUsedAnd?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMin?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMax?: InputMaybe<Scalars['StringScalar']>;
  locationCountMin?: InputMaybe<Scalars['StringScalar']>;
  locationCountMax?: InputMaybe<Scalars['StringScalar']>;
  metroAreas?: InputMaybe<Scalars['StringScalar']>;
  doziPrimaryIndustry?: InputMaybe<Scalars['StringScalar']>;
  hqLocationAreaCodes?: InputMaybe<Scalars['StringScalar']>;
  departmentEmployeeCounts?: InputMaybe<DepartmentEmployeeCounts>;
  departmentBudgets?: InputMaybe<DepartmentBudgets>;
  street?: InputMaybe<Scalars['StringScalar']>;
  locationType?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  negateScope?: InputMaybe<Scalars['Boolean']>;
  itBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  itBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  anyFundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  anyFundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  fundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  anyFundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  allInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  recentInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  state?: InputMaybe<Scalars['StringScalar']>;
  metroRegion?: InputMaybe<Scalars['StringScalar']>;
  country?: InputMaybe<Scalars['StringScalar']>;
  continent?: InputMaybe<Scalars['StringScalar']>;
  companyType?: InputMaybe<Scalars['StringScalar']>;
  companyName?: InputMaybe<Scalars['String']>;
  companyDomainNames?: InputMaybe<Scalars['StringScalar']>;
  companyDesc?: InputMaybe<Scalars['StringScalar']>;
  isPublic?: InputMaybe<Scalars['StringScalar']>;
  location?: InputMaybe<Scalars['StringScalar']>;
  zipCode?: InputMaybe<Scalars['StringScalar']>;
  radiusMiles?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTag?: InputMaybe<Scalars['StringScalar']>;
  industryKeywordsMulti?: InputMaybe<Scalars['StringScalar']>;
  primaryIndustriesOnly?: InputMaybe<Scalars['StringScalar']>;
  industryClassification?: InputMaybe<Scalars['StringScalar']>;
  industryKeywords?: InputMaybe<Scalars['StringScalar']>;
  industryCodeList?: InputMaybe<Scalars['StringScalar']>;
  industryCode?: InputMaybe<Scalars['StringScalar']>;
  industryCodeAnd?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  revenueClassification?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassification?: InputMaybe<Scalars['StringScalar']>;
  companyRanking?: InputMaybe<Scalars['StringScalar']>;
  pubPrivateSectors?: InputMaybe<Scalars['StringScalar']>;
  locationSearchType?: InputMaybe<Scalars['StringScalar']>;
  fundingMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  fundingMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAnd?: InputMaybe<Scalars['StringScalar']>;
  allInvestors?: InputMaybe<Scalars['StringScalar']>;
  recentInvestors?: InputMaybe<Scalars['StringScalar']>;
  allFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  recentFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  isCertified?: InputMaybe<Scalars['StringScalar']>;
  certificationStartDate?: InputMaybe<Scalars['StringScalar']>;
  certificationEndDate?: InputMaybe<Scalars['StringScalar']>;
  streetLineTwo?: InputMaybe<Scalars['StringScalar']>;
  hashtagField?: InputMaybe<Scalars['StringScalar']>;
  fullName?: InputMaybe<Scalars['StringScalar']>;
  gender?: InputMaybe<Scalars['StringScalar']>;
  personIds?: InputMaybe<Scalars['StringScalar']>;
  personID?: InputMaybe<Scalars['StringScalar']>;
  personId?: InputMaybe<Scalars['StringScalar']>;
  hasCanadianEmail?: InputMaybe<Scalars['StringScalar']>;
  companyLocationIds?: InputMaybe<Scalars['StringScalar']>;
  emailAddress?: InputMaybe<Scalars['StringScalar']>;
  firstName?: InputMaybe<Scalars['StringScalar']>;
  lastName?: InputMaybe<Scalars['StringScalar']>;
  middleInitial?: InputMaybe<Scalars['StringScalar']>;
  excludedPersonTitle?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  titleCertification?: InputMaybe<Scalars['StringScalar']>;
  personTitle?: InputMaybe<Scalars['StringScalar']>;
  titleSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleSeniority?: InputMaybe<Scalars['StringScalar']>;
  degree?: InputMaybe<Scalars['StringScalar']>;
  school?: InputMaybe<Scalars['StringScalar']>;
  companyDomainName?: InputMaybe<Scalars['StringScalar']>;
  companyPastOrPresent?: InputMaybe<Scalars['StringScalar']>;
  validDateMonthDist?: InputMaybe<Scalars['StringScalar']>;
  contactRequirements?: InputMaybe<Scalars['StringScalar']>;
  zoomJoinsAccount?: InputMaybe<ZoomJoinsAccount>;
  orgJoinsAccount?: InputMaybe<OrgJoinsAccount>;
  titleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeNoCompany?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeOrgExportedCompanies?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgExportedContacts?: InputMaybe<Scalars['StringScalar']>;
  excludeCompanyTags?: InputMaybe<Scalars['StringScalar']>;
  personWebReferences?: InputMaybe<Scalars['StringScalar']>;
  personWebReferencesURL?: InputMaybe<Scalars['StringScalar']>;
  departments?: InputMaybe<Scalars['StringScalar']>;
  jobFunctions?: InputMaybe<Scalars['StringScalar']>;
  isEU?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMin?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMax?: InputMaybe<Scalars['StringScalar']>;
  hasLocationId?: InputMaybe<Scalars['StringScalar']>;
  hasPersonalEmail?: InputMaybe<Scalars['StringScalar']>;
  hasMobilePhone?: InputMaybe<Scalars['StringScalar']>;
  hasEmail?: InputMaybe<Scalars['StringScalar']>;
  hasPhone?: InputMaybe<Scalars['StringScalar']>;
  hasDirectPhone?: InputMaybe<Scalars['StringScalar']>;
  hasCompanyPhone?: InputMaybe<Scalars['StringScalar']>;
  hasTitle?: InputMaybe<Scalars['StringScalar']>;
  hasBeenNotified?: InputMaybe<Scalars['StringScalar']>;
  hasDepartment?: InputMaybe<Scalars['StringScalar']>;
  hasJobFunction?: InputMaybe<Scalars['StringScalar']>;
  hasSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgChartTier?: InputMaybe<Scalars['StringScalar']>;
  orgChartTier?: InputMaybe<Scalars['StringScalar']>;
  personCreationStartDate?: InputMaybe<Scalars['StringScalar']>;
  positionStartDate?: InputMaybe<Scalars['StringScalar']>;
  personCreationEndDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedStartDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedEndDate?: InputMaybe<Scalars['StringScalar']>;
  executivesOnly?: InputMaybe<Scalars['StringScalar']>;
  returnOnlyBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  excludeBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  page?: InputMaybe<Scalars['Float']>;
  rpp?: InputMaybe<Scalars['StringScalar']>;
  facetOptions?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  techAttributeTagNotUsedAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  findRecommendedContacts?: InputMaybe<Scalars['StringScalar']>;
  sortBy?: InputMaybe<Scalars['StringScalar']>;
  sortOrder?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompanies?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesPage?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesRpp?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesSortBy?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesContacts?: InputMaybe<Scalars['StringScalar']>;
  solrPseudoOutputFields?: InputMaybe<Scalars['StringScalar']>;
  scoopEndDate?: InputMaybe<Scalars['StringScalar']>;
  scoopStartDate?: InputMaybe<Scalars['StringScalar']>;
  updatedSinceCreation?: InputMaybe<Scalars['StringScalar']>;
  scoopTypes?: InputMaybe<Scalars['StringScalar']>;
  scoopTopics?: InputMaybe<Scalars['StringScalar']>;
  scoopDepartments?: InputMaybe<Scalars['StringScalar']>;
  scoopDesc?: InputMaybe<Scalars['StringScalar']>;
  scoopIds?: InputMaybe<Scalars['StringScalar']>;
  doziIndustry?: InputMaybe<Scalars['StringScalar']>;
  scoringOptions?: InputMaybe<Scalars['StringScalar']>;
  masked?: InputMaybe<Scalars['Boolean']>;
  subscribed?: InputMaybe<Scalars['Boolean']>;
  orgImported?: InputMaybe<Scalars['Boolean']>;
  sessionToken?: InputMaybe<Scalars['StringScalar']>;
  definedUniverse?: InputMaybe<Scalars['StringScalar']>;
  outputFieldOptions?: InputMaybe<Scalars['StringScalar']>;
  ignoreDefaultFields?: InputMaybe<Scalars['StringScalar']>;
  includeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPersonOnlyMe?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedContacts?: InputMaybe<Scalars['Boolean']>;
  excludeDefunctCompanies?: InputMaybe<Scalars['Boolean']>;
  pTag?: InputMaybe<Scalars['StringScalar']>;
  cTag?: InputMaybe<Scalars['StringScalar']>;
  excludePeopleTags?: InputMaybe<Scalars['StringScalar']>;
  includeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAssociatedDeals?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeAllOrgImportLeads?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOptout?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  excludeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  orgImportOpportunities?: InputMaybe<Array<OrgImportOpportunities>>;
  includeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
};


export type QueryorgchartsSearchArgs = {
  companyId?: InputMaybe<Scalars['String']>;
  departments?: InputMaybe<Scalars['String']>;
  isExecutiveContactOrgChart?: InputMaybe<Scalars['Boolean']>;
  isTierLevelOne?: InputMaybe<Scalars['Boolean']>;
  jobFunctionId?: InputMaybe<Scalars['String']>;
  employees?: InputMaybe<Scalars['Float']>;
  fullName?: InputMaybe<Scalars['String']>;
  personTitle?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Float']>;
  highestTier?: InputMaybe<Scalars['Float']>;
  jobFunctions?: InputMaybe<Scalars['String']>;
};


export type QuerycompanyHierarchySearchArgs = {
  companyIds?: InputMaybe<Scalars['String']>;
};


export type QueryfacetsArgs = {
  companyId?: InputMaybe<Scalars['String']>;
  facets?: InputMaybe<Scalars['String']>;
  subUnitType?: InputMaybe<Scalars['String']>;
  additionalOptions?: InputMaybe<LocationAdditionalOptions>;
  limits?: InputMaybe<Scalars['Float']>;
  fetchTechAddDropOptions?: InputMaybe<Scalars['Boolean']>;
  showUnmaskedContacts?: InputMaybe<Scalars['Boolean']>;
  packageName?: InputMaybe<Scalars['String']>;
  defaultSearchParams?: InputMaybe<DefaultSearchParams>;
  companyID?: InputMaybe<Scalars['String']>;
};


export type QuerysuggestionsArgs = {
  rpp?: InputMaybe<Scalars['Float']>;
};


export type QueryquickSearchArgs = {
  rpp?: InputMaybe<Scalars['Float']>;
  quickSearch?: InputMaybe<Scalars['String']>;
};


export type QuerycompanyDetailsArgs = {
  companyID?: InputMaybe<Scalars['String']>;
  fetchTechAddDropOptions?: InputMaybe<Scalars['Boolean']>;
  showUnmaskedContacts?: InputMaybe<Scalars['Boolean']>;
  defaultSearchParams?: InputMaybe<DefaultSearchParams>;
  packageName?: InputMaybe<Scalars['String']>;
  buyingCommittee?: InputMaybe<Scalars['String']>;
  companyPastOrPresent?: InputMaybe<Scalars['StringScalar']>;
  contactRequirements?: InputMaybe<Scalars['StringScalar']>;
  doziIndustry?: InputMaybe<Scalars['StringScalar']>;
  excludeDefunctCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeNoCompany?: InputMaybe<Scalars['StringScalar']>;
  isCertified?: InputMaybe<Scalars['StringScalar']>;
  sortBy?: InputMaybe<Scalars['StringScalar']>;
  sortOrder?: InputMaybe<Scalars['StringScalar']>;
  nnNegation?: InputMaybe<Scalars['StringScalar']>;
  nnQueryId?: InputMaybe<Scalars['StringScalar']>;
  nnStartDate?: InputMaybe<Scalars['StringScalar']>;
  nnEndDate?: InputMaybe<Scalars['StringScalar']>;
  companyId?: InputMaybe<Scalars['StringScalar']>;
  companyIds?: InputMaybe<Scalars['StringScalar']>;
  revenueMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  revenueMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMax?: InputMaybe<Scalars['StringScalar']>;
  techAttributesAddedDropped?: InputMaybe<TechAttributesAddedDropped>;
  techAttributeNotUsedAnd?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMin?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMax?: InputMaybe<Scalars['StringScalar']>;
  locationCountMin?: InputMaybe<Scalars['StringScalar']>;
  locationCountMax?: InputMaybe<Scalars['StringScalar']>;
  metroAreas?: InputMaybe<Scalars['StringScalar']>;
  doziPrimaryIndustry?: InputMaybe<Scalars['StringScalar']>;
  hqLocationAreaCodes?: InputMaybe<Scalars['StringScalar']>;
  departmentEmployeeCounts?: InputMaybe<DepartmentEmployeeCounts>;
  departmentBudgets?: InputMaybe<DepartmentBudgets>;
  street?: InputMaybe<Scalars['StringScalar']>;
  locationType?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  negateScope?: InputMaybe<Scalars['Boolean']>;
  itBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  itBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  anyFundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  anyFundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  fundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  anyFundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  allInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  recentInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  state?: InputMaybe<Scalars['StringScalar']>;
  metroRegion?: InputMaybe<Scalars['StringScalar']>;
  country?: InputMaybe<Scalars['StringScalar']>;
  continent?: InputMaybe<Scalars['StringScalar']>;
  companyType?: InputMaybe<Scalars['StringScalar']>;
  companyName?: InputMaybe<Scalars['StringScalar']>;
  companyDomainNames?: InputMaybe<Scalars['StringScalar']>;
  companyDesc?: InputMaybe<Scalars['StringScalar']>;
  isPublic?: InputMaybe<Scalars['StringScalar']>;
  location?: InputMaybe<Scalars['StringScalar']>;
  zipCode?: InputMaybe<Scalars['StringScalar']>;
  radiusMiles?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTag?: InputMaybe<Scalars['StringScalar']>;
  industryKeywordsMulti?: InputMaybe<Scalars['StringScalar']>;
  primaryIndustriesOnly?: InputMaybe<Scalars['StringScalar']>;
  industryClassification?: InputMaybe<Scalars['StringScalar']>;
  industryKeywords?: InputMaybe<Scalars['StringScalar']>;
  industryCodeList?: InputMaybe<Scalars['StringScalar']>;
  industryCode?: InputMaybe<Scalars['StringScalar']>;
  industryCodeAnd?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  revenueClassification?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassification?: InputMaybe<Scalars['StringScalar']>;
  companyRanking?: InputMaybe<Scalars['StringScalar']>;
  pubPrivateSectors?: InputMaybe<Scalars['StringScalar']>;
  locationSearchType?: InputMaybe<Scalars['StringScalar']>;
  fundingMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  fundingMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAnd?: InputMaybe<Scalars['StringScalar']>;
  allInvestors?: InputMaybe<Scalars['StringScalar']>;
  recentInvestors?: InputMaybe<Scalars['StringScalar']>;
  allFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  recentFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  certificationStartDate?: InputMaybe<Scalars['StringScalar']>;
  certificationEndDate?: InputMaybe<Scalars['StringScalar']>;
  streetLineTwo?: InputMaybe<Scalars['StringScalar']>;
  hashtagField?: InputMaybe<Scalars['StringScalar']>;
  fullName?: InputMaybe<Scalars['StringScalar']>;
  gender?: InputMaybe<Scalars['StringScalar']>;
  personIds?: InputMaybe<Scalars['StringScalar']>;
  personID?: InputMaybe<Scalars['StringScalar']>;
  personId?: InputMaybe<Scalars['StringScalar']>;
  hasCanadianEmail?: InputMaybe<Scalars['StringScalar']>;
  companyLocationIds?: InputMaybe<Scalars['StringScalar']>;
  emailAddress?: InputMaybe<Scalars['StringScalar']>;
  firstName?: InputMaybe<Scalars['StringScalar']>;
  lastName?: InputMaybe<Scalars['StringScalar']>;
  middleInitial?: InputMaybe<Scalars['StringScalar']>;
  excludedPersonTitle?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  titleCertification?: InputMaybe<Scalars['StringScalar']>;
  personTitle?: InputMaybe<Scalars['StringScalar']>;
  titleSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleSeniority?: InputMaybe<Scalars['StringScalar']>;
  degree?: InputMaybe<Scalars['StringScalar']>;
  school?: InputMaybe<Scalars['StringScalar']>;
  companyDomainName?: InputMaybe<Scalars['StringScalar']>;
  validDateMonthDist?: InputMaybe<Scalars['StringScalar']>;
  zoomJoinsAccount?: InputMaybe<ZoomJoinsAccount>;
  orgJoinsAccount?: InputMaybe<OrgJoinsAccount>;
  titleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeOrgExportedCompanies?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgExportedContacts?: InputMaybe<Scalars['StringScalar']>;
  excludeCompanyTags?: InputMaybe<Scalars['StringScalar']>;
  personWebReferences?: InputMaybe<Scalars['StringScalar']>;
  personWebReferencesURL?: InputMaybe<Scalars['StringScalar']>;
  departments?: InputMaybe<Scalars['StringScalar']>;
  jobFunctions?: InputMaybe<Scalars['StringScalar']>;
  isEU?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMin?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMax?: InputMaybe<Scalars['StringScalar']>;
  hasLocationId?: InputMaybe<Scalars['StringScalar']>;
  hasPersonalEmail?: InputMaybe<Scalars['StringScalar']>;
  hasMobilePhone?: InputMaybe<Scalars['StringScalar']>;
  hasEmail?: InputMaybe<Scalars['StringScalar']>;
  hasPhone?: InputMaybe<Scalars['StringScalar']>;
  hasDirectPhone?: InputMaybe<Scalars['StringScalar']>;
  hasCompanyPhone?: InputMaybe<Scalars['StringScalar']>;
  hasTitle?: InputMaybe<Scalars['StringScalar']>;
  hasBeenNotified?: InputMaybe<Scalars['StringScalar']>;
  hasDepartment?: InputMaybe<Scalars['StringScalar']>;
  hasJobFunction?: InputMaybe<Scalars['StringScalar']>;
  hasSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgChartTier?: InputMaybe<Scalars['StringScalar']>;
  orgChartTier?: InputMaybe<Scalars['StringScalar']>;
  personCreationStartDate?: InputMaybe<Scalars['StringScalar']>;
  positionStartDate?: InputMaybe<Scalars['StringScalar']>;
  personCreationEndDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedStartDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedEndDate?: InputMaybe<Scalars['StringScalar']>;
  executivesOnly?: InputMaybe<Scalars['StringScalar']>;
  returnOnlyBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  excludeBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  page?: InputMaybe<Scalars['Float']>;
  rpp?: InputMaybe<Scalars['StringScalar']>;
  facetOptions?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  techAttributeTagNotUsedAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  findRecommendedContacts?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompanies?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesPage?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesRpp?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesSortBy?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesContacts?: InputMaybe<Scalars['StringScalar']>;
  solrPseudoOutputFields?: InputMaybe<Scalars['StringScalar']>;
  scoopEndDate?: InputMaybe<Scalars['StringScalar']>;
  scoopStartDate?: InputMaybe<Scalars['StringScalar']>;
  updatedSinceCreation?: InputMaybe<Scalars['StringScalar']>;
  scoopTypes?: InputMaybe<Scalars['StringScalar']>;
  scoopTopics?: InputMaybe<Scalars['StringScalar']>;
  scoopDepartments?: InputMaybe<Scalars['StringScalar']>;
  scoopDesc?: InputMaybe<Scalars['StringScalar']>;
  scoopIds?: InputMaybe<Scalars['StringScalar']>;
  scoringOptions?: InputMaybe<Scalars['StringScalar']>;
  masked?: InputMaybe<Scalars['Boolean']>;
  subscribed?: InputMaybe<Scalars['Boolean']>;
  orgImported?: InputMaybe<Scalars['Boolean']>;
  sessionToken?: InputMaybe<Scalars['StringScalar']>;
  definedUniverse?: InputMaybe<Scalars['StringScalar']>;
  outputFieldOptions?: InputMaybe<Scalars['StringScalar']>;
  ignoreDefaultFields?: InputMaybe<Scalars['StringScalar']>;
  includeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPersonOnlyMe?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedContacts?: InputMaybe<Scalars['Boolean']>;
  pTag?: InputMaybe<Scalars['StringScalar']>;
  cTag?: InputMaybe<Scalars['StringScalar']>;
  excludePeopleTags?: InputMaybe<Scalars['StringScalar']>;
  includeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAssociatedDeals?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeAllOrgImportLeads?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOptout?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  excludeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  orgImportOpportunities?: InputMaybe<Array<OrgImportOpportunities>>;
  includeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  parsingOptions?: InputMaybe<ParsingOptions>;
  source?: InputMaybe<Scalars['String']>;
  addressVerificationStatusList?: InputMaybe<Scalars['String']>;
  parentId?: InputMaybe<Scalars['String']>;
  ultimateParentId?: InputMaybe<Scalars['String']>;
  subUnitType?: InputMaybe<Scalars['String']>;
  isLocationHierarchy?: InputMaybe<Scalars['Boolean']>;
};


export type QuerycompanySearchArgs = {
  parsingOptions?: InputMaybe<ParsingOptions>;
  source?: InputMaybe<Scalars['String']>;
  addressVerificationStatusList?: InputMaybe<Scalars['String']>;
  parentId?: InputMaybe<Scalars['String']>;
  ultimateParentId?: InputMaybe<Scalars['String']>;
  subUnitType?: InputMaybe<Scalars['String']>;
  isLocationHierarchy?: InputMaybe<Scalars['Boolean']>;
  companyID?: InputMaybe<Scalars['String']>;
  fetchTechAddDropOptions?: InputMaybe<Scalars['Boolean']>;
  showUnmaskedContacts?: InputMaybe<Scalars['Boolean']>;
  defaultSearchParams?: InputMaybe<DefaultSearchParams>;
  packageName?: InputMaybe<Scalars['String']>;
  buyingCommittee?: InputMaybe<Scalars['String']>;
  companyPastOrPresent?: InputMaybe<Scalars['StringScalar']>;
  contactRequirements?: InputMaybe<Scalars['StringScalar']>;
  doziIndustry?: InputMaybe<Scalars['StringScalar']>;
  excludeDefunctCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeNoCompany?: InputMaybe<Scalars['StringScalar']>;
  isCertified?: InputMaybe<Scalars['StringScalar']>;
  sortBy?: InputMaybe<Scalars['StringScalar']>;
  sortOrder?: InputMaybe<Scalars['StringScalar']>;
  nnNegation?: InputMaybe<Scalars['StringScalar']>;
  nnQueryId?: InputMaybe<Scalars['StringScalar']>;
  nnStartDate?: InputMaybe<Scalars['StringScalar']>;
  nnEndDate?: InputMaybe<Scalars['StringScalar']>;
  companyId?: InputMaybe<Scalars['StringScalar']>;
  companyIds?: InputMaybe<Scalars['StringScalar']>;
  revenueMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  revenueMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMax?: InputMaybe<Scalars['StringScalar']>;
  techAttributesAddedDropped?: InputMaybe<TechAttributesAddedDropped>;
  techAttributeNotUsedAnd?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMin?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMax?: InputMaybe<Scalars['StringScalar']>;
  locationCountMin?: InputMaybe<Scalars['StringScalar']>;
  locationCountMax?: InputMaybe<Scalars['StringScalar']>;
  metroAreas?: InputMaybe<Scalars['StringScalar']>;
  doziPrimaryIndustry?: InputMaybe<Scalars['StringScalar']>;
  hqLocationAreaCodes?: InputMaybe<Scalars['StringScalar']>;
  departmentEmployeeCounts?: InputMaybe<DepartmentEmployeeCounts>;
  departmentBudgets?: InputMaybe<DepartmentBudgets>;
  street?: InputMaybe<Scalars['StringScalar']>;
  locationType?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  negateScope?: InputMaybe<Scalars['Boolean']>;
  itBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  itBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  anyFundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  anyFundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  fundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  anyFundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  allInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  recentInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  state?: InputMaybe<Scalars['StringScalar']>;
  metroRegion?: InputMaybe<Scalars['StringScalar']>;
  country?: InputMaybe<Scalars['StringScalar']>;
  continent?: InputMaybe<Scalars['StringScalar']>;
  companyType?: InputMaybe<Scalars['StringScalar']>;
  companyName?: InputMaybe<Scalars['StringScalar']>;
  companyDomainNames?: InputMaybe<Scalars['StringScalar']>;
  companyDesc?: InputMaybe<Scalars['StringScalar']>;
  isPublic?: InputMaybe<Scalars['StringScalar']>;
  location?: InputMaybe<Scalars['StringScalar']>;
  zipCode?: InputMaybe<Scalars['StringScalar']>;
  radiusMiles?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTag?: InputMaybe<Scalars['StringScalar']>;
  industryKeywordsMulti?: InputMaybe<Scalars['StringScalar']>;
  primaryIndustriesOnly?: InputMaybe<Scalars['StringScalar']>;
  industryClassification?: InputMaybe<Scalars['StringScalar']>;
  industryKeywords?: InputMaybe<Scalars['StringScalar']>;
  industryCodeList?: InputMaybe<Scalars['StringScalar']>;
  industryCode?: InputMaybe<Scalars['StringScalar']>;
  industryCodeAnd?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  revenueClassification?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassification?: InputMaybe<Scalars['StringScalar']>;
  companyRanking?: InputMaybe<Scalars['StringScalar']>;
  pubPrivateSectors?: InputMaybe<Scalars['StringScalar']>;
  locationSearchType?: InputMaybe<Scalars['StringScalar']>;
  fundingMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  fundingMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAnd?: InputMaybe<Scalars['StringScalar']>;
  allInvestors?: InputMaybe<Scalars['StringScalar']>;
  recentInvestors?: InputMaybe<Scalars['StringScalar']>;
  allFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  recentFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  certificationStartDate?: InputMaybe<Scalars['StringScalar']>;
  certificationEndDate?: InputMaybe<Scalars['StringScalar']>;
  streetLineTwo?: InputMaybe<Scalars['StringScalar']>;
  hashtagField?: InputMaybe<Scalars['StringScalar']>;
  fullName?: InputMaybe<Scalars['StringScalar']>;
  gender?: InputMaybe<Scalars['StringScalar']>;
  personIds?: InputMaybe<Scalars['StringScalar']>;
  personID?: InputMaybe<Scalars['StringScalar']>;
  personId?: InputMaybe<Scalars['StringScalar']>;
  hasCanadianEmail?: InputMaybe<Scalars['StringScalar']>;
  companyLocationIds?: InputMaybe<Scalars['StringScalar']>;
  emailAddress?: InputMaybe<Scalars['StringScalar']>;
  firstName?: InputMaybe<Scalars['StringScalar']>;
  lastName?: InputMaybe<Scalars['StringScalar']>;
  middleInitial?: InputMaybe<Scalars['StringScalar']>;
  excludedPersonTitle?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  titleCertification?: InputMaybe<Scalars['StringScalar']>;
  personTitle?: InputMaybe<Scalars['StringScalar']>;
  titleSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleSeniority?: InputMaybe<Scalars['StringScalar']>;
  degree?: InputMaybe<Scalars['StringScalar']>;
  school?: InputMaybe<Scalars['StringScalar']>;
  companyDomainName?: InputMaybe<Scalars['StringScalar']>;
  validDateMonthDist?: InputMaybe<Scalars['StringScalar']>;
  zoomJoinsAccount?: InputMaybe<ZoomJoinsAccount>;
  orgJoinsAccount?: InputMaybe<OrgJoinsAccount>;
  titleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeOrgExportedCompanies?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgExportedContacts?: InputMaybe<Scalars['StringScalar']>;
  excludeCompanyTags?: InputMaybe<Scalars['StringScalar']>;
  personWebReferences?: InputMaybe<Scalars['StringScalar']>;
  personWebReferencesURL?: InputMaybe<Scalars['StringScalar']>;
  departments?: InputMaybe<Scalars['StringScalar']>;
  jobFunctions?: InputMaybe<Scalars['StringScalar']>;
  isEU?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMin?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMax?: InputMaybe<Scalars['StringScalar']>;
  hasLocationId?: InputMaybe<Scalars['StringScalar']>;
  hasPersonalEmail?: InputMaybe<Scalars['StringScalar']>;
  hasMobilePhone?: InputMaybe<Scalars['StringScalar']>;
  hasEmail?: InputMaybe<Scalars['StringScalar']>;
  hasPhone?: InputMaybe<Scalars['StringScalar']>;
  hasDirectPhone?: InputMaybe<Scalars['StringScalar']>;
  hasCompanyPhone?: InputMaybe<Scalars['StringScalar']>;
  hasTitle?: InputMaybe<Scalars['StringScalar']>;
  hasBeenNotified?: InputMaybe<Scalars['StringScalar']>;
  hasDepartment?: InputMaybe<Scalars['StringScalar']>;
  hasJobFunction?: InputMaybe<Scalars['StringScalar']>;
  hasSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgChartTier?: InputMaybe<Scalars['StringScalar']>;
  orgChartTier?: InputMaybe<Scalars['StringScalar']>;
  personCreationStartDate?: InputMaybe<Scalars['StringScalar']>;
  positionStartDate?: InputMaybe<Scalars['StringScalar']>;
  personCreationEndDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedStartDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedEndDate?: InputMaybe<Scalars['StringScalar']>;
  executivesOnly?: InputMaybe<Scalars['StringScalar']>;
  returnOnlyBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  excludeBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  page?: InputMaybe<Scalars['Float']>;
  rpp?: InputMaybe<Scalars['StringScalar']>;
  facetOptions?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  techAttributeTagNotUsedAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  findRecommendedContacts?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompanies?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesPage?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesRpp?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesSortBy?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesContacts?: InputMaybe<Scalars['StringScalar']>;
  solrPseudoOutputFields?: InputMaybe<Scalars['StringScalar']>;
  scoopEndDate?: InputMaybe<Scalars['StringScalar']>;
  scoopStartDate?: InputMaybe<Scalars['StringScalar']>;
  updatedSinceCreation?: InputMaybe<Scalars['StringScalar']>;
  scoopTypes?: InputMaybe<Scalars['StringScalar']>;
  scoopTopics?: InputMaybe<Scalars['StringScalar']>;
  scoopDepartments?: InputMaybe<Scalars['StringScalar']>;
  scoopDesc?: InputMaybe<Scalars['StringScalar']>;
  scoopIds?: InputMaybe<Scalars['StringScalar']>;
  scoringOptions?: InputMaybe<Scalars['StringScalar']>;
  masked?: InputMaybe<Scalars['Boolean']>;
  subscribed?: InputMaybe<Scalars['Boolean']>;
  orgImported?: InputMaybe<Scalars['Boolean']>;
  sessionToken?: InputMaybe<Scalars['StringScalar']>;
  definedUniverse?: InputMaybe<Scalars['StringScalar']>;
  outputFieldOptions?: InputMaybe<Scalars['StringScalar']>;
  ignoreDefaultFields?: InputMaybe<Scalars['StringScalar']>;
  includeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPersonOnlyMe?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedContacts?: InputMaybe<Scalars['Boolean']>;
  pTag?: InputMaybe<Scalars['StringScalar']>;
  cTag?: InputMaybe<Scalars['StringScalar']>;
  excludePeopleTags?: InputMaybe<Scalars['StringScalar']>;
  includeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAssociatedDeals?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeAllOrgImportLeads?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOptout?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  excludeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  orgImportOpportunities?: InputMaybe<Array<OrgImportOpportunities>>;
  includeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  searchFacadeParams?: InputMaybe<CompanyArgs>;
};

export type FundingInvestorModel = {
  companyName?: Maybe<Scalars['String']>;
};

export type FundingModel = {
  amountIn000s?: Maybe<Scalars['Float']>;
  date?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  investors?: Maybe<FundingInvestorModel>;
};

export type DoziIndustryModel = {
  displayName?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  isPrimary?: Maybe<Scalars['Boolean']>;
  score?: Maybe<Scalars['Float']>;
  code?: Maybe<Scalars['String']>;
};

export type UltimateParentModel = {
  id?: Maybe<Scalars['Float']>;
  name?: Maybe<Scalars['String']>;
};

export type MergerModel = {
  companyId?: Maybe<Scalars['String']>;
  companyName?: Maybe<Scalars['String']>;
  zoomUrl?: Maybe<Scalars['String']>;
};

export type LocationModel = {
  Street?: Maybe<Scalars['String']>;
  City?: Maybe<Scalars['String']>;
  State?: Maybe<Scalars['String']>;
  Zip?: Maybe<Scalars['String']>;
  street?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  CountryCode?: Maybe<Scalars['String']>;
  countryCode?: Maybe<Scalars['String']>;
};

export type SocialMediaParsed = {
  linkedin?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

export type SocialMediaModel = {
  followerCount?: Maybe<Scalars['Float']>;
  socialNetworkType?: Maybe<Scalars['String']>;
  socialNetworkUrl?: Maybe<Scalars['String']>;
};

export type SocialMediaUrlModel = {
  socialMedia?: Maybe<Array<SocialMediaModel>>;
};

export type PrivacyRegulationsModel = {
  privacyRegulationFlag?: Maybe<Scalars['String']>;
};

export type OrgUniversalTagsModel = {
  tagName?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Boolean']>;
};

export type OwnersValueModel = {
  date?: Maybe<Scalars['Float']>;
  crmEntityId?: Maybe<Scalars['String']>;
  ownerId?: Maybe<Scalars['String']>;
  ownerName?: Maybe<Scalars['String']>;
};

export type OwnersModel = {
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Array<OwnersValueModel>>;
};

export type ImportedDataModel = {
  date?: Maybe<Scalars['Float']>;
  owners?: Maybe<Array<OwnersModel>>;
};

export type AttributeChipModel = {
  displayName?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
  isPrimary?: Maybe<Scalars['Boolean']>;
  chipHref?: Maybe<Scalars['String']>;
  lastSeen?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  count?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
};

export type AttributeChipGroupModel = {
  areaOfStudy?: Maybe<Scalars['String']>;
  degree?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  attributeCol?: Maybe<Array<AttributeChipModel>>;
  isOpen?: Maybe<Scalars['Boolean']>;
  isPrimary?: Maybe<Scalars['Boolean']>;
  order?: Maybe<Scalars['Float']>;
};

export type NoticeInfoModel = {
  hasBeenNotified?: Maybe<Scalars['Boolean']>;
  emailNoticeProvidedDate?: Maybe<Scalars['String']>;
};

export type ProductModel = {
  value?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
};

export type FacetItemModel = {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  count?: Maybe<Scalars['Float']>;
  searchValue?: Maybe<Scalars['String']>;
};

export type FacetDataItem = {
  count?: Maybe<Scalars['Float']>;
  counts?: Maybe<Array<FacetItemModel>>;
};

export type FacetDataOptions = {
  ManagementLevels?: Maybe<FacetDataItem>;
  DEPARTMENT?: Maybe<FacetDataItem>;
  Continents?: Maybe<FacetDataItem>;
  Countries?: Maybe<FacetDataItem>;
  States?: Maybe<FacetDataItem>;
  LOCATION_COMPANY_ID?: Maybe<FacetDataItem>;
};

export type FacetModel = {
  totalResults?: Maybe<Scalars['Float']>;
  maxResults?: Maybe<Scalars['Float']>;
  facetCount?: Maybe<Scalars['Float']>;
  totalRecordsCount?: Maybe<Scalars['Float']>;
  data?: Maybe<FacetDataOptions>;
};

export type AdvanceFacetDataModel = {
  facets?: Maybe<Array<BasicFacetItemModel>>;
};

export type Facets = {
  peopleFacets: FacetModel;
  locationFacets: FacetModel;
  orgChartFacets?: Maybe<AdvanceFacetDataModel>;
};


export type FacetspeopleFacetsArgs = {
  companyId?: InputMaybe<Scalars['String']>;
  facets?: InputMaybe<Scalars['String']>;
  subUnitType?: InputMaybe<Scalars['String']>;
  additionalOptions?: InputMaybe<LocationAdditionalOptions>;
  limits?: InputMaybe<Scalars['Float']>;
  fetchTechAddDropOptions?: InputMaybe<Scalars['Boolean']>;
  showUnmaskedContacts?: InputMaybe<Scalars['Boolean']>;
  packageName?: InputMaybe<Scalars['String']>;
  defaultSearchParams?: InputMaybe<DefaultSearchParams>;
  companyID?: InputMaybe<Scalars['String']>;
};


export type FacetslocationFacetsArgs = {
  companyId?: InputMaybe<Scalars['String']>;
  facets?: InputMaybe<Scalars['String']>;
  subUnitType?: InputMaybe<Scalars['String']>;
  additionalOptions?: InputMaybe<LocationAdditionalOptions>;
  limits?: InputMaybe<Scalars['Float']>;
  fetchTechAddDropOptions?: InputMaybe<Scalars['Boolean']>;
  showUnmaskedContacts?: InputMaybe<Scalars['Boolean']>;
  packageName?: InputMaybe<Scalars['String']>;
  defaultSearchParams?: InputMaybe<DefaultSearchParams>;
  companyID?: InputMaybe<Scalars['String']>;
};


export type FacetsorgChartFacetsArgs = {
  companyId?: InputMaybe<Scalars['String']>;
  facets?: InputMaybe<Scalars['String']>;
  subUnitType?: InputMaybe<Scalars['String']>;
  additionalOptions?: InputMaybe<LocationAdditionalOptions>;
  limits?: InputMaybe<Scalars['Float']>;
  fetchTechAddDropOptions?: InputMaybe<Scalars['Boolean']>;
  showUnmaskedContacts?: InputMaybe<Scalars['Boolean']>;
  packageName?: InputMaybe<Scalars['String']>;
  defaultSearchParams?: InputMaybe<DefaultSearchParams>;
  companyID?: InputMaybe<Scalars['String']>;
};

export type LocationAdditionalOptions = {
  companyPastOrPresent?: InputMaybe<Scalars['Float']>;
  confidenceScoreMax?: InputMaybe<Scalars['Float']>;
  rpp?: InputMaybe<Scalars['Float']>;
  confidenceScoreMin?: InputMaybe<Scalars['Float']>;
  page?: InputMaybe<Scalars['Float']>;
  excludeBoardMembers?: InputMaybe<Scalars['Boolean']>;
  excludeNoCompany?: InputMaybe<Scalars['Boolean']>;
};

export type DefaultSearchParams = {
  facets?: InputMaybe<Scalars['String']>;
  sortBy?: InputMaybe<Scalars['String']>;
  sortOrder?: InputMaybe<Scalars['String']>;
  companyPastOrPresent?: InputMaybe<Scalars['String']>;
  excludeNoCompany?: InputMaybe<Scalars['String']>;
  excludeDefunctCompanies?: InputMaybe<Scalars['Boolean']>;
  returnOnlyBoardMembers?: InputMaybe<Scalars['Boolean']>;
  excludeBoardMembers?: InputMaybe<Scalars['Boolean']>;
  contactRequirements?: InputMaybe<Scalars['String']>;
  confidenceScoreMin?: InputMaybe<Scalars['Float']>;
  confidenceScoreMax?: InputMaybe<Scalars['Float']>;
  isCertified?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Float']>;
  uniqueCompaniesSortBy?: InputMaybe<Scalars['String']>;
  validDateMonthDist?: InputMaybe<Scalars['String']>;
  limits?: InputMaybe<Scalars['Float']>;
  origination?: InputMaybe<Scalars['String']>;
};

export type BasicFacetItemModel = {
  name?: Maybe<Scalars['String']>;
  counts?: Maybe<Array<FacetItemModel>>;
};

export type BasicFacetDataModel = {
  facets?: Maybe<BasicFacetItemModel>;
};

export type SubUnitTypeInfo = {
  type?: Maybe<Scalars['Float']>;
  typeDescription?: Maybe<Scalars['String']>;
};

export type FamilyTreeModel = {
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Float']>;
  name?: Maybe<Scalars['String']>;
  familyNodes?: Maybe<Array<FamilyTreeModel>>;
  checked?: Maybe<Scalars['Boolean']>;
  phone?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  employeeCount?: Maybe<Scalars['Float']>;
  searchByAddressUrl?: Maybe<Scalars['String']>;
  subUnitTypeInfo?: Maybe<SubUnitTypeInfo>;
  locationType?: Maybe<Scalars['String']>;
};

export type CompanyHierarchyRes = {
  familyTree?: Maybe<FamilyTreeModel>;
  ultimateParent?: Maybe<UltimateParentModel>;
};

export type DepartmentBudgetsModel = {
  departmentType?: Maybe<Scalars['String']>;
  budgetAmount?: Maybe<Scalars['Float']>;
};

export type CompetitorModel = {
  companyId?: Maybe<Scalars['Float']>;
  companyName?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  revenue?: Maybe<Scalars['String']>;
  employeeCount?: Maybe<Scalars['Float']>;
};

export type TechnologyAddDropModel = {
  technologyId?: Maybe<Scalars['Float']>;
  activity?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export type EmployeeGrowthDataModel = {
  label?: Maybe<Scalars['String']>;
  employeeCount?: Maybe<Scalars['Float']>;
};

export type EmployeeGrowthModel = {
  oneYearEmployeeGrowthRate?: Maybe<Scalars['Float']>;
  twoYearEmployeeGrowthRate?: Maybe<Scalars['Float']>;
  employeeGrowthData?: Maybe<Array<EmployeeGrowthDataModel>>;
};

export type CompanyDetailsModel = {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  tagged?: Maybe<Scalars['Boolean']>;
  masked?: Maybe<Scalars['Boolean']>;
  subscribed?: Maybe<Scalars['Boolean']>;
  exported?: Maybe<Scalars['Boolean']>;
  domain?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['String']>;
  fax?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  ticker?: Maybe<Scalars['String']>;
  crmEntityId?: Maybe<Scalars['String']>;
  revenue?: Maybe<Scalars['String']>;
  allIndustries?: Maybe<Array<Scalars['String']>>;
  isDefunct?: Maybe<Scalars['Boolean']>;
  uniqueCompanyNumContacts?: Maybe<Scalars['Float']>;
  companyHref?: Maybe<Scalars['String']>;
  isInPreview?: Maybe<Scalars['Boolean']>;
  funding?: Maybe<Array<FundingModel>>;
  certified?: Maybe<Scalars['Boolean']>;
  certificationDate?: Maybe<Scalars['String']>;
  icpScore?: Maybe<Scalars['String']>;
  locationsCount?: Maybe<Scalars['String']>;
  orgImport?: Maybe<Scalars['String']>;
  entityId?: Maybe<Scalars['String']>;
  address?: Maybe<LocationModel>;
  displayAddress?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  NAICS?: Maybe<Array<Scalars['Float']>>;
  SIC?: Maybe<Array<Scalars['Float']>>;
  ranking?: Maybe<Array<Scalars['String']>>;
  employeeCount?: Maybe<Scalars['Float']>;
  employeeCountRange?: Maybe<Scalars['String']>;
  revenueRange?: Maybe<Scalars['String']>;
  companyAttributes?: Maybe<Array<AttributeChipGroupModel>>;
  techAttributes?: Maybe<Array<AttributeChipGroupModel>>;
  doziIndustry?: Maybe<Array<DoziIndustryModel>>;
  topLevelIndustry?: Maybe<Array<Scalars['String']>>;
  industryLabel?: Maybe<Array<DoziIndustryModel>>;
  doziIndustryString?: Maybe<Scalars['String']>;
  industry?: Maybe<Array<Scalars['String']>>;
  industryV2?: Maybe<Array<Scalars['String']>>;
  industryForBasic?: Maybe<Array<Scalars['String']>>;
  topIndustry?: Maybe<Array<Scalars['String']>>;
  industries?: Maybe<Array<AttributeChipModel>>;
  industriesAsAttributes?: Maybe<Array<AttributeChipModel>>;
  basicIndustries?: Maybe<Array<Scalars['String']>>;
  merger?: Maybe<Array<MergerModel>>;
  alternateNames?: Maybe<Array<Scalars['String']>>;
  orgChartFacetData?: Maybe<FacetDataOptions>;
  importedData?: Maybe<ImportedDataModel>;
  socialUrls?: Maybe<SocialMediaUrlModel>;
  socialUrlsParsed?: Maybe<SocialMediaParsed>;
  followerCountParsed?: Maybe<SocialMediaParsed>;
  foundedYear?: Maybe<Scalars['Float']>;
  alexaRank?: Maybe<Scalars['Float']>;
  departmentBudgets?: Maybe<Array<DepartmentBudgetsModel>>;
  companyEmployeeGrowth?: Maybe<EmployeeGrowthModel>;
  ultimateParent?: Maybe<UltimateParentModel>;
  basicUltimateParent?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  products?: Maybe<Array<ProductModel>>;
  technologyAddDrop?: Maybe<Array<TechnologyAddDropModel>>;
  competitors?: Maybe<Array<CompetitorModel>>;
  companyHierarchy?: Maybe<CompanyHierarchyRes>;
};


export type CompanyDetailsModelindustryArgs = {
  companyID?: InputMaybe<Scalars['String']>;
  fetchTechAddDropOptions?: InputMaybe<Scalars['Boolean']>;
  showUnmaskedContacts?: InputMaybe<Scalars['Boolean']>;
  defaultSearchParams?: InputMaybe<DefaultSearchParams>;
  packageName?: InputMaybe<Scalars['String']>;
  buyingCommittee?: InputMaybe<Scalars['String']>;
  companyPastOrPresent?: InputMaybe<Scalars['StringScalar']>;
  contactRequirements?: InputMaybe<Scalars['StringScalar']>;
  doziIndustry?: InputMaybe<Scalars['StringScalar']>;
  excludeDefunctCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeNoCompany?: InputMaybe<Scalars['StringScalar']>;
  isCertified?: InputMaybe<Scalars['StringScalar']>;
  sortBy?: InputMaybe<Scalars['StringScalar']>;
  sortOrder?: InputMaybe<Scalars['StringScalar']>;
  nnNegation?: InputMaybe<Scalars['StringScalar']>;
  nnQueryId?: InputMaybe<Scalars['StringScalar']>;
  nnStartDate?: InputMaybe<Scalars['StringScalar']>;
  nnEndDate?: InputMaybe<Scalars['StringScalar']>;
  companyId?: InputMaybe<Scalars['StringScalar']>;
  companyIds?: InputMaybe<Scalars['StringScalar']>;
  revenueMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  revenueMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMax?: InputMaybe<Scalars['StringScalar']>;
  techAttributesAddedDropped?: InputMaybe<TechAttributesAddedDropped>;
  techAttributeNotUsedAnd?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMin?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMax?: InputMaybe<Scalars['StringScalar']>;
  locationCountMin?: InputMaybe<Scalars['StringScalar']>;
  locationCountMax?: InputMaybe<Scalars['StringScalar']>;
  metroAreas?: InputMaybe<Scalars['StringScalar']>;
  doziPrimaryIndustry?: InputMaybe<Scalars['StringScalar']>;
  hqLocationAreaCodes?: InputMaybe<Scalars['StringScalar']>;
  departmentEmployeeCounts?: InputMaybe<DepartmentEmployeeCounts>;
  departmentBudgets?: InputMaybe<DepartmentBudgets>;
  street?: InputMaybe<Scalars['StringScalar']>;
  locationType?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  negateScope?: InputMaybe<Scalars['Boolean']>;
  itBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  itBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  anyFundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  anyFundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  fundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  anyFundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  allInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  recentInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  state?: InputMaybe<Scalars['StringScalar']>;
  metroRegion?: InputMaybe<Scalars['StringScalar']>;
  country?: InputMaybe<Scalars['StringScalar']>;
  continent?: InputMaybe<Scalars['StringScalar']>;
  companyType?: InputMaybe<Scalars['StringScalar']>;
  companyName?: InputMaybe<Scalars['StringScalar']>;
  companyDomainNames?: InputMaybe<Scalars['StringScalar']>;
  companyDesc?: InputMaybe<Scalars['StringScalar']>;
  isPublic?: InputMaybe<Scalars['StringScalar']>;
  location?: InputMaybe<Scalars['StringScalar']>;
  zipCode?: InputMaybe<Scalars['StringScalar']>;
  radiusMiles?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTag?: InputMaybe<Scalars['StringScalar']>;
  industryKeywordsMulti?: InputMaybe<Scalars['StringScalar']>;
  primaryIndustriesOnly?: InputMaybe<Scalars['StringScalar']>;
  industryClassification?: InputMaybe<Scalars['StringScalar']>;
  industryKeywords?: InputMaybe<Scalars['StringScalar']>;
  industryCodeList?: InputMaybe<Scalars['StringScalar']>;
  industryCode?: InputMaybe<Scalars['StringScalar']>;
  industryCodeAnd?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  revenueClassification?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassification?: InputMaybe<Scalars['StringScalar']>;
  companyRanking?: InputMaybe<Scalars['StringScalar']>;
  pubPrivateSectors?: InputMaybe<Scalars['StringScalar']>;
  locationSearchType?: InputMaybe<Scalars['StringScalar']>;
  fundingMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  fundingMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAnd?: InputMaybe<Scalars['StringScalar']>;
  allInvestors?: InputMaybe<Scalars['StringScalar']>;
  recentInvestors?: InputMaybe<Scalars['StringScalar']>;
  allFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  recentFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  certificationStartDate?: InputMaybe<Scalars['StringScalar']>;
  certificationEndDate?: InputMaybe<Scalars['StringScalar']>;
  streetLineTwo?: InputMaybe<Scalars['StringScalar']>;
  hashtagField?: InputMaybe<Scalars['StringScalar']>;
  fullName?: InputMaybe<Scalars['StringScalar']>;
  gender?: InputMaybe<Scalars['StringScalar']>;
  personIds?: InputMaybe<Scalars['StringScalar']>;
  personID?: InputMaybe<Scalars['StringScalar']>;
  personId?: InputMaybe<Scalars['StringScalar']>;
  hasCanadianEmail?: InputMaybe<Scalars['StringScalar']>;
  companyLocationIds?: InputMaybe<Scalars['StringScalar']>;
  emailAddress?: InputMaybe<Scalars['StringScalar']>;
  firstName?: InputMaybe<Scalars['StringScalar']>;
  lastName?: InputMaybe<Scalars['StringScalar']>;
  middleInitial?: InputMaybe<Scalars['StringScalar']>;
  excludedPersonTitle?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  titleCertification?: InputMaybe<Scalars['StringScalar']>;
  personTitle?: InputMaybe<Scalars['StringScalar']>;
  titleSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleSeniority?: InputMaybe<Scalars['StringScalar']>;
  degree?: InputMaybe<Scalars['StringScalar']>;
  school?: InputMaybe<Scalars['StringScalar']>;
  companyDomainName?: InputMaybe<Scalars['StringScalar']>;
  validDateMonthDist?: InputMaybe<Scalars['StringScalar']>;
  zoomJoinsAccount?: InputMaybe<ZoomJoinsAccount>;
  orgJoinsAccount?: InputMaybe<OrgJoinsAccount>;
  titleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeOrgExportedCompanies?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgExportedContacts?: InputMaybe<Scalars['StringScalar']>;
  excludeCompanyTags?: InputMaybe<Scalars['StringScalar']>;
  personWebReferences?: InputMaybe<Scalars['StringScalar']>;
  personWebReferencesURL?: InputMaybe<Scalars['StringScalar']>;
  departments?: InputMaybe<Scalars['StringScalar']>;
  jobFunctions?: InputMaybe<Scalars['StringScalar']>;
  isEU?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMin?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMax?: InputMaybe<Scalars['StringScalar']>;
  hasLocationId?: InputMaybe<Scalars['StringScalar']>;
  hasPersonalEmail?: InputMaybe<Scalars['StringScalar']>;
  hasMobilePhone?: InputMaybe<Scalars['StringScalar']>;
  hasEmail?: InputMaybe<Scalars['StringScalar']>;
  hasPhone?: InputMaybe<Scalars['StringScalar']>;
  hasDirectPhone?: InputMaybe<Scalars['StringScalar']>;
  hasCompanyPhone?: InputMaybe<Scalars['StringScalar']>;
  hasTitle?: InputMaybe<Scalars['StringScalar']>;
  hasBeenNotified?: InputMaybe<Scalars['StringScalar']>;
  hasDepartment?: InputMaybe<Scalars['StringScalar']>;
  hasJobFunction?: InputMaybe<Scalars['StringScalar']>;
  hasSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgChartTier?: InputMaybe<Scalars['StringScalar']>;
  orgChartTier?: InputMaybe<Scalars['StringScalar']>;
  personCreationStartDate?: InputMaybe<Scalars['StringScalar']>;
  positionStartDate?: InputMaybe<Scalars['StringScalar']>;
  personCreationEndDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedStartDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedEndDate?: InputMaybe<Scalars['StringScalar']>;
  executivesOnly?: InputMaybe<Scalars['StringScalar']>;
  returnOnlyBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  excludeBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  page?: InputMaybe<Scalars['Float']>;
  rpp?: InputMaybe<Scalars['StringScalar']>;
  facetOptions?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  techAttributeTagNotUsedAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  findRecommendedContacts?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompanies?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesPage?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesRpp?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesSortBy?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesContacts?: InputMaybe<Scalars['StringScalar']>;
  solrPseudoOutputFields?: InputMaybe<Scalars['StringScalar']>;
  scoopEndDate?: InputMaybe<Scalars['StringScalar']>;
  scoopStartDate?: InputMaybe<Scalars['StringScalar']>;
  updatedSinceCreation?: InputMaybe<Scalars['StringScalar']>;
  scoopTypes?: InputMaybe<Scalars['StringScalar']>;
  scoopTopics?: InputMaybe<Scalars['StringScalar']>;
  scoopDepartments?: InputMaybe<Scalars['StringScalar']>;
  scoopDesc?: InputMaybe<Scalars['StringScalar']>;
  scoopIds?: InputMaybe<Scalars['StringScalar']>;
  scoringOptions?: InputMaybe<Scalars['StringScalar']>;
  masked?: InputMaybe<Scalars['Boolean']>;
  subscribed?: InputMaybe<Scalars['Boolean']>;
  orgImported?: InputMaybe<Scalars['Boolean']>;
  sessionToken?: InputMaybe<Scalars['StringScalar']>;
  definedUniverse?: InputMaybe<Scalars['StringScalar']>;
  outputFieldOptions?: InputMaybe<Scalars['StringScalar']>;
  ignoreDefaultFields?: InputMaybe<Scalars['StringScalar']>;
  includeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPersonOnlyMe?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedContacts?: InputMaybe<Scalars['Boolean']>;
  pTag?: InputMaybe<Scalars['StringScalar']>;
  cTag?: InputMaybe<Scalars['StringScalar']>;
  excludePeopleTags?: InputMaybe<Scalars['StringScalar']>;
  includeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAssociatedDeals?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeAllOrgImportLeads?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOptout?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  excludeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  orgImportOpportunities?: InputMaybe<Array<OrgImportOpportunities>>;
  includeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  parsingOptions?: InputMaybe<ParsingOptions>;
  source?: InputMaybe<Scalars['String']>;
  addressVerificationStatusList?: InputMaybe<Scalars['String']>;
  parentId?: InputMaybe<Scalars['String']>;
  ultimateParentId?: InputMaybe<Scalars['String']>;
  subUnitType?: InputMaybe<Scalars['String']>;
  isLocationHierarchy?: InputMaybe<Scalars['Boolean']>;
};


export type CompanyDetailsModelcompanyHierarchyArgs = {
  companyID?: InputMaybe<Scalars['String']>;
  fetchTechAddDropOptions?: InputMaybe<Scalars['Boolean']>;
  showUnmaskedContacts?: InputMaybe<Scalars['Boolean']>;
  defaultSearchParams?: InputMaybe<DefaultSearchParams>;
  packageName?: InputMaybe<Scalars['String']>;
  buyingCommittee?: InputMaybe<Scalars['String']>;
  companyPastOrPresent?: InputMaybe<Scalars['StringScalar']>;
  contactRequirements?: InputMaybe<Scalars['StringScalar']>;
  doziIndustry?: InputMaybe<Scalars['StringScalar']>;
  excludeDefunctCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeNoCompany?: InputMaybe<Scalars['StringScalar']>;
  isCertified?: InputMaybe<Scalars['StringScalar']>;
  sortBy?: InputMaybe<Scalars['StringScalar']>;
  sortOrder?: InputMaybe<Scalars['StringScalar']>;
  nnNegation?: InputMaybe<Scalars['StringScalar']>;
  nnQueryId?: InputMaybe<Scalars['StringScalar']>;
  nnStartDate?: InputMaybe<Scalars['StringScalar']>;
  nnEndDate?: InputMaybe<Scalars['StringScalar']>;
  companyId?: InputMaybe<Scalars['StringScalar']>;
  companyIds?: InputMaybe<Scalars['StringScalar']>;
  revenueMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  revenueMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMax?: InputMaybe<Scalars['StringScalar']>;
  techAttributesAddedDropped?: InputMaybe<TechAttributesAddedDropped>;
  techAttributeNotUsedAnd?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMin?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMax?: InputMaybe<Scalars['StringScalar']>;
  locationCountMin?: InputMaybe<Scalars['StringScalar']>;
  locationCountMax?: InputMaybe<Scalars['StringScalar']>;
  metroAreas?: InputMaybe<Scalars['StringScalar']>;
  doziPrimaryIndustry?: InputMaybe<Scalars['StringScalar']>;
  hqLocationAreaCodes?: InputMaybe<Scalars['StringScalar']>;
  departmentEmployeeCounts?: InputMaybe<DepartmentEmployeeCounts>;
  departmentBudgets?: InputMaybe<DepartmentBudgets>;
  street?: InputMaybe<Scalars['StringScalar']>;
  locationType?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  negateScope?: InputMaybe<Scalars['Boolean']>;
  itBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  itBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  anyFundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  anyFundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  fundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  anyFundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  allInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  recentInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  state?: InputMaybe<Scalars['StringScalar']>;
  metroRegion?: InputMaybe<Scalars['StringScalar']>;
  country?: InputMaybe<Scalars['StringScalar']>;
  continent?: InputMaybe<Scalars['StringScalar']>;
  companyType?: InputMaybe<Scalars['StringScalar']>;
  companyName?: InputMaybe<Scalars['StringScalar']>;
  companyDomainNames?: InputMaybe<Scalars['StringScalar']>;
  companyDesc?: InputMaybe<Scalars['StringScalar']>;
  isPublic?: InputMaybe<Scalars['StringScalar']>;
  location?: InputMaybe<Scalars['StringScalar']>;
  zipCode?: InputMaybe<Scalars['StringScalar']>;
  radiusMiles?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTag?: InputMaybe<Scalars['StringScalar']>;
  industryKeywordsMulti?: InputMaybe<Scalars['StringScalar']>;
  primaryIndustriesOnly?: InputMaybe<Scalars['StringScalar']>;
  industryClassification?: InputMaybe<Scalars['StringScalar']>;
  industryKeywords?: InputMaybe<Scalars['StringScalar']>;
  industryCodeList?: InputMaybe<Scalars['StringScalar']>;
  industryCode?: InputMaybe<Scalars['StringScalar']>;
  industryCodeAnd?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  revenueClassification?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassification?: InputMaybe<Scalars['StringScalar']>;
  companyRanking?: InputMaybe<Scalars['StringScalar']>;
  pubPrivateSectors?: InputMaybe<Scalars['StringScalar']>;
  locationSearchType?: InputMaybe<Scalars['StringScalar']>;
  fundingMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  fundingMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAnd?: InputMaybe<Scalars['StringScalar']>;
  allInvestors?: InputMaybe<Scalars['StringScalar']>;
  recentInvestors?: InputMaybe<Scalars['StringScalar']>;
  allFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  recentFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  certificationStartDate?: InputMaybe<Scalars['StringScalar']>;
  certificationEndDate?: InputMaybe<Scalars['StringScalar']>;
  streetLineTwo?: InputMaybe<Scalars['StringScalar']>;
  hashtagField?: InputMaybe<Scalars['StringScalar']>;
  fullName?: InputMaybe<Scalars['StringScalar']>;
  gender?: InputMaybe<Scalars['StringScalar']>;
  personIds?: InputMaybe<Scalars['StringScalar']>;
  personID?: InputMaybe<Scalars['StringScalar']>;
  personId?: InputMaybe<Scalars['StringScalar']>;
  hasCanadianEmail?: InputMaybe<Scalars['StringScalar']>;
  companyLocationIds?: InputMaybe<Scalars['StringScalar']>;
  emailAddress?: InputMaybe<Scalars['StringScalar']>;
  firstName?: InputMaybe<Scalars['StringScalar']>;
  lastName?: InputMaybe<Scalars['StringScalar']>;
  middleInitial?: InputMaybe<Scalars['StringScalar']>;
  excludedPersonTitle?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  titleCertification?: InputMaybe<Scalars['StringScalar']>;
  personTitle?: InputMaybe<Scalars['StringScalar']>;
  titleSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleSeniority?: InputMaybe<Scalars['StringScalar']>;
  degree?: InputMaybe<Scalars['StringScalar']>;
  school?: InputMaybe<Scalars['StringScalar']>;
  companyDomainName?: InputMaybe<Scalars['StringScalar']>;
  validDateMonthDist?: InputMaybe<Scalars['StringScalar']>;
  zoomJoinsAccount?: InputMaybe<ZoomJoinsAccount>;
  orgJoinsAccount?: InputMaybe<OrgJoinsAccount>;
  titleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeOrgExportedCompanies?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgExportedContacts?: InputMaybe<Scalars['StringScalar']>;
  excludeCompanyTags?: InputMaybe<Scalars['StringScalar']>;
  personWebReferences?: InputMaybe<Scalars['StringScalar']>;
  personWebReferencesURL?: InputMaybe<Scalars['StringScalar']>;
  departments?: InputMaybe<Scalars['StringScalar']>;
  jobFunctions?: InputMaybe<Scalars['StringScalar']>;
  isEU?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMin?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMax?: InputMaybe<Scalars['StringScalar']>;
  hasLocationId?: InputMaybe<Scalars['StringScalar']>;
  hasPersonalEmail?: InputMaybe<Scalars['StringScalar']>;
  hasMobilePhone?: InputMaybe<Scalars['StringScalar']>;
  hasEmail?: InputMaybe<Scalars['StringScalar']>;
  hasPhone?: InputMaybe<Scalars['StringScalar']>;
  hasDirectPhone?: InputMaybe<Scalars['StringScalar']>;
  hasCompanyPhone?: InputMaybe<Scalars['StringScalar']>;
  hasTitle?: InputMaybe<Scalars['StringScalar']>;
  hasBeenNotified?: InputMaybe<Scalars['StringScalar']>;
  hasDepartment?: InputMaybe<Scalars['StringScalar']>;
  hasJobFunction?: InputMaybe<Scalars['StringScalar']>;
  hasSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgChartTier?: InputMaybe<Scalars['StringScalar']>;
  orgChartTier?: InputMaybe<Scalars['StringScalar']>;
  personCreationStartDate?: InputMaybe<Scalars['StringScalar']>;
  positionStartDate?: InputMaybe<Scalars['StringScalar']>;
  personCreationEndDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedStartDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedEndDate?: InputMaybe<Scalars['StringScalar']>;
  executivesOnly?: InputMaybe<Scalars['StringScalar']>;
  returnOnlyBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  excludeBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  page?: InputMaybe<Scalars['Float']>;
  rpp?: InputMaybe<Scalars['StringScalar']>;
  facetOptions?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  techAttributeTagNotUsedAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  findRecommendedContacts?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompanies?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesPage?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesRpp?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesSortBy?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesContacts?: InputMaybe<Scalars['StringScalar']>;
  solrPseudoOutputFields?: InputMaybe<Scalars['StringScalar']>;
  scoopEndDate?: InputMaybe<Scalars['StringScalar']>;
  scoopStartDate?: InputMaybe<Scalars['StringScalar']>;
  updatedSinceCreation?: InputMaybe<Scalars['StringScalar']>;
  scoopTypes?: InputMaybe<Scalars['StringScalar']>;
  scoopTopics?: InputMaybe<Scalars['StringScalar']>;
  scoopDepartments?: InputMaybe<Scalars['StringScalar']>;
  scoopDesc?: InputMaybe<Scalars['StringScalar']>;
  scoopIds?: InputMaybe<Scalars['StringScalar']>;
  scoringOptions?: InputMaybe<Scalars['StringScalar']>;
  masked?: InputMaybe<Scalars['Boolean']>;
  subscribed?: InputMaybe<Scalars['Boolean']>;
  orgImported?: InputMaybe<Scalars['Boolean']>;
  sessionToken?: InputMaybe<Scalars['StringScalar']>;
  definedUniverse?: InputMaybe<Scalars['StringScalar']>;
  outputFieldOptions?: InputMaybe<Scalars['StringScalar']>;
  ignoreDefaultFields?: InputMaybe<Scalars['StringScalar']>;
  includeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPersonOnlyMe?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedContacts?: InputMaybe<Scalars['Boolean']>;
  pTag?: InputMaybe<Scalars['StringScalar']>;
  cTag?: InputMaybe<Scalars['StringScalar']>;
  excludePeopleTags?: InputMaybe<Scalars['StringScalar']>;
  includeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAssociatedDeals?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeAllOrgImportLeads?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOptout?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  excludeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  orgImportOpportunities?: InputMaybe<Array<OrgImportOpportunities>>;
  includeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  parsingOptions?: InputMaybe<ParsingOptions>;
  source?: InputMaybe<Scalars['String']>;
  addressVerificationStatusList?: InputMaybe<Scalars['String']>;
  parentId?: InputMaybe<Scalars['String']>;
  ultimateParentId?: InputMaybe<Scalars['String']>;
  subUnitType?: InputMaybe<Scalars['String']>;
  isLocationHierarchy?: InputMaybe<Scalars['Boolean']>;
};

export type TechAttributesAddedDropped = {
  techAttributesAddedDropped?: InputMaybe<TechAttributeAddDropGroup>;
};

export type TechAttributeAddDropGroup = {
  techAttributeAddDrop?: InputMaybe<Array<TechAttributeAddDrop>>;
};

export type TechAttributeAddDrop = {
  startDate?: InputMaybe<Scalars['String']>;
  endDate?: InputMaybe<Scalars['String']>;
  techAttributes?: InputMaybe<Scalars['String']>;
  addDropFlag?: InputMaybe<Scalars['String']>;
};

export type DepartmentEmployeeCounts = {
  departmentEmployeeCount?: InputMaybe<Array<DepartmentEmployeeCount>>;
};

export type DepartmentEmployeeCount = {
  departmentName?: InputMaybe<Scalars['StringScalar']>;
  departmentCountMin?: InputMaybe<Scalars['StringScalar']>;
  departmentCountMax?: InputMaybe<Scalars['StringScalar']>;
};

export type DepartmentBudgets = {
  departmentBudget?: InputMaybe<Array<DepartmentBudgetsFilter>>;
};

export type DepartmentBudgetsFilter = {
  departmentName?: InputMaybe<Scalars['StringScalar']>;
  departmentBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  departmentBudgetMax?: InputMaybe<Scalars['StringScalar']>;
};

export type ZoomJoinsAccount = {
  departmentName?: InputMaybe<Scalars['String']>;
  departmentCountMin?: InputMaybe<Scalars['String']>;
  departmentCountMax?: InputMaybe<Scalars['String']>;
};

export type OrgJoinsAccount = {
  action?: InputMaybe<Scalars['String']>;
  origination?: InputMaybe<Scalars['String']>;
  negation?: InputMaybe<Scalars['Boolean']>;
  reload?: InputMaybe<Scalars['String']>;
  applyCriteria?: InputMaybe<Scalars['Boolean']>;
  owners?: InputMaybe<Array<Scalars['String']>>;
  universalTag?: InputMaybe<Scalars['String']>;
  rxPeriod?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<Array<Scalars['String']>>;
  leadStatus?: InputMaybe<Array<Scalars['String']>>;
};

export type AdvanceOrgImportFilters = {
  salesforce?: InputMaybe<Array<Scalars['StringScalar']>>;
  hubspot?: InputMaybe<Array<Scalars['StringScalar']>>;
  marketo?: InputMaybe<Array<Scalars['StringScalar']>>;
};

export type AdvanceAllOrgImportsFilters = {
  salesforce?: InputMaybe<Scalars['Boolean']>;
  hubspot?: InputMaybe<Scalars['Boolean']>;
  marketo?: InputMaybe<Scalars['Boolean']>;
};

export type OrgImportOpportunities = {
  createDateStart?: InputMaybe<Scalars['StringScalar']>;
  createDateEnd?: InputMaybe<Scalars['StringScalar']>;
  closeDateEnd?: InputMaybe<Scalars['StringScalar']>;
  closeDateStart?: InputMaybe<Scalars['StringScalar']>;
  platform?: InputMaybe<Scalars['StringScalar']>;
  includeAllOrgImportOpportunitiesOwners?: InputMaybe<ImportsPlatformModel>;
};

export type ImportsPlatformModel = {
  platform?: InputMaybe<Scalars['StringScalar']>;
};

export type ParsingOptions = {
  industry?: InputMaybe<Scalars['String']>;
};

export type CompanySearchModel = {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  tagged?: Maybe<Scalars['Boolean']>;
  masked?: Maybe<Scalars['Boolean']>;
  subscribed?: Maybe<Scalars['Boolean']>;
  exported?: Maybe<Scalars['Boolean']>;
  domain?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['String']>;
  fax?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  ticker?: Maybe<Scalars['String']>;
  crmEntityId?: Maybe<Scalars['String']>;
  revenue?: Maybe<Scalars['String']>;
  allIndustries?: Maybe<Array<Scalars['String']>>;
  isDefunct?: Maybe<Scalars['Boolean']>;
  uniqueCompanyNumContacts?: Maybe<Scalars['Float']>;
  companyHref?: Maybe<Scalars['String']>;
  isInPreview?: Maybe<Scalars['Boolean']>;
  funding?: Maybe<Array<FundingModel>>;
  certified?: Maybe<Scalars['Boolean']>;
  certificationDate?: Maybe<Scalars['String']>;
  icpScore?: Maybe<Scalars['String']>;
  locationsCount?: Maybe<Scalars['String']>;
  orgImport?: Maybe<Scalars['String']>;
  address?: Maybe<LocationModel>;
  displayAddress?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  employeeCount?: Maybe<Scalars['Float']>;
  employeeCountRange?: Maybe<Scalars['String']>;
  revenueRange?: Maybe<Scalars['String']>;
  doziIndustry?: Maybe<Array<DoziIndustryModel>>;
  topLevelIndustry?: Maybe<Array<Scalars['String']>>;
  doziIndustryString?: Maybe<Scalars['String']>;
  industry?: Maybe<Array<Scalars['String']>>;
  basicIndustries?: Maybe<Array<Scalars['String']>>;
  industryV2?: Maybe<Array<Scalars['String']>>;
  industries?: Maybe<Array<AttributeChipModel>>;
  industriesAsAttributes?: Maybe<Array<AttributeChipModel>>;
  ultimateParent?: Maybe<UltimateParentModel>;
  departmentBudgets?: Maybe<Array<DepartmentBudgetsModel>>;
  type?: Maybe<Scalars['String']>;
  companyRevenueIn000s?: Maybe<Scalars['Float']>;
  employeesRange?: Maybe<Scalars['String']>;
  locationType?: Maybe<Scalars['String']>;
  orgUniversalTagged?: Maybe<Array<OrgUniversalTagsModel>>;
  universalTagged?: Maybe<Array<Scalars['String']>>;
};

export type CompanySearchResultModel = {
  data?: Maybe<Array<CompanySearchModel>>;
  facetData?: Maybe<AdvanceFacetDataModel>;
  maxResults?: Maybe<Scalars['Float']>;
  totalResults?: Maybe<Scalars['Float']>;
};

export type PersonSearchFacade = {
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  personId?: Maybe<Scalars['String']>;
};

export type ScoopTopics = {
  scoopTopic?: Maybe<Array<Scalars['String']>>;
};

export type ScoopTypes = {
  scoopType?: Maybe<Array<Scalars['String']>>;
};

export type Scoops = {
  id?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
  company?: Maybe<CompanyDetailsModel>;
  description?: Maybe<Scalars['String']>;
  topics?: Maybe<ScoopTopics>;
  types?: Maybe<ScoopTypes>;
  originalPublishedDate?: Maybe<Scalars['String']>;
  publishedDate?: Maybe<Scalars['String']>;
  updatedText?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  urlText?: Maybe<Scalars['String']>;
  personRecords?: Maybe<Array<PersonSearchFacade>>;
  imageUrl?: Maybe<Scalars['String']>;
  orgImport?: Maybe<Scalars['String']>;
};

export type PredictedPersonDataModel = {
  guessedEmail?: Maybe<Scalars['String']>;
  companyId?: Maybe<Scalars['String']>;
  companyName?: Maybe<Scalars['String']>;
};

export type PersonSearchModel = {
  totalResults?: Maybe<Scalars['Float']>;
  maxResults?: Maybe<Scalars['Float']>;
  companiesCount?: Maybe<Scalars['Float']>;
  numUniqueCompanies?: Maybe<Scalars['Float']>;
  predictedData?: Maybe<PredictedPersonDataModel>;
  data?: Maybe<Array<PplAtOrgItemModel>>;
};


export type PersonSearchModelpredictedDataArgs = {
  personID?: InputMaybe<Scalars['StringScalar']>;
  jobTitle?: InputMaybe<Scalars['String']>;
  packageName?: InputMaybe<Scalars['String']>;
  isTopExecutives?: InputMaybe<Scalars['Boolean']>;
  companyID?: InputMaybe<Scalars['String']>;
  fetchTechAddDropOptions?: InputMaybe<Scalars['Boolean']>;
  showUnmaskedContacts?: InputMaybe<Scalars['Boolean']>;
  defaultSearchParams?: InputMaybe<DefaultSearchParams>;
  buyingCommittee?: InputMaybe<Scalars['String']>;
  companyPastOrPresent?: InputMaybe<Scalars['StringScalar']>;
  contactRequirements?: InputMaybe<Scalars['StringScalar']>;
  doziIndustry?: InputMaybe<Scalars['StringScalar']>;
  excludeDefunctCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeNoCompany?: InputMaybe<Scalars['StringScalar']>;
  isCertified?: InputMaybe<Scalars['StringScalar']>;
  sortBy?: InputMaybe<Scalars['StringScalar']>;
  sortOrder?: InputMaybe<Scalars['StringScalar']>;
  nnNegation?: InputMaybe<Scalars['StringScalar']>;
  nnQueryId?: InputMaybe<Scalars['StringScalar']>;
  nnStartDate?: InputMaybe<Scalars['StringScalar']>;
  nnEndDate?: InputMaybe<Scalars['StringScalar']>;
  companyId?: InputMaybe<Scalars['StringScalar']>;
  companyIds?: InputMaybe<Scalars['StringScalar']>;
  revenueMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  revenueMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMax?: InputMaybe<Scalars['StringScalar']>;
  techAttributesAddedDropped?: InputMaybe<TechAttributesAddedDropped>;
  techAttributeNotUsedAnd?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMin?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMax?: InputMaybe<Scalars['StringScalar']>;
  locationCountMin?: InputMaybe<Scalars['StringScalar']>;
  locationCountMax?: InputMaybe<Scalars['StringScalar']>;
  metroAreas?: InputMaybe<Scalars['StringScalar']>;
  doziPrimaryIndustry?: InputMaybe<Scalars['StringScalar']>;
  hqLocationAreaCodes?: InputMaybe<Scalars['StringScalar']>;
  departmentEmployeeCounts?: InputMaybe<DepartmentEmployeeCounts>;
  departmentBudgets?: InputMaybe<DepartmentBudgets>;
  street?: InputMaybe<Scalars['StringScalar']>;
  locationType?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  negateScope?: InputMaybe<Scalars['Boolean']>;
  itBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  itBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  anyFundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  anyFundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  fundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  anyFundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  allInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  recentInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  state?: InputMaybe<Scalars['StringScalar']>;
  metroRegion?: InputMaybe<Scalars['StringScalar']>;
  country?: InputMaybe<Scalars['StringScalar']>;
  continent?: InputMaybe<Scalars['StringScalar']>;
  companyType?: InputMaybe<Scalars['StringScalar']>;
  companyName?: InputMaybe<Scalars['StringScalar']>;
  companyDomainNames?: InputMaybe<Scalars['StringScalar']>;
  companyDesc?: InputMaybe<Scalars['StringScalar']>;
  isPublic?: InputMaybe<Scalars['StringScalar']>;
  location?: InputMaybe<Scalars['StringScalar']>;
  zipCode?: InputMaybe<Scalars['StringScalar']>;
  radiusMiles?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTag?: InputMaybe<Scalars['StringScalar']>;
  industryKeywordsMulti?: InputMaybe<Scalars['StringScalar']>;
  primaryIndustriesOnly?: InputMaybe<Scalars['StringScalar']>;
  industryClassification?: InputMaybe<Scalars['StringScalar']>;
  industryKeywords?: InputMaybe<Scalars['StringScalar']>;
  industryCodeList?: InputMaybe<Scalars['StringScalar']>;
  industryCode?: InputMaybe<Scalars['StringScalar']>;
  industryCodeAnd?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  revenueClassification?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassification?: InputMaybe<Scalars['StringScalar']>;
  companyRanking?: InputMaybe<Scalars['StringScalar']>;
  pubPrivateSectors?: InputMaybe<Scalars['StringScalar']>;
  locationSearchType?: InputMaybe<Scalars['StringScalar']>;
  fundingMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  fundingMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAnd?: InputMaybe<Scalars['StringScalar']>;
  allInvestors?: InputMaybe<Scalars['StringScalar']>;
  recentInvestors?: InputMaybe<Scalars['StringScalar']>;
  allFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  recentFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  certificationStartDate?: InputMaybe<Scalars['StringScalar']>;
  certificationEndDate?: InputMaybe<Scalars['StringScalar']>;
  streetLineTwo?: InputMaybe<Scalars['StringScalar']>;
  hashtagField?: InputMaybe<Scalars['StringScalar']>;
  fullName?: InputMaybe<Scalars['StringScalar']>;
  gender?: InputMaybe<Scalars['StringScalar']>;
  personIds?: InputMaybe<Scalars['StringScalar']>;
  personId?: InputMaybe<Scalars['StringScalar']>;
  hasCanadianEmail?: InputMaybe<Scalars['StringScalar']>;
  companyLocationIds?: InputMaybe<Scalars['StringScalar']>;
  emailAddress?: InputMaybe<Scalars['StringScalar']>;
  firstName?: InputMaybe<Scalars['StringScalar']>;
  lastName?: InputMaybe<Scalars['StringScalar']>;
  middleInitial?: InputMaybe<Scalars['StringScalar']>;
  excludedPersonTitle?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  titleCertification?: InputMaybe<Scalars['StringScalar']>;
  personTitle?: InputMaybe<Scalars['StringScalar']>;
  titleSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleSeniority?: InputMaybe<Scalars['StringScalar']>;
  degree?: InputMaybe<Scalars['StringScalar']>;
  school?: InputMaybe<Scalars['StringScalar']>;
  companyDomainName?: InputMaybe<Scalars['StringScalar']>;
  validDateMonthDist?: InputMaybe<Scalars['StringScalar']>;
  zoomJoinsAccount?: InputMaybe<ZoomJoinsAccount>;
  orgJoinsAccount?: InputMaybe<OrgJoinsAccount>;
  titleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeOrgExportedCompanies?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgExportedContacts?: InputMaybe<Scalars['StringScalar']>;
  excludeCompanyTags?: InputMaybe<Scalars['StringScalar']>;
  personWebReferences?: InputMaybe<Scalars['StringScalar']>;
  personWebReferencesURL?: InputMaybe<Scalars['StringScalar']>;
  departments?: InputMaybe<Scalars['StringScalar']>;
  jobFunctions?: InputMaybe<Scalars['StringScalar']>;
  isEU?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMin?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMax?: InputMaybe<Scalars['StringScalar']>;
  hasLocationId?: InputMaybe<Scalars['StringScalar']>;
  hasPersonalEmail?: InputMaybe<Scalars['StringScalar']>;
  hasMobilePhone?: InputMaybe<Scalars['StringScalar']>;
  hasEmail?: InputMaybe<Scalars['StringScalar']>;
  hasPhone?: InputMaybe<Scalars['StringScalar']>;
  hasDirectPhone?: InputMaybe<Scalars['StringScalar']>;
  hasCompanyPhone?: InputMaybe<Scalars['StringScalar']>;
  hasTitle?: InputMaybe<Scalars['StringScalar']>;
  hasBeenNotified?: InputMaybe<Scalars['StringScalar']>;
  hasDepartment?: InputMaybe<Scalars['StringScalar']>;
  hasJobFunction?: InputMaybe<Scalars['StringScalar']>;
  hasSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgChartTier?: InputMaybe<Scalars['StringScalar']>;
  orgChartTier?: InputMaybe<Scalars['StringScalar']>;
  personCreationStartDate?: InputMaybe<Scalars['StringScalar']>;
  positionStartDate?: InputMaybe<Scalars['StringScalar']>;
  personCreationEndDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedStartDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedEndDate?: InputMaybe<Scalars['StringScalar']>;
  executivesOnly?: InputMaybe<Scalars['StringScalar']>;
  returnOnlyBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  excludeBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  page?: InputMaybe<Scalars['Float']>;
  rpp?: InputMaybe<Scalars['StringScalar']>;
  facetOptions?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  techAttributeTagNotUsedAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  findRecommendedContacts?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompanies?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesPage?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesRpp?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesSortBy?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesContacts?: InputMaybe<Scalars['StringScalar']>;
  solrPseudoOutputFields?: InputMaybe<Scalars['StringScalar']>;
  scoopEndDate?: InputMaybe<Scalars['StringScalar']>;
  scoopStartDate?: InputMaybe<Scalars['StringScalar']>;
  updatedSinceCreation?: InputMaybe<Scalars['StringScalar']>;
  scoopTypes?: InputMaybe<Scalars['StringScalar']>;
  scoopTopics?: InputMaybe<Scalars['StringScalar']>;
  scoopDepartments?: InputMaybe<Scalars['StringScalar']>;
  scoopDesc?: InputMaybe<Scalars['StringScalar']>;
  scoopIds?: InputMaybe<Scalars['StringScalar']>;
  scoringOptions?: InputMaybe<Scalars['StringScalar']>;
  masked?: InputMaybe<Scalars['Boolean']>;
  subscribed?: InputMaybe<Scalars['Boolean']>;
  orgImported?: InputMaybe<Scalars['Boolean']>;
  sessionToken?: InputMaybe<Scalars['StringScalar']>;
  definedUniverse?: InputMaybe<Scalars['StringScalar']>;
  outputFieldOptions?: InputMaybe<Scalars['StringScalar']>;
  ignoreDefaultFields?: InputMaybe<Scalars['StringScalar']>;
  includeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPersonOnlyMe?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedContacts?: InputMaybe<Scalars['Boolean']>;
  pTag?: InputMaybe<Scalars['StringScalar']>;
  cTag?: InputMaybe<Scalars['StringScalar']>;
  excludePeopleTags?: InputMaybe<Scalars['StringScalar']>;
  includeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAssociatedDeals?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeAllOrgImportLeads?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOptout?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  excludeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  orgImportOpportunities?: InputMaybe<Array<OrgImportOpportunities>>;
  includeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  searchFacadeParams?: InputMaybe<PersonArgs>;
};

export type PersonArgs = {
  nnNegation?: InputMaybe<Scalars['StringScalar']>;
  nnQueryId?: InputMaybe<Scalars['StringScalar']>;
  nnStartDate?: InputMaybe<Scalars['StringScalar']>;
  nnEndDate?: InputMaybe<Scalars['StringScalar']>;
  companyId?: InputMaybe<Scalars['StringScalar']>;
  companyIds?: InputMaybe<Scalars['StringScalar']>;
  revenueMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  revenueMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMax?: InputMaybe<Scalars['StringScalar']>;
  techAttributesAddedDropped?: InputMaybe<TechAttributesAddedDropped>;
  techAttributeNotUsedAnd?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMin?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMax?: InputMaybe<Scalars['StringScalar']>;
  locationCountMin?: InputMaybe<Scalars['StringScalar']>;
  locationCountMax?: InputMaybe<Scalars['StringScalar']>;
  metroAreas?: InputMaybe<Scalars['StringScalar']>;
  doziPrimaryIndustry?: InputMaybe<Scalars['StringScalar']>;
  hqLocationAreaCodes?: InputMaybe<Scalars['StringScalar']>;
  departmentEmployeeCounts?: InputMaybe<DepartmentEmployeeCounts>;
  departmentBudgets?: InputMaybe<DepartmentBudgets>;
  street?: InputMaybe<Scalars['StringScalar']>;
  locationType?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  negateScope?: InputMaybe<Scalars['Boolean']>;
  itBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  itBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  anyFundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  anyFundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  fundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  anyFundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  allInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  recentInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  state?: InputMaybe<Scalars['StringScalar']>;
  metroRegion?: InputMaybe<Scalars['StringScalar']>;
  country?: InputMaybe<Scalars['StringScalar']>;
  continent?: InputMaybe<Scalars['StringScalar']>;
  companyType?: InputMaybe<Scalars['StringScalar']>;
  companyName?: InputMaybe<Scalars['StringScalar']>;
  companyDomainNames?: InputMaybe<Scalars['StringScalar']>;
  companyDesc?: InputMaybe<Scalars['StringScalar']>;
  isPublic?: InputMaybe<Scalars['StringScalar']>;
  location?: InputMaybe<Scalars['StringScalar']>;
  zipCode?: InputMaybe<Scalars['StringScalar']>;
  radiusMiles?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTag?: InputMaybe<Scalars['StringScalar']>;
  industryKeywordsMulti?: InputMaybe<Scalars['StringScalar']>;
  primaryIndustriesOnly?: InputMaybe<Scalars['StringScalar']>;
  industryClassification?: InputMaybe<Scalars['StringScalar']>;
  industryKeywords?: InputMaybe<Scalars['StringScalar']>;
  industryCodeList?: InputMaybe<Scalars['StringScalar']>;
  industryCode?: InputMaybe<Scalars['StringScalar']>;
  industryCodeAnd?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  revenueClassification?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassification?: InputMaybe<Scalars['StringScalar']>;
  companyRanking?: InputMaybe<Scalars['StringScalar']>;
  pubPrivateSectors?: InputMaybe<Scalars['StringScalar']>;
  locationSearchType?: InputMaybe<Scalars['StringScalar']>;
  fundingMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  fundingMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAnd?: InputMaybe<Scalars['StringScalar']>;
  allInvestors?: InputMaybe<Scalars['StringScalar']>;
  recentInvestors?: InputMaybe<Scalars['StringScalar']>;
  allFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  recentFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  isCertified?: InputMaybe<Scalars['String']>;
  certificationStartDate?: InputMaybe<Scalars['StringScalar']>;
  certificationEndDate?: InputMaybe<Scalars['StringScalar']>;
  streetLineTwo?: InputMaybe<Scalars['StringScalar']>;
  hashtagField?: InputMaybe<Scalars['StringScalar']>;
  fullName?: InputMaybe<Scalars['StringScalar']>;
  gender?: InputMaybe<Scalars['StringScalar']>;
  personIds?: InputMaybe<Scalars['StringScalar']>;
  personID?: InputMaybe<Scalars['String']>;
  personId?: InputMaybe<Scalars['StringScalar']>;
  hasCanadianEmail?: InputMaybe<Scalars['StringScalar']>;
  companyLocationIds?: InputMaybe<Scalars['StringScalar']>;
  emailAddress?: InputMaybe<Scalars['StringScalar']>;
  firstName?: InputMaybe<Scalars['StringScalar']>;
  lastName?: InputMaybe<Scalars['StringScalar']>;
  middleInitial?: InputMaybe<Scalars['StringScalar']>;
  excludedPersonTitle?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  titleCertification?: InputMaybe<Scalars['StringScalar']>;
  personTitle?: InputMaybe<Scalars['StringScalar']>;
  titleSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleSeniority?: InputMaybe<Scalars['StringScalar']>;
  degree?: InputMaybe<Scalars['StringScalar']>;
  school?: InputMaybe<Scalars['StringScalar']>;
  companyDomainName?: InputMaybe<Scalars['StringScalar']>;
  companyPastOrPresent?: InputMaybe<Scalars['String']>;
  validDateMonthDist?: InputMaybe<Scalars['StringScalar']>;
  contactRequirements?: InputMaybe<Scalars['String']>;
  zoomJoinsAccount?: InputMaybe<ZoomJoinsAccount>;
  orgJoinsAccount?: InputMaybe<OrgJoinsAccount>;
  titleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeNoCompany?: InputMaybe<Scalars['String']>;
  excludeExportedCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeOrgExportedCompanies?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgExportedContacts?: InputMaybe<Scalars['StringScalar']>;
  excludeCompanyTags?: InputMaybe<Scalars['StringScalar']>;
  personWebReferences?: InputMaybe<Scalars['StringScalar']>;
  personWebReferencesURL?: InputMaybe<Scalars['StringScalar']>;
  departments?: InputMaybe<Scalars['StringScalar']>;
  jobFunctions?: InputMaybe<Scalars['StringScalar']>;
  isEU?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMin?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMax?: InputMaybe<Scalars['StringScalar']>;
  hasLocationId?: InputMaybe<Scalars['StringScalar']>;
  hasPersonalEmail?: InputMaybe<Scalars['StringScalar']>;
  hasMobilePhone?: InputMaybe<Scalars['StringScalar']>;
  hasEmail?: InputMaybe<Scalars['StringScalar']>;
  hasPhone?: InputMaybe<Scalars['StringScalar']>;
  hasDirectPhone?: InputMaybe<Scalars['StringScalar']>;
  hasCompanyPhone?: InputMaybe<Scalars['StringScalar']>;
  hasTitle?: InputMaybe<Scalars['StringScalar']>;
  hasBeenNotified?: InputMaybe<Scalars['StringScalar']>;
  hasDepartment?: InputMaybe<Scalars['StringScalar']>;
  hasJobFunction?: InputMaybe<Scalars['StringScalar']>;
  hasSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgChartTier?: InputMaybe<Scalars['StringScalar']>;
  orgChartTier?: InputMaybe<Scalars['StringScalar']>;
  personCreationStartDate?: InputMaybe<Scalars['StringScalar']>;
  positionStartDate?: InputMaybe<Scalars['StringScalar']>;
  personCreationEndDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedStartDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedEndDate?: InputMaybe<Scalars['StringScalar']>;
  executivesOnly?: InputMaybe<Scalars['StringScalar']>;
  returnOnlyBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  excludeBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  page?: InputMaybe<Scalars['Float']>;
  rpp?: InputMaybe<Scalars['StringScalar']>;
  facetOptions?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  techAttributeTagNotUsedAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  findRecommendedContacts?: InputMaybe<Scalars['StringScalar']>;
  sortBy?: InputMaybe<Scalars['String']>;
  sortOrder?: InputMaybe<Scalars['String']>;
  uniqueCompanies?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesPage?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesRpp?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesSortBy?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesContacts?: InputMaybe<Scalars['StringScalar']>;
  solrPseudoOutputFields?: InputMaybe<Scalars['StringScalar']>;
  scoopEndDate?: InputMaybe<Scalars['StringScalar']>;
  scoopStartDate?: InputMaybe<Scalars['StringScalar']>;
  updatedSinceCreation?: InputMaybe<Scalars['StringScalar']>;
  scoopTypes?: InputMaybe<Scalars['StringScalar']>;
  scoopTopics?: InputMaybe<Scalars['StringScalar']>;
  scoopDepartments?: InputMaybe<Scalars['StringScalar']>;
  scoopDesc?: InputMaybe<Scalars['StringScalar']>;
  scoopIds?: InputMaybe<Scalars['StringScalar']>;
  doziIndustry?: InputMaybe<Scalars['String']>;
  scoringOptions?: InputMaybe<Scalars['StringScalar']>;
  masked?: InputMaybe<Scalars['Boolean']>;
  subscribed?: InputMaybe<Scalars['Boolean']>;
  orgImported?: InputMaybe<Scalars['Boolean']>;
  sessionToken?: InputMaybe<Scalars['StringScalar']>;
  definedUniverse?: InputMaybe<Scalars['StringScalar']>;
  outputFieldOptions?: InputMaybe<Scalars['StringScalar']>;
  ignoreDefaultFields?: InputMaybe<Scalars['StringScalar']>;
  includeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPersonOnlyMe?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedContacts?: InputMaybe<Scalars['Boolean']>;
  excludeDefunctCompanies?: InputMaybe<Scalars['Boolean']>;
  pTag?: InputMaybe<Scalars['StringScalar']>;
  cTag?: InputMaybe<Scalars['StringScalar']>;
  excludePeopleTags?: InputMaybe<Scalars['StringScalar']>;
  includeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAssociatedDeals?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeAllOrgImportLeads?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOptout?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  excludeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  orgImportOpportunities?: InputMaybe<Array<OrgImportOpportunities>>;
  includeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  companyID?: InputMaybe<Scalars['String']>;
  fetchTechAddDropOptions?: InputMaybe<Scalars['Boolean']>;
  showUnmaskedContacts?: InputMaybe<Scalars['Boolean']>;
  defaultSearchParams?: InputMaybe<DefaultSearchParams>;
  packageName?: InputMaybe<Scalars['String']>;
  buyingCommittee?: InputMaybe<Scalars['String']>;
  jobTitle?: InputMaybe<Scalars['String']>;
  isTopExecutives?: InputMaybe<Scalars['Boolean']>;
};

export type BoardMemberModel = {
  company?: Maybe<CompanyDetailsModel>;
  from?: Maybe<Scalars['String']>;
  to?: Maybe<Scalars['String']>;
  jobFunction?: Maybe<Array<Scalars['String']>>;
  title?: Maybe<Scalars['String']>;
  level?: Maybe<Scalars['String']>;
};

export type DegreeModel = {
  areaOfStudy?: Maybe<Scalars['String']>;
  degree?: Maybe<Scalars['String']>;
};

export type EducationModel = {
  school?: Maybe<Scalars['String']>;
  degree?: Maybe<DegreeModel>;
};

export type EmploymentHistoryModel = {
  companyName?: Maybe<Scalars['String']>;
  from?: Maybe<Scalars['String']>;
  to?: Maybe<Scalars['String']>;
  jobFunction?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  level?: Maybe<Scalars['String']>;
  companyID?: Maybe<Scalars['Float']>;
  companyWebsite?: Maybe<Scalars['String']>;
};

export type WebReferencesModel = {
  description?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
};

export type OrgChartJobFunction = {
  department?: Maybe<Scalars['String']>;
  departmentId?: Maybe<Scalars['String']>;
  jobFunction?: Maybe<Scalars['String']>;
  jobFunctionId?: Maybe<Scalars['String']>;
};

export type PersonDetailsModel = {
  entityId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  industry?: Maybe<Array<Scalars['String']>>;
  newJobFunction?: Maybe<Array<Scalars['String']>>;
  orgChartTier?: Maybe<Scalars['Float']>;
  topLevelIndustry?: Maybe<Array<Scalars['String']>>;
  title?: Maybe<Scalars['String']>;
  jobFunction?: Maybe<Array<Scalars['String']>>;
  employmentHistory?: Maybe<Array<EmploymentHistoryModel>>;
  education?: Maybe<Array<EducationModel>>;
  orgChartJobFunction?: Maybe<Array<OrgChartJobFunction>>;
  jobFunctions?: Maybe<Array<OrgChartJobFunction>>;
  webReference?: Maybe<Array<WebReferencesModel>>;
  boardMember?: Maybe<Array<BoardMemberModel>>;
  personBiography?: Maybe<Scalars['String']>;
  socialUrls?: Maybe<SocialMediaUrlModel>;
  socialUrlsParsed?: Maybe<SocialMediaParsed>;
  followerCountParsed?: Maybe<SocialMediaParsed>;
  foundedYear?: Maybe<Scalars['Float']>;
  alexaRank?: Maybe<Scalars['Float']>;
  directPhoneIsDoNotCall?: Maybe<Scalars['Boolean']>;
  mobilePhoneIsDoNotCall?: Maybe<Scalars['Boolean']>;
  directPhoneBlocked?: Maybe<Scalars['Boolean']>;
  mobilePhoneBlocked?: Maybe<Scalars['Boolean']>;
  emailBlocked?: Maybe<Scalars['Boolean']>;
  personalEmailBlocked?: Maybe<Scalars['Boolean']>;
  company?: Maybe<CompanyDetailsModel>;
  importedData?: Maybe<ImportedDataModel>;
};

export type SocialNetworkModel = {
  socialNetworkType?: Maybe<Scalars['String']>;
  socialNetworkUrl?: Maybe<Scalars['String']>;
};

export type SocialOrgChartMediaUrlModel = {
  socialMedia?: Maybe<Array<SocialNetworkModel>>;
};

export type JobFunctions = {
  department?: Maybe<Scalars['String']>;
  departmentId?: Maybe<Scalars['Float']>;
  departmentPriority?: Maybe<Scalars['Float']>;
  jobFunctionId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  orgChartSwimLane?: Maybe<Scalars['String']>;
  orgChartSwimLanePriority?: Maybe<Scalars['Float']>;
  rank?: Maybe<Scalars['Float']>;
};

export type ListedTypes = {
  listName?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Boolean']>;
};

export type SolarPseudoOtuputFieldsModel = {
  exported?: Maybe<Scalars['Boolean']>;
  imported?: Maybe<Scalars['Boolean']>;
  listed?: Maybe<Array<ListedTypes>>;
  orgImported?: Maybe<Scalars['Boolean']>;
  orgOriginSF?: Maybe<Scalars['Boolean']>;
  owned?: Maybe<Scalars['Boolean']>;
  recentExported?: Maybe<Scalars['Boolean']>;
  tagged?: Maybe<Scalars['Boolean']>;
  viewed?: Maybe<Scalars['Boolean']>;
};

export type OrgChartLevelModel = {
  businessEmailAddress?: Maybe<Scalars['String']>;
  companyHQPhone?: Maybe<Scalars['String']>;
  confidenceScore?: Maybe<Scalars['Float']>;
  directPhone?: Maybe<Scalars['String']>;
  directPhoneIsDoNotCall?: Maybe<Scalars['Boolean']>;
  imageUrl?: Maybe<Scalars['String']>;
  indentationPosition?: Maybe<Scalars['Float']>;
  isMasked?: Maybe<Scalars['Boolean']>;
  isTagged?: Maybe<Scalars['Boolean']>;
  jobFunctions?: Maybe<Array<JobFunctions>>;
  mobilePhone?: Maybe<Scalars['String']>;
  mobilePhoneIsDoNotCall?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  orgChartTier?: Maybe<Scalars['Float']>;
  personId?: Maybe<Scalars['Float']>;
  personalEmailAddress?: Maybe<Scalars['String']>;
  socialUrls?: Maybe<SocialOrgChartMediaUrlModel>;
  solrPseudoOutputFields?: Maybe<SolarPseudoOtuputFieldsModel>;
  subOrgChartTier?: Maybe<Scalars['Float']>;
  socialUrlsParsed?: Maybe<SocialMediaParsed>;
  followerCountParsed?: Maybe<SocialMediaParsed>;
  title?: Maybe<Scalars['String']>;
};

export type OrgChartSwimLanesNameDataModel = {
  data?: Maybe<Array<OrgChartLevelModel>>;
  departments?: Maybe<Scalars['String']>;
  jobFunctionName?: Maybe<Scalars['String']>;
  jobFunctions?: Maybe<Scalars['String']>;
  maxResults?: Maybe<Scalars['Float']>;
  orgChartSwimLane?: Maybe<Scalars['String']>;
  totalResults?: Maybe<Scalars['Float']>;
};

export type OrgChartSwimLanesModel = {
  data?: Maybe<Array<OrgChartSwimLanesNameDataModel>>;
  swimLaneName?: Maybe<Scalars['String']>;
};

export type OrgChart = {
  companyId?: Maybe<Scalars['String']>;
  departments?: Maybe<Scalars['String']>;
  highestTier?: Maybe<Scalars['Float']>;
  orgChartSwimLanes?: Maybe<Array<OrgChartSwimLanesModel>>;
  topLevelContacts?: Maybe<Array<OrgChartLevelModel>>;
};

export type PersonCertificationsModel = {
  certificationName?: Maybe<Scalars['String']>;
  organizationName?: Maybe<Scalars['String']>;
};

export type OrgUniversalTagModel = {
  tagName?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Boolean']>;
};

export type PplAtOrgItemModel = {
  buyingCommittee?: Maybe<Scalars['Boolean']>;
  certifications?: Maybe<Array<PersonCertificationsModel>>;
  orgUniversalTagged?: Maybe<Array<OrgUniversalTagModel>>;
  universalTagged?: Maybe<Array<OrgUniversalTagModel>>;
  certified?: Maybe<Scalars['Boolean']>;
  isEU?: Maybe<Scalars['Boolean']>;
  jobTitle?: Maybe<Scalars['String']>;
  positionStartDate?: Maybe<Scalars['String']>;
  socialUrls?: Maybe<SocialOrgChartMediaUrlModel>;
  website?: Maybe<Scalars['String']>;
  personID: Scalars['String'];
  profileImageURL?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  mobilePhone?: Maybe<Scalars['String']>;
  personalEmail?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  location?: Maybe<LocationModel>;
  topLevelIndustry?: Maybe<Array<Scalars['String']>>;
  industry?: Maybe<Array<Scalars['String']>>;
  lastMentioned?: Maybe<Scalars['String']>;
  lastUpdatedDate?: Maybe<Scalars['String']>;
  confidenceScore?: Maybe<Scalars['Float']>;
  noticeProvidedInfo?: Maybe<NoticeInfoModel>;
  privacyRegulationFlags?: Maybe<PrivacyRegulationsModel>;
  isPast?: Maybe<Scalars['String']>;
  score?: Maybe<Scalars['Float']>;
  name?: Maybe<Scalars['String']>;
  managementLevel?: Maybe<Scalars['String']>;
  jobFunction?: Maybe<Array<Scalars['String']>>;
  title?: Maybe<Scalars['String']>;
  companyID?: Maybe<Scalars['String']>;
  companyLogo?: Maybe<Scalars['String']>;
  companyName?: Maybe<Scalars['String']>;
  companyAddress?: Maybe<LocationModel>;
  companyRevenue?: Maybe<Scalars['String']>;
  companyRevenueRange?: Maybe<Scalars['String']>;
  companyEmployees?: Maybe<Scalars['Float']>;
  companyEmployeeCountRange?: Maybe<Scalars['String']>;
  companyDomain?: Maybe<Scalars['String']>;
  companyPhone?: Maybe<Scalars['String']>;
  companyDescription?: Maybe<Scalars['String']>;
  companyFax?: Maybe<Scalars['String']>;
  creationDate?: Maybe<Scalars['String']>;
  companyType?: Maybe<Scalars['String']>;
  subscribed?: Maybe<Scalars['Boolean']>;
  companyRevenueIn000s?: Maybe<Scalars['Float']>;
  companySIC?: Maybe<Array<Scalars['Float']>>;
  companyNAICS?: Maybe<Array<Scalars['Float']>>;
  companyTicker?: Maybe<Scalars['String']>;
  middleInitial?: Maybe<Scalars['String']>;
  isMasked?: Maybe<Scalars['Boolean']>;
  isTagged?: Maybe<Scalars['Boolean']>;
  directPhoneBlocked?: Maybe<Scalars['Boolean']>;
  mobilePhoneBlocked?: Maybe<Scalars['Boolean']>;
  personalEmailBlocked?: Maybe<Scalars['Boolean']>;
  emailBlocked?: Maybe<Scalars['Boolean']>;
  doziIndustry?: Maybe<Array<DoziIndustryModel>>;
};

export type QuickSearchDataRes = {
  companyId?: Maybe<Scalars['String']>;
  companyName?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  personID?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  isDefunct?: Maybe<Scalars['Boolean']>;
  ultimateParent?: Maybe<UltimateParentModel>;
};

export type QuickSearchRes = {
  companiesCount?: Maybe<Scalars['Float']>;
  data?: Maybe<Array<QuickSearchDataRes>>;
  maxResults?: Maybe<Scalars['Float']>;
  totalResults?: Maybe<Scalars['Float']>;
};

export type OnEnterTops = {
  topCount?: Maybe<Scalars['String']>;
  topName?: Maybe<Scalars['String']>;
  topValue?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type FundingInvestorSuggestionModel = {
  companyName?: Maybe<Scalars['String']>;
  investorDomain?: Maybe<Scalars['String']>;
  investorName?: Maybe<Scalars['String']>;
};

export type FundingSuggestiongModel = {
  amountIn000s?: Maybe<Scalars['Float']>;
  date?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  investors?: Maybe<Array<FundingInvestorSuggestionModel>>;
  round?: Maybe<Scalars['String']>;
};

export type CompanySuggestionDataModel = {
  buyingCommittee?: Maybe<Scalars['Boolean']>;
  certifications?: Maybe<Array<PersonCertificationsModel>>;
  orgUniversalTagged?: Maybe<Array<OrgUniversalTagModel>>;
  universalTagged?: Maybe<Array<OrgUniversalTagModel>>;
  certified?: Maybe<Scalars['Boolean']>;
  isEU?: Maybe<Scalars['Boolean']>;
  jobTitle?: Maybe<Scalars['String']>;
  positionStartDate?: Maybe<Scalars['String']>;
  socialUrls?: Maybe<SocialOrgChartMediaUrlModel>;
  website?: Maybe<Scalars['String']>;
  companyAddress?: Maybe<LocationModel>;
  companyDescription?: Maybe<Scalars['String']>;
  companyDomain?: Maybe<Scalars['String']>;
  companyEmployeeCountRange?: Maybe<Scalars['String']>;
  companyEmployees?: Maybe<Scalars['Float']>;
  companyID?: Maybe<Scalars['String']>;
  companyLogo?: Maybe<Scalars['String']>;
  companyName?: Maybe<Scalars['String']>;
  companyPhone?: Maybe<Scalars['String']>;
  companyType?: Maybe<Scalars['String']>;
  confidenceScore?: Maybe<Scalars['Float']>;
  companyRevenue?: Maybe<Scalars['String']>;
  creationDate?: Maybe<Scalars['String']>;
  middleInitial?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  profileImageURL?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  companyRevenueRange?: Maybe<Scalars['String']>;
  companyTicker?: Maybe<Scalars['String']>;
  companyRevenueIn000s?: Maybe<Scalars['Float']>;
  doziIndustry?: Maybe<Array<DoziIndustryModel>>;
  firstName?: Maybe<Scalars['String']>;
  isMasked?: Maybe<Scalars['Boolean']>;
  isPast?: Maybe<Scalars['String']>;
  isTagged?: Maybe<Scalars['Boolean']>;
  lastMentioned?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  lastUpdatedDate?: Maybe<Scalars['String']>;
  location?: Maybe<LocationModel>;
  mobilePhoneBlocked?: Maybe<Scalars['Boolean']>;
  mobilePhoneIsDoNotCall?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  noticeProvidedInfo?: Maybe<NoticeInfoModel>;
  personID: Scalars['String'];
  score?: Maybe<Scalars['Float']>;
  subscribed?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  topLevelIndustry?: Maybe<Array<Scalars['String']>>;
  certificationDate?: Maybe<Scalars['String']>;
  companyIds?: Maybe<Array<Scalars['Float']>>;
  logo?: Maybe<Scalars['String']>;
  socialNetworkUrls?: Maybe<Array<SocialNetworkModel>>;
  employees?: Maybe<Scalars['Float']>;
  ultimateParent?: Maybe<UltimateParentModel>;
  employeesRange?: Maybe<Scalars['String']>;
  funding?: Maybe<Array<FundingSuggestiongModel>>;
  isDefunct?: Maybe<Scalars['Boolean']>;
  revenue?: Maybe<Scalars['String']>;
  companyEmployeeRange?: Maybe<Scalars['String']>;
  industries?: Maybe<Array<DoziIndustryModel>>;
  revenueRange?: Maybe<Scalars['String']>;
  totalFundingAmountIn000s?: Maybe<Scalars['Float']>;
};

export type CompanySuggestionModel = {
  companiesCount?: Maybe<Scalars['Float']>;
  data?: Maybe<Array<CompanySuggestionDataModel>>;
  maxResults?: Maybe<Scalars['Float']>;
  totalResults?: Maybe<Scalars['Float']>;
};

export type ItemSuggestions = {
  type?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type SearchSuggestions = {
  displayItem?: Maybe<Scalars['String']>;
  searchType?: Maybe<Scalars['String']>;
  suggestions?: Maybe<Array<ItemSuggestions>>;
};

export type SuggestionsModel = {
  peopleSuggestion?: Maybe<PersonSearchModel>;
  companySuggestion?: Maybe<CompanySuggestionModel>;
};


export type SuggestionsModelpeopleSuggestionArgs = {
  rpp?: InputMaybe<Scalars['Float']>;
};


export type SuggestionsModelcompanySuggestionArgs = {
  rpp?: InputMaybe<Scalars['Float']>;
};

export type TrySearchSuggestion = {
  items?: Maybe<Array<SearchSuggestions>>;
  showAdditionalTrySearches?: Maybe<Scalars['Boolean']>;
};

export type QuickSearchModel = {
  success?: Maybe<Scalars['Boolean']>;
  companies?: Maybe<CompanySuggestionModel>;
  contacts?: Maybe<QuickSearchRes>;
  onEnterTops?: Maybe<Array<OnEnterTops>>;
  tops?: Maybe<Array<OnEnterTops>>;
  trySearchSuggestions?: Maybe<TrySearchSuggestion>;
};

export type Company = {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  tagged?: Maybe<Scalars['Boolean']>;
  masked?: Maybe<Scalars['Boolean']>;
  subscribed?: Maybe<Scalars['Boolean']>;
  exported?: Maybe<Scalars['Boolean']>;
  description?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['String']>;
  fax?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  ticker?: Maybe<Scalars['String']>;
  crmEntityId?: Maybe<Scalars['String']>;
  address?: Maybe<LocationModel>;
  displayAddress?: Maybe<Scalars['String']>;
  employeeCount?: Maybe<Scalars['Float']>;
  revenue?: Maybe<Scalars['String']>;
  doziIndustry?: Maybe<Array<DoziIndustryModel>>;
  doziIndustryString?: Maybe<Scalars['String']>;
  revenueRange?: Maybe<Scalars['String']>;
  industry?: Maybe<Array<Scalars['String']>>;
  industries?: Maybe<Array<Scalars['String']>>;
  allIndustries?: Maybe<Array<Scalars['String']>>;
  isDefunct?: Maybe<Scalars['Boolean']>;
  uniqueCompanyNumContacts?: Maybe<Scalars['Float']>;
  companyHref?: Maybe<Scalars['String']>;
  isInPreview?: Maybe<Scalars['Boolean']>;
  funding?: Maybe<Array<FundingModel>>;
  departmentBudgets?: Maybe<Array<DepartmentBudgetsModel>>;
  certified?: Maybe<Scalars['Boolean']>;
  certificationDate?: Maybe<Scalars['String']>;
  icpScore?: Maybe<Scalars['String']>;
  locationsCount?: Maybe<Scalars['String']>;
  ultimateParent?: Maybe<Scalars['String']>;
  orgImport?: Maybe<Scalars['String']>;
};

export type HCompaniesData = {
  certified?: Maybe<Scalars['Boolean']>;
  companyFax?: Maybe<Scalars['String']>;
  companyID?: Maybe<Scalars['String']>;
  companyPhone?: Maybe<Scalars['String']>;
  isDefunct?: Maybe<Scalars['Boolean']>;
  isMasked?: Maybe<Scalars['Boolean']>;
  isTagged?: Maybe<Scalars['Boolean']>;
  subscribed?: Maybe<Scalars['Boolean']>;
  totalFundingAmountIn000s?: Maybe<Scalars['Float']>;
  location?: Maybe<LocationModel>;
};

export type HCompaniesRes = {
  companiesCount?: Maybe<Scalars['Float']>;
  maxResults?: Maybe<Scalars['Float']>;
  totalResults?: Maybe<Scalars['Float']>;
  facetData?: Maybe<BasicFacetDataModel>;
  data?: Maybe<Array<HCompaniesData>>;
};

export type HUnifiedCompaniesRes = {
  resultEntity?: Maybe<Array<Company>>;
};

export type CompanyArgs = {
  nnNegation?: InputMaybe<Scalars['StringScalar']>;
  nnQueryId?: InputMaybe<Scalars['StringScalar']>;
  nnStartDate?: InputMaybe<Scalars['StringScalar']>;
  nnEndDate?: InputMaybe<Scalars['StringScalar']>;
  companyId?: InputMaybe<Scalars['StringScalar']>;
  companyIds?: InputMaybe<Scalars['StringScalar']>;
  revenueMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  revenueMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMax?: InputMaybe<Scalars['StringScalar']>;
  techAttributesAddedDropped?: InputMaybe<TechAttributesAddedDropped>;
  techAttributeNotUsedAnd?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMin?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMax?: InputMaybe<Scalars['StringScalar']>;
  locationCountMin?: InputMaybe<Scalars['StringScalar']>;
  locationCountMax?: InputMaybe<Scalars['StringScalar']>;
  metroAreas?: InputMaybe<Scalars['StringScalar']>;
  doziPrimaryIndustry?: InputMaybe<Scalars['StringScalar']>;
  hqLocationAreaCodes?: InputMaybe<Scalars['StringScalar']>;
  departmentEmployeeCounts?: InputMaybe<DepartmentEmployeeCounts>;
  departmentBudgets?: InputMaybe<DepartmentBudgets>;
  street?: InputMaybe<Scalars['StringScalar']>;
  locationType?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  negateScope?: InputMaybe<Scalars['Boolean']>;
  itBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  itBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  anyFundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  anyFundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  fundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  anyFundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  allInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  recentInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  state?: InputMaybe<Scalars['StringScalar']>;
  metroRegion?: InputMaybe<Scalars['StringScalar']>;
  country?: InputMaybe<Scalars['StringScalar']>;
  continent?: InputMaybe<Scalars['StringScalar']>;
  companyType?: InputMaybe<Scalars['StringScalar']>;
  companyName?: InputMaybe<Scalars['StringScalar']>;
  companyDomainNames?: InputMaybe<Scalars['StringScalar']>;
  companyDesc?: InputMaybe<Scalars['StringScalar']>;
  isPublic?: InputMaybe<Scalars['StringScalar']>;
  location?: InputMaybe<Scalars['StringScalar']>;
  zipCode?: InputMaybe<Scalars['StringScalar']>;
  radiusMiles?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTag?: InputMaybe<Scalars['StringScalar']>;
  industryKeywordsMulti?: InputMaybe<Scalars['StringScalar']>;
  primaryIndustriesOnly?: InputMaybe<Scalars['StringScalar']>;
  industryClassification?: InputMaybe<Scalars['StringScalar']>;
  industryKeywords?: InputMaybe<Scalars['StringScalar']>;
  industryCodeList?: InputMaybe<Scalars['StringScalar']>;
  industryCode?: InputMaybe<Scalars['StringScalar']>;
  industryCodeAnd?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  revenueClassification?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassification?: InputMaybe<Scalars['StringScalar']>;
  companyRanking?: InputMaybe<Scalars['StringScalar']>;
  pubPrivateSectors?: InputMaybe<Scalars['StringScalar']>;
  locationSearchType?: InputMaybe<Scalars['StringScalar']>;
  fundingMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  fundingMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAnd?: InputMaybe<Scalars['StringScalar']>;
  allInvestors?: InputMaybe<Scalars['StringScalar']>;
  recentInvestors?: InputMaybe<Scalars['StringScalar']>;
  allFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  recentFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  isCertified?: InputMaybe<Scalars['String']>;
  certificationStartDate?: InputMaybe<Scalars['StringScalar']>;
  certificationEndDate?: InputMaybe<Scalars['StringScalar']>;
  streetLineTwo?: InputMaybe<Scalars['StringScalar']>;
  hashtagField?: InputMaybe<Scalars['StringScalar']>;
  fullName?: InputMaybe<Scalars['StringScalar']>;
  gender?: InputMaybe<Scalars['StringScalar']>;
  personIds?: InputMaybe<Scalars['StringScalar']>;
  personID?: InputMaybe<Scalars['StringScalar']>;
  personId?: InputMaybe<Scalars['StringScalar']>;
  hasCanadianEmail?: InputMaybe<Scalars['StringScalar']>;
  companyLocationIds?: InputMaybe<Scalars['StringScalar']>;
  emailAddress?: InputMaybe<Scalars['StringScalar']>;
  firstName?: InputMaybe<Scalars['StringScalar']>;
  lastName?: InputMaybe<Scalars['StringScalar']>;
  middleInitial?: InputMaybe<Scalars['StringScalar']>;
  excludedPersonTitle?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  titleCertification?: InputMaybe<Scalars['StringScalar']>;
  personTitle?: InputMaybe<Scalars['StringScalar']>;
  titleSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleSeniority?: InputMaybe<Scalars['StringScalar']>;
  degree?: InputMaybe<Scalars['StringScalar']>;
  school?: InputMaybe<Scalars['StringScalar']>;
  companyDomainName?: InputMaybe<Scalars['StringScalar']>;
  companyPastOrPresent?: InputMaybe<Scalars['String']>;
  validDateMonthDist?: InputMaybe<Scalars['StringScalar']>;
  contactRequirements?: InputMaybe<Scalars['String']>;
  zoomJoinsAccount?: InputMaybe<ZoomJoinsAccount>;
  orgJoinsAccount?: InputMaybe<OrgJoinsAccount>;
  titleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeNoCompany?: InputMaybe<Scalars['String']>;
  excludeExportedCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeOrgExportedCompanies?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgExportedContacts?: InputMaybe<Scalars['StringScalar']>;
  excludeCompanyTags?: InputMaybe<Scalars['StringScalar']>;
  personWebReferences?: InputMaybe<Scalars['StringScalar']>;
  personWebReferencesURL?: InputMaybe<Scalars['StringScalar']>;
  departments?: InputMaybe<Scalars['StringScalar']>;
  jobFunctions?: InputMaybe<Scalars['StringScalar']>;
  isEU?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMin?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMax?: InputMaybe<Scalars['StringScalar']>;
  hasLocationId?: InputMaybe<Scalars['StringScalar']>;
  hasPersonalEmail?: InputMaybe<Scalars['StringScalar']>;
  hasMobilePhone?: InputMaybe<Scalars['StringScalar']>;
  hasEmail?: InputMaybe<Scalars['StringScalar']>;
  hasPhone?: InputMaybe<Scalars['StringScalar']>;
  hasDirectPhone?: InputMaybe<Scalars['StringScalar']>;
  hasCompanyPhone?: InputMaybe<Scalars['StringScalar']>;
  hasTitle?: InputMaybe<Scalars['StringScalar']>;
  hasBeenNotified?: InputMaybe<Scalars['StringScalar']>;
  hasDepartment?: InputMaybe<Scalars['StringScalar']>;
  hasJobFunction?: InputMaybe<Scalars['StringScalar']>;
  hasSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgChartTier?: InputMaybe<Scalars['StringScalar']>;
  orgChartTier?: InputMaybe<Scalars['StringScalar']>;
  personCreationStartDate?: InputMaybe<Scalars['StringScalar']>;
  positionStartDate?: InputMaybe<Scalars['StringScalar']>;
  personCreationEndDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedStartDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedEndDate?: InputMaybe<Scalars['StringScalar']>;
  executivesOnly?: InputMaybe<Scalars['StringScalar']>;
  returnOnlyBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  excludeBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  page?: InputMaybe<Scalars['Float']>;
  rpp?: InputMaybe<Scalars['StringScalar']>;
  facetOptions?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  techAttributeTagNotUsedAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  findRecommendedContacts?: InputMaybe<Scalars['StringScalar']>;
  sortBy?: InputMaybe<Scalars['String']>;
  sortOrder?: InputMaybe<Scalars['String']>;
  uniqueCompanies?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesPage?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesRpp?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesSortBy?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesContacts?: InputMaybe<Scalars['StringScalar']>;
  solrPseudoOutputFields?: InputMaybe<Scalars['StringScalar']>;
  scoopEndDate?: InputMaybe<Scalars['StringScalar']>;
  scoopStartDate?: InputMaybe<Scalars['StringScalar']>;
  updatedSinceCreation?: InputMaybe<Scalars['StringScalar']>;
  scoopTypes?: InputMaybe<Scalars['StringScalar']>;
  scoopTopics?: InputMaybe<Scalars['StringScalar']>;
  scoopDepartments?: InputMaybe<Scalars['StringScalar']>;
  scoopDesc?: InputMaybe<Scalars['StringScalar']>;
  scoopIds?: InputMaybe<Scalars['StringScalar']>;
  doziIndustry?: InputMaybe<Scalars['String']>;
  scoringOptions?: InputMaybe<Scalars['StringScalar']>;
  masked?: InputMaybe<Scalars['Boolean']>;
  subscribed?: InputMaybe<Scalars['Boolean']>;
  orgImported?: InputMaybe<Scalars['Boolean']>;
  sessionToken?: InputMaybe<Scalars['StringScalar']>;
  definedUniverse?: InputMaybe<Scalars['StringScalar']>;
  outputFieldOptions?: InputMaybe<Scalars['StringScalar']>;
  ignoreDefaultFields?: InputMaybe<Scalars['StringScalar']>;
  includeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPersonOnlyMe?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedContacts?: InputMaybe<Scalars['Boolean']>;
  excludeDefunctCompanies?: InputMaybe<Scalars['Boolean']>;
  pTag?: InputMaybe<Scalars['StringScalar']>;
  cTag?: InputMaybe<Scalars['StringScalar']>;
  excludePeopleTags?: InputMaybe<Scalars['StringScalar']>;
  includeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAssociatedDeals?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeAllOrgImportLeads?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOptout?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  excludeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  orgImportOpportunities?: InputMaybe<Array<OrgImportOpportunities>>;
  includeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  companyID?: InputMaybe<Scalars['String']>;
  fetchTechAddDropOptions?: InputMaybe<Scalars['Boolean']>;
  showUnmaskedContacts?: InputMaybe<Scalars['Boolean']>;
  defaultSearchParams?: InputMaybe<DefaultSearchParams>;
  packageName?: InputMaybe<Scalars['String']>;
  buyingCommittee?: InputMaybe<Scalars['String']>;
  parsingOptions?: InputMaybe<ParsingOptions>;
  source?: InputMaybe<Scalars['String']>;
  addressVerificationStatusList?: InputMaybe<Scalars['String']>;
  parentId?: InputMaybe<Scalars['String']>;
  ultimateParentId?: InputMaybe<Scalars['String']>;
  subUnitType?: InputMaybe<Scalars['String']>;
  isLocationHierarchy?: InputMaybe<Scalars['Boolean']>;
};

export type WithIndex<TObject> = TObject & Record<string, any>;
export type ResolversObject<TObject> = WithIndex<TObject>;

export type ResolverTypeWrapper<T> = Promise<T> | T;


export type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};

export type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {
  fragment: string;
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};

export type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {
  selectionSet: string | ((fieldNode: FieldNode) => SelectionSetNode);
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type StitchingResolver<TResult, TParent, TContext, TArgs> = LegacyStitchingResolver<TResult, TParent, TContext, TArgs> | NewStitchingResolver<TResult, TParent, TContext, TArgs>;
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> =
  | ResolverFn<TResult, TParent, TContext, TArgs>
  | ResolverWithResolve<TResult, TParent, TContext, TArgs>
  | StitchingResolver<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = ResolversObject<{
  Query: ResolverTypeWrapper<{}>;
  FundingInvestorModel: ResolverTypeWrapper<FundingInvestorModel>;
  String: ResolverTypeWrapper<Scalars['String']>;
  FundingModel: ResolverTypeWrapper<FundingModel>;
  Float: ResolverTypeWrapper<Scalars['Float']>;
  DoziIndustryModel: ResolverTypeWrapper<DoziIndustryModel>;
  Boolean: ResolverTypeWrapper<Scalars['Boolean']>;
  UltimateParentModel: ResolverTypeWrapper<UltimateParentModel>;
  MergerModel: ResolverTypeWrapper<MergerModel>;
  LocationModel: ResolverTypeWrapper<LocationModel>;
  SocialMediaParsed: ResolverTypeWrapper<SocialMediaParsed>;
  SocialMediaModel: ResolverTypeWrapper<SocialMediaModel>;
  SocialMediaUrlModel: ResolverTypeWrapper<SocialMediaUrlModel>;
  PrivacyRegulationsModel: ResolverTypeWrapper<PrivacyRegulationsModel>;
  OrgUniversalTagsModel: ResolverTypeWrapper<OrgUniversalTagsModel>;
  OwnersValueModel: ResolverTypeWrapper<OwnersValueModel>;
  OwnersModel: ResolverTypeWrapper<OwnersModel>;
  ImportedDataModel: ResolverTypeWrapper<ImportedDataModel>;
  AttributeChipModel: ResolverTypeWrapper<AttributeChipModel>;
  AttributeChipGroupModel: ResolverTypeWrapper<AttributeChipGroupModel>;
  NoticeInfoModel: ResolverTypeWrapper<NoticeInfoModel>;
  ProductModel: ResolverTypeWrapper<ProductModel>;
  FacetItemModel: ResolverTypeWrapper<FacetItemModel>;
  FacetDataItem: ResolverTypeWrapper<FacetDataItem>;
  FacetDataOptions: ResolverTypeWrapper<FacetDataOptions>;
  FacetModel: ResolverTypeWrapper<FacetModel>;
  AdvanceFacetDataModel: ResolverTypeWrapper<AdvanceFacetDataModel>;
  Facets: ResolverTypeWrapper<Facets>;
  LocationAdditionalOptions: LocationAdditionalOptions;
  DefaultSearchParams: DefaultSearchParams;
  BasicFacetItemModel: ResolverTypeWrapper<BasicFacetItemModel>;
  BasicFacetDataModel: ResolverTypeWrapper<BasicFacetDataModel>;
  SubUnitTypeInfo: ResolverTypeWrapper<SubUnitTypeInfo>;
  FamilyTreeModel: ResolverTypeWrapper<FamilyTreeModel>;
  CompanyHierarchyRes: ResolverTypeWrapper<CompanyHierarchyRes>;
  DepartmentBudgetsModel: ResolverTypeWrapper<DepartmentBudgetsModel>;
  CompetitorModel: ResolverTypeWrapper<CompetitorModel>;
  TechnologyAddDropModel: ResolverTypeWrapper<TechnologyAddDropModel>;
  EmployeeGrowthDataModel: ResolverTypeWrapper<EmployeeGrowthDataModel>;
  EmployeeGrowthModel: ResolverTypeWrapper<EmployeeGrowthModel>;
  CompanyDetailsModel: ResolverTypeWrapper<CompanyDetailsModel>;
  StringScalar: ResolverTypeWrapper<Scalars['StringScalar']>;
  TechAttributesAddedDropped: TechAttributesAddedDropped;
  TechAttributeAddDropGroup: TechAttributeAddDropGroup;
  TechAttributeAddDrop: TechAttributeAddDrop;
  DepartmentEmployeeCounts: DepartmentEmployeeCounts;
  DepartmentEmployeeCount: DepartmentEmployeeCount;
  DepartmentBudgets: DepartmentBudgets;
  DepartmentBudgetsFilter: DepartmentBudgetsFilter;
  ZoomJoinsAccount: ZoomJoinsAccount;
  OrgJoinsAccount: OrgJoinsAccount;
  AdvanceOrgImportFilters: AdvanceOrgImportFilters;
  AdvanceAllOrgImportsFilters: AdvanceAllOrgImportsFilters;
  OrgImportOpportunities: OrgImportOpportunities;
  ImportsPlatformModel: ImportsPlatformModel;
  ParsingOptions: ParsingOptions;
  CompanySearchModel: ResolverTypeWrapper<CompanySearchModel>;
  CompanySearchResultModel: ResolverTypeWrapper<CompanySearchResultModel>;
  PersonSearchFacade: ResolverTypeWrapper<PersonSearchFacade>;
  ScoopTopics: ResolverTypeWrapper<ScoopTopics>;
  ScoopTypes: ResolverTypeWrapper<ScoopTypes>;
  Scoops: ResolverTypeWrapper<Scoops>;
  PredictedPersonDataModel: ResolverTypeWrapper<PredictedPersonDataModel>;
  PersonSearchModel: ResolverTypeWrapper<PersonSearchModel>;
  PersonArgs: PersonArgs;
  BoardMemberModel: ResolverTypeWrapper<BoardMemberModel>;
  DegreeModel: ResolverTypeWrapper<DegreeModel>;
  EducationModel: ResolverTypeWrapper<EducationModel>;
  EmploymentHistoryModel: ResolverTypeWrapper<EmploymentHistoryModel>;
  WebReferencesModel: ResolverTypeWrapper<WebReferencesModel>;
  OrgChartJobFunction: ResolverTypeWrapper<OrgChartJobFunction>;
  PersonDetailsModel: ResolverTypeWrapper<PersonDetailsModel>;
  SocialNetworkModel: ResolverTypeWrapper<SocialNetworkModel>;
  SocialOrgChartMediaUrlModel: ResolverTypeWrapper<SocialOrgChartMediaUrlModel>;
  JobFunctions: ResolverTypeWrapper<JobFunctions>;
  ListedTypes: ResolverTypeWrapper<ListedTypes>;
  SolarPseudoOtuputFieldsModel: ResolverTypeWrapper<SolarPseudoOtuputFieldsModel>;
  OrgChartLevelModel: ResolverTypeWrapper<OrgChartLevelModel>;
  OrgChartSwimLanesNameDataModel: ResolverTypeWrapper<OrgChartSwimLanesNameDataModel>;
  OrgChartSwimLanesModel: ResolverTypeWrapper<OrgChartSwimLanesModel>;
  OrgChart: ResolverTypeWrapper<OrgChart>;
  PersonCertificationsModel: ResolverTypeWrapper<PersonCertificationsModel>;
  OrgUniversalTagModel: ResolverTypeWrapper<OrgUniversalTagModel>;
  PplAtOrgItemModel: ResolverTypeWrapper<PplAtOrgItemModel>;
  QuickSearchDataRes: ResolverTypeWrapper<QuickSearchDataRes>;
  QuickSearchRes: ResolverTypeWrapper<QuickSearchRes>;
  OnEnterTops: ResolverTypeWrapper<OnEnterTops>;
  FundingInvestorSuggestionModel: ResolverTypeWrapper<FundingInvestorSuggestionModel>;
  FundingSuggestiongModel: ResolverTypeWrapper<FundingSuggestiongModel>;
  CompanySuggestionDataModel: ResolverTypeWrapper<CompanySuggestionDataModel>;
  CompanySuggestionModel: ResolverTypeWrapper<CompanySuggestionModel>;
  ItemSuggestions: ResolverTypeWrapper<ItemSuggestions>;
  SearchSuggestions: ResolverTypeWrapper<SearchSuggestions>;
  SuggestionsModel: ResolverTypeWrapper<SuggestionsModel>;
  TrySearchSuggestion: ResolverTypeWrapper<TrySearchSuggestion>;
  QuickSearchModel: ResolverTypeWrapper<QuickSearchModel>;
  Company: ResolverTypeWrapper<Company>;
  HCompaniesData: ResolverTypeWrapper<HCompaniesData>;
  HCompaniesRes: ResolverTypeWrapper<HCompaniesRes>;
  HUnifiedCompaniesRes: ResolverTypeWrapper<HUnifiedCompaniesRes>;
  CompanyArgs: CompanyArgs;
}>;

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = ResolversObject<{
  Query: {};
  FundingInvestorModel: FundingInvestorModel;
  String: Scalars['String'];
  FundingModel: FundingModel;
  Float: Scalars['Float'];
  DoziIndustryModel: DoziIndustryModel;
  Boolean: Scalars['Boolean'];
  UltimateParentModel: UltimateParentModel;
  MergerModel: MergerModel;
  LocationModel: LocationModel;
  SocialMediaParsed: SocialMediaParsed;
  SocialMediaModel: SocialMediaModel;
  SocialMediaUrlModel: SocialMediaUrlModel;
  PrivacyRegulationsModel: PrivacyRegulationsModel;
  OrgUniversalTagsModel: OrgUniversalTagsModel;
  OwnersValueModel: OwnersValueModel;
  OwnersModel: OwnersModel;
  ImportedDataModel: ImportedDataModel;
  AttributeChipModel: AttributeChipModel;
  AttributeChipGroupModel: AttributeChipGroupModel;
  NoticeInfoModel: NoticeInfoModel;
  ProductModel: ProductModel;
  FacetItemModel: FacetItemModel;
  FacetDataItem: FacetDataItem;
  FacetDataOptions: FacetDataOptions;
  FacetModel: FacetModel;
  AdvanceFacetDataModel: AdvanceFacetDataModel;
  Facets: Facets;
  LocationAdditionalOptions: LocationAdditionalOptions;
  DefaultSearchParams: DefaultSearchParams;
  BasicFacetItemModel: BasicFacetItemModel;
  BasicFacetDataModel: BasicFacetDataModel;
  SubUnitTypeInfo: SubUnitTypeInfo;
  FamilyTreeModel: FamilyTreeModel;
  CompanyHierarchyRes: CompanyHierarchyRes;
  DepartmentBudgetsModel: DepartmentBudgetsModel;
  CompetitorModel: CompetitorModel;
  TechnologyAddDropModel: TechnologyAddDropModel;
  EmployeeGrowthDataModel: EmployeeGrowthDataModel;
  EmployeeGrowthModel: EmployeeGrowthModel;
  CompanyDetailsModel: CompanyDetailsModel;
  StringScalar: Scalars['StringScalar'];
  TechAttributesAddedDropped: TechAttributesAddedDropped;
  TechAttributeAddDropGroup: TechAttributeAddDropGroup;
  TechAttributeAddDrop: TechAttributeAddDrop;
  DepartmentEmployeeCounts: DepartmentEmployeeCounts;
  DepartmentEmployeeCount: DepartmentEmployeeCount;
  DepartmentBudgets: DepartmentBudgets;
  DepartmentBudgetsFilter: DepartmentBudgetsFilter;
  ZoomJoinsAccount: ZoomJoinsAccount;
  OrgJoinsAccount: OrgJoinsAccount;
  AdvanceOrgImportFilters: AdvanceOrgImportFilters;
  AdvanceAllOrgImportsFilters: AdvanceAllOrgImportsFilters;
  OrgImportOpportunities: OrgImportOpportunities;
  ImportsPlatformModel: ImportsPlatformModel;
  ParsingOptions: ParsingOptions;
  CompanySearchModel: CompanySearchModel;
  CompanySearchResultModel: CompanySearchResultModel;
  PersonSearchFacade: PersonSearchFacade;
  ScoopTopics: ScoopTopics;
  ScoopTypes: ScoopTypes;
  Scoops: Scoops;
  PredictedPersonDataModel: PredictedPersonDataModel;
  PersonSearchModel: PersonSearchModel;
  PersonArgs: PersonArgs;
  BoardMemberModel: BoardMemberModel;
  DegreeModel: DegreeModel;
  EducationModel: EducationModel;
  EmploymentHistoryModel: EmploymentHistoryModel;
  WebReferencesModel: WebReferencesModel;
  OrgChartJobFunction: OrgChartJobFunction;
  PersonDetailsModel: PersonDetailsModel;
  SocialNetworkModel: SocialNetworkModel;
  SocialOrgChartMediaUrlModel: SocialOrgChartMediaUrlModel;
  JobFunctions: JobFunctions;
  ListedTypes: ListedTypes;
  SolarPseudoOtuputFieldsModel: SolarPseudoOtuputFieldsModel;
  OrgChartLevelModel: OrgChartLevelModel;
  OrgChartSwimLanesNameDataModel: OrgChartSwimLanesNameDataModel;
  OrgChartSwimLanesModel: OrgChartSwimLanesModel;
  OrgChart: OrgChart;
  PersonCertificationsModel: PersonCertificationsModel;
  OrgUniversalTagModel: OrgUniversalTagModel;
  PplAtOrgItemModel: PplAtOrgItemModel;
  QuickSearchDataRes: QuickSearchDataRes;
  QuickSearchRes: QuickSearchRes;
  OnEnterTops: OnEnterTops;
  FundingInvestorSuggestionModel: FundingInvestorSuggestionModel;
  FundingSuggestiongModel: FundingSuggestiongModel;
  CompanySuggestionDataModel: CompanySuggestionDataModel;
  CompanySuggestionModel: CompanySuggestionModel;
  ItemSuggestions: ItemSuggestions;
  SearchSuggestions: SearchSuggestions;
  SuggestionsModel: SuggestionsModel;
  TrySearchSuggestion: TrySearchSuggestion;
  QuickSearchModel: QuickSearchModel;
  Company: Company;
  HCompaniesData: HCompaniesData;
  HCompaniesRes: HCompaniesRes;
  HUnifiedCompaniesRes: HUnifiedCompaniesRes;
  CompanyArgs: CompanyArgs;
}>;

export type QueryResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = ResolversObject<{
  hCompaniesSearch?: Resolver<ResolversTypes['HCompaniesRes'], ParentType, ContextType, Partial<QueryhCompaniesSearchArgs>>;
  hUnifiedCompaniesSearch?: Resolver<ResolversTypes['HUnifiedCompaniesRes'], ParentType, ContextType, Partial<QueryhUnifiedCompaniesSearchArgs>>;
  personDetails?: Resolver<ResolversTypes['PersonDetailsModel'], ParentType, ContextType, Partial<QuerypersonDetailsArgs>>;
  personSearch?: Resolver<ResolversTypes['PersonSearchModel'], ParentType, ContextType, Partial<QuerypersonSearchArgs>>;
  scoopsSearch?: Resolver<Array<ResolversTypes['Scoops']>, ParentType, ContextType, Partial<QueryscoopsSearchArgs>>;
  orgchartsSearch?: Resolver<ResolversTypes['OrgChart'], ParentType, ContextType, Partial<QueryorgchartsSearchArgs>>;
  companyHierarchySearch?: Resolver<ResolversTypes['CompanyHierarchyRes'], ParentType, ContextType, Partial<QuerycompanyHierarchySearchArgs>>;
  facets?: Resolver<ResolversTypes['Facets'], ParentType, ContextType, Partial<QueryfacetsArgs>>;
  suggestions?: Resolver<ResolversTypes['SuggestionsModel'], ParentType, ContextType, Partial<QuerysuggestionsArgs>>;
  quickSearch?: Resolver<ResolversTypes['QuickSearchModel'], ParentType, ContextType, Partial<QueryquickSearchArgs>>;
  companyDetails?: Resolver<ResolversTypes['CompanyDetailsModel'], ParentType, ContextType, Partial<QuerycompanyDetailsArgs>>;
  companySearch?: Resolver<ResolversTypes['CompanySearchResultModel'], ParentType, ContextType, Partial<QuerycompanySearchArgs>>;
}>;

export type FundingInvestorModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FundingInvestorModel'] = ResolversParentTypes['FundingInvestorModel']> = ResolversObject<{
  companyName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type FundingModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FundingModel'] = ResolversParentTypes['FundingModel']> = ResolversObject<{
  amountIn000s?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  investors?: Resolver<Maybe<ResolversTypes['FundingInvestorModel']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DoziIndustryModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DoziIndustryModel'] = ResolversParentTypes['DoziIndustryModel']> = ResolversObject<{
  displayName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  isPrimary?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  score?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type UltimateParentModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['UltimateParentModel'] = ResolversParentTypes['UltimateParentModel']> = ResolversObject<{
  id?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MergerModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MergerModel'] = ResolversParentTypes['MergerModel']> = ResolversObject<{
  companyId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  companyName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  zoomUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type LocationModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['LocationModel'] = ResolversParentTypes['LocationModel']> = ResolversObject<{
  Street?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  City?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  State?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  Zip?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  street?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  state?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  zip?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  latitude?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  longitude?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  CountryCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  countryCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SocialMediaParsedResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SocialMediaParsed'] = ResolversParentTypes['SocialMediaParsed']> = ResolversObject<{
  linkedin?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  facebook?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  twitter?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  youtube?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SocialMediaModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SocialMediaModel'] = ResolversParentTypes['SocialMediaModel']> = ResolversObject<{
  followerCount?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  socialNetworkType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  socialNetworkUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SocialMediaUrlModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SocialMediaUrlModel'] = ResolversParentTypes['SocialMediaUrlModel']> = ResolversObject<{
  socialMedia?: Resolver<Maybe<Array<ResolversTypes['SocialMediaModel']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PrivacyRegulationsModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PrivacyRegulationsModel'] = ResolversParentTypes['PrivacyRegulationsModel']> = ResolversObject<{
  privacyRegulationFlag?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type OrgUniversalTagsModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['OrgUniversalTagsModel'] = ResolversParentTypes['OrgUniversalTagsModel']> = ResolversObject<{
  tagName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type OwnersValueModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['OwnersValueModel'] = ResolversParentTypes['OwnersValueModel']> = ResolversObject<{
  date?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  crmEntityId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ownerId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ownerName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type OwnersModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['OwnersModel'] = ResolversParentTypes['OwnersModel']> = ResolversObject<{
  key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  value?: Resolver<Maybe<Array<ResolversTypes['OwnersValueModel']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ImportedDataModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ImportedDataModel'] = ResolversParentTypes['ImportedDataModel']> = ResolversObject<{
  date?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  owners?: Resolver<Maybe<Array<ResolversTypes['OwnersModel']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AttributeChipModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AttributeChipModel'] = ResolversParentTypes['AttributeChipModel']> = ResolversObject<{
  displayName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  isPrimary?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  chipHref?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  lastSeen?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AttributeChipGroupModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AttributeChipGroupModel'] = ResolversParentTypes['AttributeChipGroupModel']> = ResolversObject<{
  areaOfStudy?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  degree?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  displayName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  attributeCol?: Resolver<Maybe<Array<ResolversTypes['AttributeChipModel']>>, ParentType, ContextType>;
  isOpen?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isPrimary?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  order?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type NoticeInfoModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['NoticeInfoModel'] = ResolversParentTypes['NoticeInfoModel']> = ResolversObject<{
  hasBeenNotified?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  emailNoticeProvidedDate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ProductModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductModel'] = ResolversParentTypes['ProductModel']> = ResolversObject<{
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  displayName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type FacetItemModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FacetItemModel'] = ResolversParentTypes['FacetItemModel']> = ResolversObject<{
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  displayName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  searchValue?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type FacetDataItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FacetDataItem'] = ResolversParentTypes['FacetDataItem']> = ResolversObject<{
  count?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  counts?: Resolver<Maybe<Array<ResolversTypes['FacetItemModel']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type FacetDataOptionsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FacetDataOptions'] = ResolversParentTypes['FacetDataOptions']> = ResolversObject<{
  ManagementLevels?: Resolver<Maybe<ResolversTypes['FacetDataItem']>, ParentType, ContextType>;
  DEPARTMENT?: Resolver<Maybe<ResolversTypes['FacetDataItem']>, ParentType, ContextType>;
  Continents?: Resolver<Maybe<ResolversTypes['FacetDataItem']>, ParentType, ContextType>;
  Countries?: Resolver<Maybe<ResolversTypes['FacetDataItem']>, ParentType, ContextType>;
  States?: Resolver<Maybe<ResolversTypes['FacetDataItem']>, ParentType, ContextType>;
  LOCATION_COMPANY_ID?: Resolver<Maybe<ResolversTypes['FacetDataItem']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type FacetModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FacetModel'] = ResolversParentTypes['FacetModel']> = ResolversObject<{
  totalResults?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  maxResults?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  facetCount?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  totalRecordsCount?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  data?: Resolver<Maybe<ResolversTypes['FacetDataOptions']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AdvanceFacetDataModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AdvanceFacetDataModel'] = ResolversParentTypes['AdvanceFacetDataModel']> = ResolversObject<{
  facets?: Resolver<Maybe<Array<ResolversTypes['BasicFacetItemModel']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type FacetsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Facets'] = ResolversParentTypes['Facets']> = ResolversObject<{
  peopleFacets?: Resolver<ResolversTypes['FacetModel'], ParentType, ContextType, Partial<FacetspeopleFacetsArgs>>;
  locationFacets?: Resolver<ResolversTypes['FacetModel'], ParentType, ContextType, Partial<FacetslocationFacetsArgs>>;
  orgChartFacets?: Resolver<Maybe<ResolversTypes['AdvanceFacetDataModel']>, ParentType, ContextType, Partial<FacetsorgChartFacetsArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BasicFacetItemModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BasicFacetItemModel'] = ResolversParentTypes['BasicFacetItemModel']> = ResolversObject<{
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  counts?: Resolver<Maybe<Array<ResolversTypes['FacetItemModel']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BasicFacetDataModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BasicFacetDataModel'] = ResolversParentTypes['BasicFacetDataModel']> = ResolversObject<{
  facets?: Resolver<Maybe<ResolversTypes['BasicFacetItemModel']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SubUnitTypeInfoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SubUnitTypeInfo'] = ResolversParentTypes['SubUnitTypeInfo']> = ResolversObject<{
  type?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  typeDescription?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type FamilyTreeModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FamilyTreeModel'] = ResolversParentTypes['FamilyTreeModel']> = ResolversObject<{
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  familyNodes?: Resolver<Maybe<Array<ResolversTypes['FamilyTreeModel']>>, ParentType, ContextType>;
  checked?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  address?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  employeeCount?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  searchByAddressUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  subUnitTypeInfo?: Resolver<Maybe<ResolversTypes['SubUnitTypeInfo']>, ParentType, ContextType>;
  locationType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CompanyHierarchyResResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CompanyHierarchyRes'] = ResolversParentTypes['CompanyHierarchyRes']> = ResolversObject<{
  familyTree?: Resolver<Maybe<ResolversTypes['FamilyTreeModel']>, ParentType, ContextType>;
  ultimateParent?: Resolver<Maybe<ResolversTypes['UltimateParentModel']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DepartmentBudgetsModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DepartmentBudgetsModel'] = ResolversParentTypes['DepartmentBudgetsModel']> = ResolversObject<{
  departmentType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  budgetAmount?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CompetitorModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CompetitorModel'] = ResolversParentTypes['CompetitorModel']> = ResolversObject<{
  companyId?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  companyName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  revenue?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  employeeCount?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type TechnologyAddDropModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['TechnologyAddDropModel'] = ResolversParentTypes['TechnologyAddDropModel']> = ResolversObject<{
  technologyId?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  activity?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  logo?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type EmployeeGrowthDataModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['EmployeeGrowthDataModel'] = ResolversParentTypes['EmployeeGrowthDataModel']> = ResolversObject<{
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  employeeCount?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type EmployeeGrowthModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['EmployeeGrowthModel'] = ResolversParentTypes['EmployeeGrowthModel']> = ResolversObject<{
  oneYearEmployeeGrowthRate?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  twoYearEmployeeGrowthRate?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  employeeGrowthData?: Resolver<Maybe<Array<ResolversTypes['EmployeeGrowthDataModel']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CompanyDetailsModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CompanyDetailsModel'] = ResolversParentTypes['CompanyDetailsModel']> = ResolversObject<{
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  tagged?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  masked?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  subscribed?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  exported?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  logo?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fax?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ticker?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  crmEntityId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  revenue?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  allIndustries?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  isDefunct?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  uniqueCompanyNumContacts?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  companyHref?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  isInPreview?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  funding?: Resolver<Maybe<Array<ResolversTypes['FundingModel']>>, ParentType, ContextType>;
  certified?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  certificationDate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  icpScore?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  locationsCount?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  orgImport?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  entityId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  address?: Resolver<Maybe<ResolversTypes['LocationModel']>, ParentType, ContextType>;
  displayAddress?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  NAICS?: Resolver<Maybe<Array<ResolversTypes['Float']>>, ParentType, ContextType>;
  SIC?: Resolver<Maybe<Array<ResolversTypes['Float']>>, ParentType, ContextType>;
  ranking?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  employeeCount?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  employeeCountRange?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  revenueRange?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  companyAttributes?: Resolver<Maybe<Array<ResolversTypes['AttributeChipGroupModel']>>, ParentType, ContextType>;
  techAttributes?: Resolver<Maybe<Array<ResolversTypes['AttributeChipGroupModel']>>, ParentType, ContextType>;
  doziIndustry?: Resolver<Maybe<Array<ResolversTypes['DoziIndustryModel']>>, ParentType, ContextType>;
  topLevelIndustry?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  industryLabel?: Resolver<Maybe<Array<ResolversTypes['DoziIndustryModel']>>, ParentType, ContextType>;
  doziIndustryString?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  industry?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType, Partial<CompanyDetailsModelindustryArgs>>;
  industryV2?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  industryForBasic?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  topIndustry?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  industries?: Resolver<Maybe<Array<ResolversTypes['AttributeChipModel']>>, ParentType, ContextType>;
  industriesAsAttributes?: Resolver<Maybe<Array<ResolversTypes['AttributeChipModel']>>, ParentType, ContextType>;
  basicIndustries?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  merger?: Resolver<Maybe<Array<ResolversTypes['MergerModel']>>, ParentType, ContextType>;
  alternateNames?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  orgChartFacetData?: Resolver<Maybe<ResolversTypes['FacetDataOptions']>, ParentType, ContextType>;
  importedData?: Resolver<Maybe<ResolversTypes['ImportedDataModel']>, ParentType, ContextType>;
  socialUrls?: Resolver<Maybe<ResolversTypes['SocialMediaUrlModel']>, ParentType, ContextType>;
  socialUrlsParsed?: Resolver<Maybe<ResolversTypes['SocialMediaParsed']>, ParentType, ContextType>;
  followerCountParsed?: Resolver<Maybe<ResolversTypes['SocialMediaParsed']>, ParentType, ContextType>;
  foundedYear?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  alexaRank?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  departmentBudgets?: Resolver<Maybe<Array<ResolversTypes['DepartmentBudgetsModel']>>, ParentType, ContextType>;
  companyEmployeeGrowth?: Resolver<Maybe<ResolversTypes['EmployeeGrowthModel']>, ParentType, ContextType>;
  ultimateParent?: Resolver<Maybe<ResolversTypes['UltimateParentModel']>, ParentType, ContextType>;
  basicUltimateParent?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  products?: Resolver<Maybe<Array<ResolversTypes['ProductModel']>>, ParentType, ContextType>;
  technologyAddDrop?: Resolver<Maybe<Array<ResolversTypes['TechnologyAddDropModel']>>, ParentType, ContextType>;
  competitors?: Resolver<Maybe<Array<ResolversTypes['CompetitorModel']>>, ParentType, ContextType>;
  companyHierarchy?: Resolver<Maybe<ResolversTypes['CompanyHierarchyRes']>, ParentType, ContextType, Partial<CompanyDetailsModelcompanyHierarchyArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface StringScalarScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['StringScalar'], any> {
  name: 'StringScalar';
}

export type CompanySearchModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CompanySearchModel'] = ResolversParentTypes['CompanySearchModel']> = ResolversObject<{
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  tagged?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  masked?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  subscribed?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  exported?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  logo?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fax?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ticker?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  crmEntityId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  revenue?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  allIndustries?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  isDefunct?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  uniqueCompanyNumContacts?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  companyHref?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  isInPreview?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  funding?: Resolver<Maybe<Array<ResolversTypes['FundingModel']>>, ParentType, ContextType>;
  certified?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  certificationDate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  icpScore?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  locationsCount?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  orgImport?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  address?: Resolver<Maybe<ResolversTypes['LocationModel']>, ParentType, ContextType>;
  displayAddress?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  employeeCount?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  employeeCountRange?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  revenueRange?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  doziIndustry?: Resolver<Maybe<Array<ResolversTypes['DoziIndustryModel']>>, ParentType, ContextType>;
  topLevelIndustry?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  doziIndustryString?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  industry?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  basicIndustries?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  industryV2?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  industries?: Resolver<Maybe<Array<ResolversTypes['AttributeChipModel']>>, ParentType, ContextType>;
  industriesAsAttributes?: Resolver<Maybe<Array<ResolversTypes['AttributeChipModel']>>, ParentType, ContextType>;
  ultimateParent?: Resolver<Maybe<ResolversTypes['UltimateParentModel']>, ParentType, ContextType>;
  departmentBudgets?: Resolver<Maybe<Array<ResolversTypes['DepartmentBudgetsModel']>>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  companyRevenueIn000s?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  employeesRange?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  locationType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  orgUniversalTagged?: Resolver<Maybe<Array<ResolversTypes['OrgUniversalTagsModel']>>, ParentType, ContextType>;
  universalTagged?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CompanySearchResultModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CompanySearchResultModel'] = ResolversParentTypes['CompanySearchResultModel']> = ResolversObject<{
  data?: Resolver<Maybe<Array<ResolversTypes['CompanySearchModel']>>, ParentType, ContextType>;
  facetData?: Resolver<Maybe<ResolversTypes['AdvanceFacetDataModel']>, ParentType, ContextType>;
  maxResults?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  totalResults?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PersonSearchFacadeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PersonSearchFacade'] = ResolversParentTypes['PersonSearchFacade']> = ResolversObject<{
  firstName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  lastName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  personId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ScoopTopicsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ScoopTopics'] = ResolversParentTypes['ScoopTopics']> = ResolversObject<{
  scoopTopic?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ScoopTypesResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ScoopTypes'] = ResolversParentTypes['ScoopTypes']> = ResolversObject<{
  scoopType?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ScoopsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Scoops'] = ResolversParentTypes['Scoops']> = ResolversObject<{
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  company?: Resolver<Maybe<ResolversTypes['CompanyDetailsModel']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  topics?: Resolver<Maybe<ResolversTypes['ScoopTopics']>, ParentType, ContextType>;
  types?: Resolver<Maybe<ResolversTypes['ScoopTypes']>, ParentType, ContextType>;
  originalPublishedDate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  publishedDate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updatedText?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  urlText?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  personRecords?: Resolver<Maybe<Array<ResolversTypes['PersonSearchFacade']>>, ParentType, ContextType>;
  imageUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  orgImport?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PredictedPersonDataModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PredictedPersonDataModel'] = ResolversParentTypes['PredictedPersonDataModel']> = ResolversObject<{
  guessedEmail?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  companyId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  companyName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PersonSearchModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PersonSearchModel'] = ResolversParentTypes['PersonSearchModel']> = ResolversObject<{
  totalResults?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  maxResults?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  companiesCount?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  numUniqueCompanies?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  predictedData?: Resolver<Maybe<ResolversTypes['PredictedPersonDataModel']>, ParentType, ContextType, Partial<PersonSearchModelpredictedDataArgs>>;
  data?: Resolver<Maybe<Array<ResolversTypes['PplAtOrgItemModel']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BoardMemberModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BoardMemberModel'] = ResolversParentTypes['BoardMemberModel']> = ResolversObject<{
  company?: Resolver<Maybe<ResolversTypes['CompanyDetailsModel']>, ParentType, ContextType>;
  from?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  jobFunction?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  level?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DegreeModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DegreeModel'] = ResolversParentTypes['DegreeModel']> = ResolversObject<{
  areaOfStudy?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  degree?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type EducationModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['EducationModel'] = ResolversParentTypes['EducationModel']> = ResolversObject<{
  school?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  degree?: Resolver<Maybe<ResolversTypes['DegreeModel']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type EmploymentHistoryModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['EmploymentHistoryModel'] = ResolversParentTypes['EmploymentHistoryModel']> = ResolversObject<{
  companyName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  from?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  jobFunction?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  level?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  companyID?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  companyWebsite?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type WebReferencesModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['WebReferencesModel'] = ResolversParentTypes['WebReferencesModel']> = ResolversObject<{
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type OrgChartJobFunctionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['OrgChartJobFunction'] = ResolversParentTypes['OrgChartJobFunction']> = ResolversObject<{
  department?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  departmentId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  jobFunction?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  jobFunctionId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PersonDetailsModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PersonDetailsModel'] = ResolversParentTypes['PersonDetailsModel']> = ResolversObject<{
  entityId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  industry?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  newJobFunction?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  orgChartTier?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  topLevelIndustry?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  jobFunction?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  employmentHistory?: Resolver<Maybe<Array<ResolversTypes['EmploymentHistoryModel']>>, ParentType, ContextType>;
  education?: Resolver<Maybe<Array<ResolversTypes['EducationModel']>>, ParentType, ContextType>;
  orgChartJobFunction?: Resolver<Maybe<Array<ResolversTypes['OrgChartJobFunction']>>, ParentType, ContextType>;
  jobFunctions?: Resolver<Maybe<Array<ResolversTypes['OrgChartJobFunction']>>, ParentType, ContextType>;
  webReference?: Resolver<Maybe<Array<ResolversTypes['WebReferencesModel']>>, ParentType, ContextType>;
  boardMember?: Resolver<Maybe<Array<ResolversTypes['BoardMemberModel']>>, ParentType, ContextType>;
  personBiography?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  socialUrls?: Resolver<Maybe<ResolversTypes['SocialMediaUrlModel']>, ParentType, ContextType>;
  socialUrlsParsed?: Resolver<Maybe<ResolversTypes['SocialMediaParsed']>, ParentType, ContextType>;
  followerCountParsed?: Resolver<Maybe<ResolversTypes['SocialMediaParsed']>, ParentType, ContextType>;
  foundedYear?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  alexaRank?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  directPhoneIsDoNotCall?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  mobilePhoneIsDoNotCall?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  directPhoneBlocked?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  mobilePhoneBlocked?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  emailBlocked?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  personalEmailBlocked?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  company?: Resolver<Maybe<ResolversTypes['CompanyDetailsModel']>, ParentType, ContextType>;
  importedData?: Resolver<Maybe<ResolversTypes['ImportedDataModel']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SocialNetworkModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SocialNetworkModel'] = ResolversParentTypes['SocialNetworkModel']> = ResolversObject<{
  socialNetworkType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  socialNetworkUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SocialOrgChartMediaUrlModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SocialOrgChartMediaUrlModel'] = ResolversParentTypes['SocialOrgChartMediaUrlModel']> = ResolversObject<{
  socialMedia?: Resolver<Maybe<Array<ResolversTypes['SocialNetworkModel']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type JobFunctionsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['JobFunctions'] = ResolversParentTypes['JobFunctions']> = ResolversObject<{
  department?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  departmentId?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  departmentPriority?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  jobFunctionId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  orgChartSwimLane?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  orgChartSwimLanePriority?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  rank?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ListedTypesResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ListedTypes'] = ResolversParentTypes['ListedTypes']> = ResolversObject<{
  listName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SolarPseudoOtuputFieldsModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SolarPseudoOtuputFieldsModel'] = ResolversParentTypes['SolarPseudoOtuputFieldsModel']> = ResolversObject<{
  exported?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  imported?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  listed?: Resolver<Maybe<Array<ResolversTypes['ListedTypes']>>, ParentType, ContextType>;
  orgImported?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  orgOriginSF?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  owned?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  recentExported?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  tagged?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  viewed?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type OrgChartLevelModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['OrgChartLevelModel'] = ResolversParentTypes['OrgChartLevelModel']> = ResolversObject<{
  businessEmailAddress?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  companyHQPhone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  confidenceScore?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  directPhone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  directPhoneIsDoNotCall?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  imageUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  indentationPosition?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  isMasked?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isTagged?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  jobFunctions?: Resolver<Maybe<Array<ResolversTypes['JobFunctions']>>, ParentType, ContextType>;
  mobilePhone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  mobilePhoneIsDoNotCall?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  orgChartTier?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  personId?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  personalEmailAddress?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  socialUrls?: Resolver<Maybe<ResolversTypes['SocialOrgChartMediaUrlModel']>, ParentType, ContextType>;
  solrPseudoOutputFields?: Resolver<Maybe<ResolversTypes['SolarPseudoOtuputFieldsModel']>, ParentType, ContextType>;
  subOrgChartTier?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  socialUrlsParsed?: Resolver<Maybe<ResolversTypes['SocialMediaParsed']>, ParentType, ContextType>;
  followerCountParsed?: Resolver<Maybe<ResolversTypes['SocialMediaParsed']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type OrgChartSwimLanesNameDataModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['OrgChartSwimLanesNameDataModel'] = ResolversParentTypes['OrgChartSwimLanesNameDataModel']> = ResolversObject<{
  data?: Resolver<Maybe<Array<ResolversTypes['OrgChartLevelModel']>>, ParentType, ContextType>;
  departments?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  jobFunctionName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  jobFunctions?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  maxResults?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  orgChartSwimLane?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  totalResults?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type OrgChartSwimLanesModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['OrgChartSwimLanesModel'] = ResolversParentTypes['OrgChartSwimLanesModel']> = ResolversObject<{
  data?: Resolver<Maybe<Array<ResolversTypes['OrgChartSwimLanesNameDataModel']>>, ParentType, ContextType>;
  swimLaneName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type OrgChartResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['OrgChart'] = ResolversParentTypes['OrgChart']> = ResolversObject<{
  companyId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  departments?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  highestTier?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  orgChartSwimLanes?: Resolver<Maybe<Array<ResolversTypes['OrgChartSwimLanesModel']>>, ParentType, ContextType>;
  topLevelContacts?: Resolver<Maybe<Array<ResolversTypes['OrgChartLevelModel']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PersonCertificationsModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PersonCertificationsModel'] = ResolversParentTypes['PersonCertificationsModel']> = ResolversObject<{
  certificationName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  organizationName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type OrgUniversalTagModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['OrgUniversalTagModel'] = ResolversParentTypes['OrgUniversalTagModel']> = ResolversObject<{
  tagName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PplAtOrgItemModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PplAtOrgItemModel'] = ResolversParentTypes['PplAtOrgItemModel']> = ResolversObject<{
  buyingCommittee?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  certifications?: Resolver<Maybe<Array<ResolversTypes['PersonCertificationsModel']>>, ParentType, ContextType>;
  orgUniversalTagged?: Resolver<Maybe<Array<ResolversTypes['OrgUniversalTagModel']>>, ParentType, ContextType>;
  universalTagged?: Resolver<Maybe<Array<ResolversTypes['OrgUniversalTagModel']>>, ParentType, ContextType>;
  certified?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isEU?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  jobTitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  positionStartDate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  socialUrls?: Resolver<Maybe<ResolversTypes['SocialOrgChartMediaUrlModel']>, ParentType, ContextType>;
  website?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  personID?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  profileImageURL?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  firstName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  lastName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  mobilePhone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  personalEmail?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  location?: Resolver<Maybe<ResolversTypes['LocationModel']>, ParentType, ContextType>;
  topLevelIndustry?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  industry?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  lastMentioned?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  lastUpdatedDate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  confidenceScore?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  noticeProvidedInfo?: Resolver<Maybe<ResolversTypes['NoticeInfoModel']>, ParentType, ContextType>;
  privacyRegulationFlags?: Resolver<Maybe<ResolversTypes['PrivacyRegulationsModel']>, ParentType, ContextType>;
  isPast?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  score?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  managementLevel?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  jobFunction?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  companyID?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  companyLogo?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  companyName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  companyAddress?: Resolver<Maybe<ResolversTypes['LocationModel']>, ParentType, ContextType>;
  companyRevenue?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  companyRevenueRange?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  companyEmployees?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  companyEmployeeCountRange?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  companyDomain?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  companyPhone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  companyDescription?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  companyFax?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  creationDate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  companyType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  subscribed?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  companyRevenueIn000s?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  companySIC?: Resolver<Maybe<Array<ResolversTypes['Float']>>, ParentType, ContextType>;
  companyNAICS?: Resolver<Maybe<Array<ResolversTypes['Float']>>, ParentType, ContextType>;
  companyTicker?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  middleInitial?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  isMasked?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isTagged?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  directPhoneBlocked?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  mobilePhoneBlocked?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  personalEmailBlocked?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  emailBlocked?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  doziIndustry?: Resolver<Maybe<Array<ResolversTypes['DoziIndustryModel']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type QuickSearchDataResResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['QuickSearchDataRes'] = ResolversParentTypes['QuickSearchDataRes']> = ResolversObject<{
  companyId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  companyName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  logo?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  personID?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  isDefunct?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  ultimateParent?: Resolver<Maybe<ResolversTypes['UltimateParentModel']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type QuickSearchResResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['QuickSearchRes'] = ResolversParentTypes['QuickSearchRes']> = ResolversObject<{
  companiesCount?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  data?: Resolver<Maybe<Array<ResolversTypes['QuickSearchDataRes']>>, ParentType, ContextType>;
  maxResults?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  totalResults?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type OnEnterTopsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['OnEnterTops'] = ResolversParentTypes['OnEnterTops']> = ResolversObject<{
  topCount?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  topName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  topValue?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type FundingInvestorSuggestionModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FundingInvestorSuggestionModel'] = ResolversParentTypes['FundingInvestorSuggestionModel']> = ResolversObject<{
  companyName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  investorDomain?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  investorName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type FundingSuggestiongModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FundingSuggestiongModel'] = ResolversParentTypes['FundingSuggestiongModel']> = ResolversObject<{
  amountIn000s?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  investors?: Resolver<Maybe<Array<ResolversTypes['FundingInvestorSuggestionModel']>>, ParentType, ContextType>;
  round?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CompanySuggestionDataModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CompanySuggestionDataModel'] = ResolversParentTypes['CompanySuggestionDataModel']> = ResolversObject<{
  buyingCommittee?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  certifications?: Resolver<Maybe<Array<ResolversTypes['PersonCertificationsModel']>>, ParentType, ContextType>;
  orgUniversalTagged?: Resolver<Maybe<Array<ResolversTypes['OrgUniversalTagModel']>>, ParentType, ContextType>;
  universalTagged?: Resolver<Maybe<Array<ResolversTypes['OrgUniversalTagModel']>>, ParentType, ContextType>;
  certified?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isEU?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  jobTitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  positionStartDate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  socialUrls?: Resolver<Maybe<ResolversTypes['SocialOrgChartMediaUrlModel']>, ParentType, ContextType>;
  website?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  companyAddress?: Resolver<Maybe<ResolversTypes['LocationModel']>, ParentType, ContextType>;
  companyDescription?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  companyDomain?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  companyEmployeeCountRange?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  companyEmployees?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  companyID?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  companyLogo?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  companyName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  companyPhone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  companyType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  confidenceScore?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  companyRevenue?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  creationDate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  middleInitial?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  profileImageURL?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  companyRevenueRange?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  companyTicker?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  companyRevenueIn000s?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  doziIndustry?: Resolver<Maybe<Array<ResolversTypes['DoziIndustryModel']>>, ParentType, ContextType>;
  firstName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  isMasked?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isPast?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  isTagged?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  lastMentioned?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  lastName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  lastUpdatedDate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  location?: Resolver<Maybe<ResolversTypes['LocationModel']>, ParentType, ContextType>;
  mobilePhoneBlocked?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  mobilePhoneIsDoNotCall?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  noticeProvidedInfo?: Resolver<Maybe<ResolversTypes['NoticeInfoModel']>, ParentType, ContextType>;
  personID?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  score?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  subscribed?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  topLevelIndustry?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  certificationDate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  companyIds?: Resolver<Maybe<Array<ResolversTypes['Float']>>, ParentType, ContextType>;
  logo?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  socialNetworkUrls?: Resolver<Maybe<Array<ResolversTypes['SocialNetworkModel']>>, ParentType, ContextType>;
  employees?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  ultimateParent?: Resolver<Maybe<ResolversTypes['UltimateParentModel']>, ParentType, ContextType>;
  employeesRange?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  funding?: Resolver<Maybe<Array<ResolversTypes['FundingSuggestiongModel']>>, ParentType, ContextType>;
  isDefunct?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  revenue?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  companyEmployeeRange?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  industries?: Resolver<Maybe<Array<ResolversTypes['DoziIndustryModel']>>, ParentType, ContextType>;
  revenueRange?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  totalFundingAmountIn000s?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CompanySuggestionModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CompanySuggestionModel'] = ResolversParentTypes['CompanySuggestionModel']> = ResolversObject<{
  companiesCount?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  data?: Resolver<Maybe<Array<ResolversTypes['CompanySuggestionDataModel']>>, ParentType, ContextType>;
  maxResults?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  totalResults?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ItemSuggestionsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ItemSuggestions'] = ResolversParentTypes['ItemSuggestions']> = ResolversObject<{
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SearchSuggestionsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SearchSuggestions'] = ResolversParentTypes['SearchSuggestions']> = ResolversObject<{
  displayItem?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  searchType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  suggestions?: Resolver<Maybe<Array<ResolversTypes['ItemSuggestions']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SuggestionsModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SuggestionsModel'] = ResolversParentTypes['SuggestionsModel']> = ResolversObject<{
  peopleSuggestion?: Resolver<Maybe<ResolversTypes['PersonSearchModel']>, ParentType, ContextType, Partial<SuggestionsModelpeopleSuggestionArgs>>;
  companySuggestion?: Resolver<Maybe<ResolversTypes['CompanySuggestionModel']>, ParentType, ContextType, Partial<SuggestionsModelcompanySuggestionArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type TrySearchSuggestionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['TrySearchSuggestion'] = ResolversParentTypes['TrySearchSuggestion']> = ResolversObject<{
  items?: Resolver<Maybe<Array<ResolversTypes['SearchSuggestions']>>, ParentType, ContextType>;
  showAdditionalTrySearches?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type QuickSearchModelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['QuickSearchModel'] = ResolversParentTypes['QuickSearchModel']> = ResolversObject<{
  success?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  companies?: Resolver<Maybe<ResolversTypes['CompanySuggestionModel']>, ParentType, ContextType>;
  contacts?: Resolver<Maybe<ResolversTypes['QuickSearchRes']>, ParentType, ContextType>;
  onEnterTops?: Resolver<Maybe<Array<ResolversTypes['OnEnterTops']>>, ParentType, ContextType>;
  tops?: Resolver<Maybe<Array<ResolversTypes['OnEnterTops']>>, ParentType, ContextType>;
  trySearchSuggestions?: Resolver<Maybe<ResolversTypes['TrySearchSuggestion']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CompanyResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Company'] = ResolversParentTypes['Company']> = ResolversObject<{
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  tagged?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  masked?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  subscribed?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  exported?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  logo?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fax?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ticker?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  crmEntityId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  address?: Resolver<Maybe<ResolversTypes['LocationModel']>, ParentType, ContextType>;
  displayAddress?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  employeeCount?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  revenue?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  doziIndustry?: Resolver<Maybe<Array<ResolversTypes['DoziIndustryModel']>>, ParentType, ContextType>;
  doziIndustryString?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  revenueRange?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  industry?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  industries?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  allIndustries?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  isDefunct?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  uniqueCompanyNumContacts?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  companyHref?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  isInPreview?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  funding?: Resolver<Maybe<Array<ResolversTypes['FundingModel']>>, ParentType, ContextType>;
  departmentBudgets?: Resolver<Maybe<Array<ResolversTypes['DepartmentBudgetsModel']>>, ParentType, ContextType>;
  certified?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  certificationDate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  icpScore?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  locationsCount?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ultimateParent?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  orgImport?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type HCompaniesDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['HCompaniesData'] = ResolversParentTypes['HCompaniesData']> = ResolversObject<{
  certified?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  companyFax?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  companyID?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  companyPhone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  isDefunct?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isMasked?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isTagged?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  subscribed?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  totalFundingAmountIn000s?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  location?: Resolver<Maybe<ResolversTypes['LocationModel']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type HCompaniesResResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['HCompaniesRes'] = ResolversParentTypes['HCompaniesRes']> = ResolversObject<{
  companiesCount?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  maxResults?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  totalResults?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  facetData?: Resolver<Maybe<ResolversTypes['BasicFacetDataModel']>, ParentType, ContextType>;
  data?: Resolver<Maybe<Array<ResolversTypes['HCompaniesData']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type HUnifiedCompaniesResResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['HUnifiedCompaniesRes'] = ResolversParentTypes['HUnifiedCompaniesRes']> = ResolversObject<{
  resultEntity?: Resolver<Maybe<Array<ResolversTypes['Company']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Resolvers<ContextType = MeshContext> = ResolversObject<{
  Query?: QueryResolvers<ContextType>;
  FundingInvestorModel?: FundingInvestorModelResolvers<ContextType>;
  FundingModel?: FundingModelResolvers<ContextType>;
  DoziIndustryModel?: DoziIndustryModelResolvers<ContextType>;
  UltimateParentModel?: UltimateParentModelResolvers<ContextType>;
  MergerModel?: MergerModelResolvers<ContextType>;
  LocationModel?: LocationModelResolvers<ContextType>;
  SocialMediaParsed?: SocialMediaParsedResolvers<ContextType>;
  SocialMediaModel?: SocialMediaModelResolvers<ContextType>;
  SocialMediaUrlModel?: SocialMediaUrlModelResolvers<ContextType>;
  PrivacyRegulationsModel?: PrivacyRegulationsModelResolvers<ContextType>;
  OrgUniversalTagsModel?: OrgUniversalTagsModelResolvers<ContextType>;
  OwnersValueModel?: OwnersValueModelResolvers<ContextType>;
  OwnersModel?: OwnersModelResolvers<ContextType>;
  ImportedDataModel?: ImportedDataModelResolvers<ContextType>;
  AttributeChipModel?: AttributeChipModelResolvers<ContextType>;
  AttributeChipGroupModel?: AttributeChipGroupModelResolvers<ContextType>;
  NoticeInfoModel?: NoticeInfoModelResolvers<ContextType>;
  ProductModel?: ProductModelResolvers<ContextType>;
  FacetItemModel?: FacetItemModelResolvers<ContextType>;
  FacetDataItem?: FacetDataItemResolvers<ContextType>;
  FacetDataOptions?: FacetDataOptionsResolvers<ContextType>;
  FacetModel?: FacetModelResolvers<ContextType>;
  AdvanceFacetDataModel?: AdvanceFacetDataModelResolvers<ContextType>;
  Facets?: FacetsResolvers<ContextType>;
  BasicFacetItemModel?: BasicFacetItemModelResolvers<ContextType>;
  BasicFacetDataModel?: BasicFacetDataModelResolvers<ContextType>;
  SubUnitTypeInfo?: SubUnitTypeInfoResolvers<ContextType>;
  FamilyTreeModel?: FamilyTreeModelResolvers<ContextType>;
  CompanyHierarchyRes?: CompanyHierarchyResResolvers<ContextType>;
  DepartmentBudgetsModel?: DepartmentBudgetsModelResolvers<ContextType>;
  CompetitorModel?: CompetitorModelResolvers<ContextType>;
  TechnologyAddDropModel?: TechnologyAddDropModelResolvers<ContextType>;
  EmployeeGrowthDataModel?: EmployeeGrowthDataModelResolvers<ContextType>;
  EmployeeGrowthModel?: EmployeeGrowthModelResolvers<ContextType>;
  CompanyDetailsModel?: CompanyDetailsModelResolvers<ContextType>;
  StringScalar?: GraphQLScalarType;
  CompanySearchModel?: CompanySearchModelResolvers<ContextType>;
  CompanySearchResultModel?: CompanySearchResultModelResolvers<ContextType>;
  PersonSearchFacade?: PersonSearchFacadeResolvers<ContextType>;
  ScoopTopics?: ScoopTopicsResolvers<ContextType>;
  ScoopTypes?: ScoopTypesResolvers<ContextType>;
  Scoops?: ScoopsResolvers<ContextType>;
  PredictedPersonDataModel?: PredictedPersonDataModelResolvers<ContextType>;
  PersonSearchModel?: PersonSearchModelResolvers<ContextType>;
  BoardMemberModel?: BoardMemberModelResolvers<ContextType>;
  DegreeModel?: DegreeModelResolvers<ContextType>;
  EducationModel?: EducationModelResolvers<ContextType>;
  EmploymentHistoryModel?: EmploymentHistoryModelResolvers<ContextType>;
  WebReferencesModel?: WebReferencesModelResolvers<ContextType>;
  OrgChartJobFunction?: OrgChartJobFunctionResolvers<ContextType>;
  PersonDetailsModel?: PersonDetailsModelResolvers<ContextType>;
  SocialNetworkModel?: SocialNetworkModelResolvers<ContextType>;
  SocialOrgChartMediaUrlModel?: SocialOrgChartMediaUrlModelResolvers<ContextType>;
  JobFunctions?: JobFunctionsResolvers<ContextType>;
  ListedTypes?: ListedTypesResolvers<ContextType>;
  SolarPseudoOtuputFieldsModel?: SolarPseudoOtuputFieldsModelResolvers<ContextType>;
  OrgChartLevelModel?: OrgChartLevelModelResolvers<ContextType>;
  OrgChartSwimLanesNameDataModel?: OrgChartSwimLanesNameDataModelResolvers<ContextType>;
  OrgChartSwimLanesModel?: OrgChartSwimLanesModelResolvers<ContextType>;
  OrgChart?: OrgChartResolvers<ContextType>;
  PersonCertificationsModel?: PersonCertificationsModelResolvers<ContextType>;
  OrgUniversalTagModel?: OrgUniversalTagModelResolvers<ContextType>;
  PplAtOrgItemModel?: PplAtOrgItemModelResolvers<ContextType>;
  QuickSearchDataRes?: QuickSearchDataResResolvers<ContextType>;
  QuickSearchRes?: QuickSearchResResolvers<ContextType>;
  OnEnterTops?: OnEnterTopsResolvers<ContextType>;
  FundingInvestorSuggestionModel?: FundingInvestorSuggestionModelResolvers<ContextType>;
  FundingSuggestiongModel?: FundingSuggestiongModelResolvers<ContextType>;
  CompanySuggestionDataModel?: CompanySuggestionDataModelResolvers<ContextType>;
  CompanySuggestionModel?: CompanySuggestionModelResolvers<ContextType>;
  ItemSuggestions?: ItemSuggestionsResolvers<ContextType>;
  SearchSuggestions?: SearchSuggestionsResolvers<ContextType>;
  SuggestionsModel?: SuggestionsModelResolvers<ContextType>;
  TrySearchSuggestion?: TrySearchSuggestionResolvers<ContextType>;
  QuickSearchModel?: QuickSearchModelResolvers<ContextType>;
  Company?: CompanyResolvers<ContextType>;
  HCompaniesData?: HCompaniesDataResolvers<ContextType>;
  HCompaniesRes?: HCompaniesResResolvers<ContextType>;
  HUnifiedCompaniesRes?: HUnifiedCompaniesResResolvers<ContextType>;
}>;


import { MeshContext as BaseMeshContext, MeshInstance } from '@graphql-mesh/runtime';

import { InContextSdkMethod } from '@graphql-mesh/types';


    export namespace FacetsSearchTypes {
      export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  StringScalar: any;
};

export type FundingInvestorModel = {
  companyName?: Maybe<Scalars['String']>;
};

export type FundingModel = {
  amountIn000s?: Maybe<Scalars['Float']>;
  date?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  investors?: Maybe<FundingInvestorModel>;
};

export type DoziIndustryModel = {
  displayName?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  isPrimary?: Maybe<Scalars['Boolean']>;
  score?: Maybe<Scalars['Float']>;
  code?: Maybe<Scalars['String']>;
};

export type UltimateParentModel = {
  id?: Maybe<Scalars['Float']>;
  name?: Maybe<Scalars['String']>;
};

export type MergerModel = {
  companyId?: Maybe<Scalars['String']>;
  companyName?: Maybe<Scalars['String']>;
  zoomUrl?: Maybe<Scalars['String']>;
};

export type LocationModel = {
  Street?: Maybe<Scalars['String']>;
  City?: Maybe<Scalars['String']>;
  State?: Maybe<Scalars['String']>;
  Zip?: Maybe<Scalars['String']>;
  street?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  CountryCode?: Maybe<Scalars['String']>;
  countryCode?: Maybe<Scalars['String']>;
};

export type SocialMediaParsed = {
  linkedin?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

export type SocialMediaModel = {
  followerCount?: Maybe<Scalars['Float']>;
  socialNetworkType?: Maybe<Scalars['String']>;
  socialNetworkUrl?: Maybe<Scalars['String']>;
};

export type SocialMediaUrlModel = {
  socialMedia?: Maybe<Array<SocialMediaModel>>;
};

export type PrivacyRegulationsModel = {
  privacyRegulationFlag?: Maybe<Scalars['String']>;
};

export type OrgUniversalTagsModel = {
  tagName?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Boolean']>;
};

export type OwnersValueModel = {
  date?: Maybe<Scalars['Float']>;
  crmEntityId?: Maybe<Scalars['String']>;
  ownerId?: Maybe<Scalars['String']>;
  ownerName?: Maybe<Scalars['String']>;
};

export type OwnersModel = {
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Array<OwnersValueModel>>;
};

export type ImportedDataModel = {
  date?: Maybe<Scalars['Float']>;
  owners?: Maybe<Array<OwnersModel>>;
};

export type AttributeChipModel = {
  displayName?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
  isPrimary?: Maybe<Scalars['Boolean']>;
  chipHref?: Maybe<Scalars['String']>;
  lastSeen?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  count?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
};

export type AttributeChipGroupModel = {
  areaOfStudy?: Maybe<Scalars['String']>;
  degree?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  attributeCol?: Maybe<Array<AttributeChipModel>>;
  isOpen?: Maybe<Scalars['Boolean']>;
  isPrimary?: Maybe<Scalars['Boolean']>;
  order?: Maybe<Scalars['Float']>;
};

export type NoticeInfoModel = {
  hasBeenNotified?: Maybe<Scalars['Boolean']>;
  emailNoticeProvidedDate?: Maybe<Scalars['String']>;
};

export type ProductModel = {
  value?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
};

export type FacetItemModel = {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  count?: Maybe<Scalars['Float']>;
  searchValue?: Maybe<Scalars['String']>;
};

export type FacetDataItem = {
  count?: Maybe<Scalars['Float']>;
  counts?: Maybe<Array<FacetItemModel>>;
};

export type FacetDataOptions = {
  ManagementLevels?: Maybe<FacetDataItem>;
  DEPARTMENT?: Maybe<FacetDataItem>;
  Continents?: Maybe<FacetDataItem>;
  Countries?: Maybe<FacetDataItem>;
  States?: Maybe<FacetDataItem>;
  LOCATION_COMPANY_ID?: Maybe<FacetDataItem>;
};

export type FacetModel = {
  totalResults?: Maybe<Scalars['Float']>;
  maxResults?: Maybe<Scalars['Float']>;
  facetCount?: Maybe<Scalars['Float']>;
  totalRecordsCount?: Maybe<Scalars['Float']>;
  data?: Maybe<FacetDataOptions>;
};

export type AdvanceFacetDataModel = {
  facets?: Maybe<Array<BasicFacetItemModel>>;
};

export type Facets = {
  peopleFacets: FacetModel;
  locationFacets: FacetModel;
  orgChartFacets?: Maybe<AdvanceFacetDataModel>;
};


export type FacetspeopleFacetsArgs = {
  companyId?: InputMaybe<Scalars['String']>;
  facets?: InputMaybe<Scalars['String']>;
  subUnitType?: InputMaybe<Scalars['String']>;
  additionalOptions?: InputMaybe<LocationAdditionalOptions>;
  limits?: InputMaybe<Scalars['Float']>;
  fetchTechAddDropOptions?: InputMaybe<Scalars['Boolean']>;
  showUnmaskedContacts?: InputMaybe<Scalars['Boolean']>;
  packageName?: InputMaybe<Scalars['String']>;
  defaultSearchParams?: InputMaybe<DefaultSearchParams>;
  companyID?: InputMaybe<Scalars['String']>;
};


export type FacetslocationFacetsArgs = {
  companyId?: InputMaybe<Scalars['String']>;
  facets?: InputMaybe<Scalars['String']>;
  subUnitType?: InputMaybe<Scalars['String']>;
  additionalOptions?: InputMaybe<LocationAdditionalOptions>;
  limits?: InputMaybe<Scalars['Float']>;
  fetchTechAddDropOptions?: InputMaybe<Scalars['Boolean']>;
  showUnmaskedContacts?: InputMaybe<Scalars['Boolean']>;
  packageName?: InputMaybe<Scalars['String']>;
  defaultSearchParams?: InputMaybe<DefaultSearchParams>;
  companyID?: InputMaybe<Scalars['String']>;
};


export type FacetsorgChartFacetsArgs = {
  companyId?: InputMaybe<Scalars['String']>;
  facets?: InputMaybe<Scalars['String']>;
  subUnitType?: InputMaybe<Scalars['String']>;
  additionalOptions?: InputMaybe<LocationAdditionalOptions>;
  limits?: InputMaybe<Scalars['Float']>;
  fetchTechAddDropOptions?: InputMaybe<Scalars['Boolean']>;
  showUnmaskedContacts?: InputMaybe<Scalars['Boolean']>;
  packageName?: InputMaybe<Scalars['String']>;
  defaultSearchParams?: InputMaybe<DefaultSearchParams>;
  companyID?: InputMaybe<Scalars['String']>;
};

export type LocationAdditionalOptions = {
  companyPastOrPresent?: InputMaybe<Scalars['Float']>;
  confidenceScoreMax?: InputMaybe<Scalars['Float']>;
  rpp?: InputMaybe<Scalars['Float']>;
  confidenceScoreMin?: InputMaybe<Scalars['Float']>;
  page?: InputMaybe<Scalars['Float']>;
  excludeBoardMembers?: InputMaybe<Scalars['Boolean']>;
  excludeNoCompany?: InputMaybe<Scalars['Boolean']>;
};

export type DefaultSearchParams = {
  facets?: InputMaybe<Scalars['String']>;
  sortBy?: InputMaybe<Scalars['String']>;
  sortOrder?: InputMaybe<Scalars['String']>;
  companyPastOrPresent?: InputMaybe<Scalars['String']>;
  excludeNoCompany?: InputMaybe<Scalars['String']>;
  excludeDefunctCompanies?: InputMaybe<Scalars['Boolean']>;
  returnOnlyBoardMembers?: InputMaybe<Scalars['Boolean']>;
  excludeBoardMembers?: InputMaybe<Scalars['Boolean']>;
  contactRequirements?: InputMaybe<Scalars['String']>;
  confidenceScoreMin?: InputMaybe<Scalars['Float']>;
  confidenceScoreMax?: InputMaybe<Scalars['Float']>;
  isCertified?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Float']>;
  uniqueCompaniesSortBy?: InputMaybe<Scalars['String']>;
  validDateMonthDist?: InputMaybe<Scalars['String']>;
  limits?: InputMaybe<Scalars['Float']>;
  origination?: InputMaybe<Scalars['String']>;
};

export type BasicFacetItemModel = {
  name?: Maybe<Scalars['String']>;
  counts?: Maybe<Array<FacetItemModel>>;
};

export type BasicFacetDataModel = {
  facets?: Maybe<BasicFacetItemModel>;
};

export type SubUnitTypeInfo = {
  type?: Maybe<Scalars['Float']>;
  typeDescription?: Maybe<Scalars['String']>;
};

export type FamilyTreeModel = {
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Float']>;
  name?: Maybe<Scalars['String']>;
  familyNodes?: Maybe<Array<FamilyTreeModel>>;
  checked?: Maybe<Scalars['Boolean']>;
  phone?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  employeeCount?: Maybe<Scalars['Float']>;
  searchByAddressUrl?: Maybe<Scalars['String']>;
  subUnitTypeInfo?: Maybe<SubUnitTypeInfo>;
  locationType?: Maybe<Scalars['String']>;
};

export type CompanyHierarchyRes = {
  familyTree?: Maybe<FamilyTreeModel>;
  ultimateParent?: Maybe<UltimateParentModel>;
};

export type DepartmentBudgetsModel = {
  departmentType?: Maybe<Scalars['String']>;
  budgetAmount?: Maybe<Scalars['Float']>;
};

export type CompetitorModel = {
  companyId?: Maybe<Scalars['Float']>;
  companyName?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  revenue?: Maybe<Scalars['String']>;
  employeeCount?: Maybe<Scalars['Float']>;
};

export type TechnologyAddDropModel = {
  technologyId?: Maybe<Scalars['Float']>;
  activity?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export type EmployeeGrowthDataModel = {
  label?: Maybe<Scalars['String']>;
  employeeCount?: Maybe<Scalars['Float']>;
};

export type EmployeeGrowthModel = {
  oneYearEmployeeGrowthRate?: Maybe<Scalars['Float']>;
  twoYearEmployeeGrowthRate?: Maybe<Scalars['Float']>;
  employeeGrowthData?: Maybe<Array<EmployeeGrowthDataModel>>;
};

export type CompanyDetailsModel = {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  tagged?: Maybe<Scalars['Boolean']>;
  masked?: Maybe<Scalars['Boolean']>;
  subscribed?: Maybe<Scalars['Boolean']>;
  exported?: Maybe<Scalars['Boolean']>;
  domain?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['String']>;
  fax?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  ticker?: Maybe<Scalars['String']>;
  crmEntityId?: Maybe<Scalars['String']>;
  revenue?: Maybe<Scalars['String']>;
  allIndustries?: Maybe<Array<Scalars['String']>>;
  isDefunct?: Maybe<Scalars['Boolean']>;
  uniqueCompanyNumContacts?: Maybe<Scalars['Float']>;
  companyHref?: Maybe<Scalars['String']>;
  isInPreview?: Maybe<Scalars['Boolean']>;
  funding?: Maybe<Array<FundingModel>>;
  certified?: Maybe<Scalars['Boolean']>;
  certificationDate?: Maybe<Scalars['String']>;
  icpScore?: Maybe<Scalars['String']>;
  locationsCount?: Maybe<Scalars['String']>;
  orgImport?: Maybe<Scalars['String']>;
  entityId?: Maybe<Scalars['String']>;
  address?: Maybe<LocationModel>;
  displayAddress?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  NAICS?: Maybe<Array<Scalars['Float']>>;
  SIC?: Maybe<Array<Scalars['Float']>>;
  ranking?: Maybe<Array<Scalars['String']>>;
  employeeCount?: Maybe<Scalars['Float']>;
  employeeCountRange?: Maybe<Scalars['String']>;
  revenueRange?: Maybe<Scalars['String']>;
  companyAttributes?: Maybe<Array<AttributeChipGroupModel>>;
  techAttributes?: Maybe<Array<AttributeChipGroupModel>>;
  doziIndustry?: Maybe<Array<DoziIndustryModel>>;
  topLevelIndustry?: Maybe<Array<Scalars['String']>>;
  industryLabel?: Maybe<Array<DoziIndustryModel>>;
  doziIndustryString?: Maybe<Scalars['String']>;
  industry?: Maybe<Array<Scalars['String']>>;
  industryV2?: Maybe<Array<Scalars['String']>>;
  industryForBasic?: Maybe<Array<Scalars['String']>>;
  topIndustry?: Maybe<Array<Scalars['String']>>;
  industries?: Maybe<Array<AttributeChipModel>>;
  industriesAsAttributes?: Maybe<Array<AttributeChipModel>>;
  basicIndustries?: Maybe<Array<Scalars['String']>>;
  merger?: Maybe<Array<MergerModel>>;
  alternateNames?: Maybe<Array<Scalars['String']>>;
  orgChartFacetData?: Maybe<FacetDataOptions>;
  importedData?: Maybe<ImportedDataModel>;
  socialUrls?: Maybe<SocialMediaUrlModel>;
  socialUrlsParsed?: Maybe<SocialMediaParsed>;
  followerCountParsed?: Maybe<SocialMediaParsed>;
  foundedYear?: Maybe<Scalars['Float']>;
  alexaRank?: Maybe<Scalars['Float']>;
  departmentBudgets?: Maybe<Array<DepartmentBudgetsModel>>;
  companyEmployeeGrowth?: Maybe<EmployeeGrowthModel>;
  ultimateParent?: Maybe<UltimateParentModel>;
  basicUltimateParent?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  products?: Maybe<Array<ProductModel>>;
  technologyAddDrop?: Maybe<Array<TechnologyAddDropModel>>;
  competitors?: Maybe<Array<CompetitorModel>>;
  companyHierarchy?: Maybe<CompanyHierarchyRes>;
};


export type CompanyDetailsModelindustryArgs = {
  companyID?: InputMaybe<Scalars['String']>;
  fetchTechAddDropOptions?: InputMaybe<Scalars['Boolean']>;
  showUnmaskedContacts?: InputMaybe<Scalars['Boolean']>;
  defaultSearchParams?: InputMaybe<DefaultSearchParams>;
  packageName?: InputMaybe<Scalars['String']>;
  buyingCommittee?: InputMaybe<Scalars['String']>;
  companyPastOrPresent?: InputMaybe<Scalars['StringScalar']>;
  contactRequirements?: InputMaybe<Scalars['StringScalar']>;
  doziIndustry?: InputMaybe<Scalars['StringScalar']>;
  excludeDefunctCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeNoCompany?: InputMaybe<Scalars['StringScalar']>;
  isCertified?: InputMaybe<Scalars['StringScalar']>;
  sortBy?: InputMaybe<Scalars['StringScalar']>;
  sortOrder?: InputMaybe<Scalars['StringScalar']>;
  nnNegation?: InputMaybe<Scalars['StringScalar']>;
  nnQueryId?: InputMaybe<Scalars['StringScalar']>;
  nnStartDate?: InputMaybe<Scalars['StringScalar']>;
  nnEndDate?: InputMaybe<Scalars['StringScalar']>;
  companyId?: InputMaybe<Scalars['StringScalar']>;
  companyIds?: InputMaybe<Scalars['StringScalar']>;
  revenueMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  revenueMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMax?: InputMaybe<Scalars['StringScalar']>;
  techAttributesAddedDropped?: InputMaybe<TechAttributesAddedDropped>;
  techAttributeNotUsedAnd?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMin?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMax?: InputMaybe<Scalars['StringScalar']>;
  locationCountMin?: InputMaybe<Scalars['StringScalar']>;
  locationCountMax?: InputMaybe<Scalars['StringScalar']>;
  metroAreas?: InputMaybe<Scalars['StringScalar']>;
  doziPrimaryIndustry?: InputMaybe<Scalars['StringScalar']>;
  hqLocationAreaCodes?: InputMaybe<Scalars['StringScalar']>;
  departmentEmployeeCounts?: InputMaybe<DepartmentEmployeeCounts>;
  departmentBudgets?: InputMaybe<DepartmentBudgets>;
  street?: InputMaybe<Scalars['StringScalar']>;
  locationType?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  negateScope?: InputMaybe<Scalars['Boolean']>;
  itBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  itBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  anyFundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  anyFundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  fundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  anyFundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  allInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  recentInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  state?: InputMaybe<Scalars['StringScalar']>;
  metroRegion?: InputMaybe<Scalars['StringScalar']>;
  country?: InputMaybe<Scalars['StringScalar']>;
  continent?: InputMaybe<Scalars['StringScalar']>;
  companyType?: InputMaybe<Scalars['StringScalar']>;
  companyName?: InputMaybe<Scalars['StringScalar']>;
  companyDomainNames?: InputMaybe<Scalars['StringScalar']>;
  companyDesc?: InputMaybe<Scalars['StringScalar']>;
  isPublic?: InputMaybe<Scalars['StringScalar']>;
  location?: InputMaybe<Scalars['StringScalar']>;
  zipCode?: InputMaybe<Scalars['StringScalar']>;
  radiusMiles?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTag?: InputMaybe<Scalars['StringScalar']>;
  industryKeywordsMulti?: InputMaybe<Scalars['StringScalar']>;
  primaryIndustriesOnly?: InputMaybe<Scalars['StringScalar']>;
  industryClassification?: InputMaybe<Scalars['StringScalar']>;
  industryKeywords?: InputMaybe<Scalars['StringScalar']>;
  industryCodeList?: InputMaybe<Scalars['StringScalar']>;
  industryCode?: InputMaybe<Scalars['StringScalar']>;
  industryCodeAnd?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  revenueClassification?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassification?: InputMaybe<Scalars['StringScalar']>;
  companyRanking?: InputMaybe<Scalars['StringScalar']>;
  pubPrivateSectors?: InputMaybe<Scalars['StringScalar']>;
  locationSearchType?: InputMaybe<Scalars['StringScalar']>;
  fundingMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  fundingMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAnd?: InputMaybe<Scalars['StringScalar']>;
  allInvestors?: InputMaybe<Scalars['StringScalar']>;
  recentInvestors?: InputMaybe<Scalars['StringScalar']>;
  allFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  recentFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  certificationStartDate?: InputMaybe<Scalars['StringScalar']>;
  certificationEndDate?: InputMaybe<Scalars['StringScalar']>;
  streetLineTwo?: InputMaybe<Scalars['StringScalar']>;
  hashtagField?: InputMaybe<Scalars['StringScalar']>;
  fullName?: InputMaybe<Scalars['StringScalar']>;
  gender?: InputMaybe<Scalars['StringScalar']>;
  personIds?: InputMaybe<Scalars['StringScalar']>;
  personID?: InputMaybe<Scalars['StringScalar']>;
  personId?: InputMaybe<Scalars['StringScalar']>;
  hasCanadianEmail?: InputMaybe<Scalars['StringScalar']>;
  companyLocationIds?: InputMaybe<Scalars['StringScalar']>;
  emailAddress?: InputMaybe<Scalars['StringScalar']>;
  firstName?: InputMaybe<Scalars['StringScalar']>;
  lastName?: InputMaybe<Scalars['StringScalar']>;
  middleInitial?: InputMaybe<Scalars['StringScalar']>;
  excludedPersonTitle?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  titleCertification?: InputMaybe<Scalars['StringScalar']>;
  personTitle?: InputMaybe<Scalars['StringScalar']>;
  titleSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleSeniority?: InputMaybe<Scalars['StringScalar']>;
  degree?: InputMaybe<Scalars['StringScalar']>;
  school?: InputMaybe<Scalars['StringScalar']>;
  companyDomainName?: InputMaybe<Scalars['StringScalar']>;
  validDateMonthDist?: InputMaybe<Scalars['StringScalar']>;
  zoomJoinsAccount?: InputMaybe<ZoomJoinsAccount>;
  orgJoinsAccount?: InputMaybe<OrgJoinsAccount>;
  titleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeOrgExportedCompanies?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgExportedContacts?: InputMaybe<Scalars['StringScalar']>;
  excludeCompanyTags?: InputMaybe<Scalars['StringScalar']>;
  personWebReferences?: InputMaybe<Scalars['StringScalar']>;
  personWebReferencesURL?: InputMaybe<Scalars['StringScalar']>;
  departments?: InputMaybe<Scalars['StringScalar']>;
  jobFunctions?: InputMaybe<Scalars['StringScalar']>;
  isEU?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMin?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMax?: InputMaybe<Scalars['StringScalar']>;
  hasLocationId?: InputMaybe<Scalars['StringScalar']>;
  hasPersonalEmail?: InputMaybe<Scalars['StringScalar']>;
  hasMobilePhone?: InputMaybe<Scalars['StringScalar']>;
  hasEmail?: InputMaybe<Scalars['StringScalar']>;
  hasPhone?: InputMaybe<Scalars['StringScalar']>;
  hasDirectPhone?: InputMaybe<Scalars['StringScalar']>;
  hasCompanyPhone?: InputMaybe<Scalars['StringScalar']>;
  hasTitle?: InputMaybe<Scalars['StringScalar']>;
  hasBeenNotified?: InputMaybe<Scalars['StringScalar']>;
  hasDepartment?: InputMaybe<Scalars['StringScalar']>;
  hasJobFunction?: InputMaybe<Scalars['StringScalar']>;
  hasSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgChartTier?: InputMaybe<Scalars['StringScalar']>;
  orgChartTier?: InputMaybe<Scalars['StringScalar']>;
  personCreationStartDate?: InputMaybe<Scalars['StringScalar']>;
  positionStartDate?: InputMaybe<Scalars['StringScalar']>;
  personCreationEndDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedStartDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedEndDate?: InputMaybe<Scalars['StringScalar']>;
  executivesOnly?: InputMaybe<Scalars['StringScalar']>;
  returnOnlyBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  excludeBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  page?: InputMaybe<Scalars['Float']>;
  rpp?: InputMaybe<Scalars['StringScalar']>;
  facetOptions?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  techAttributeTagNotUsedAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  findRecommendedContacts?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompanies?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesPage?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesRpp?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesSortBy?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesContacts?: InputMaybe<Scalars['StringScalar']>;
  solrPseudoOutputFields?: InputMaybe<Scalars['StringScalar']>;
  scoopEndDate?: InputMaybe<Scalars['StringScalar']>;
  scoopStartDate?: InputMaybe<Scalars['StringScalar']>;
  updatedSinceCreation?: InputMaybe<Scalars['StringScalar']>;
  scoopTypes?: InputMaybe<Scalars['StringScalar']>;
  scoopTopics?: InputMaybe<Scalars['StringScalar']>;
  scoopDepartments?: InputMaybe<Scalars['StringScalar']>;
  scoopDesc?: InputMaybe<Scalars['StringScalar']>;
  scoopIds?: InputMaybe<Scalars['StringScalar']>;
  scoringOptions?: InputMaybe<Scalars['StringScalar']>;
  masked?: InputMaybe<Scalars['Boolean']>;
  subscribed?: InputMaybe<Scalars['Boolean']>;
  orgImported?: InputMaybe<Scalars['Boolean']>;
  sessionToken?: InputMaybe<Scalars['StringScalar']>;
  definedUniverse?: InputMaybe<Scalars['StringScalar']>;
  outputFieldOptions?: InputMaybe<Scalars['StringScalar']>;
  ignoreDefaultFields?: InputMaybe<Scalars['StringScalar']>;
  includeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPersonOnlyMe?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedContacts?: InputMaybe<Scalars['Boolean']>;
  pTag?: InputMaybe<Scalars['StringScalar']>;
  cTag?: InputMaybe<Scalars['StringScalar']>;
  excludePeopleTags?: InputMaybe<Scalars['StringScalar']>;
  includeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAssociatedDeals?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeAllOrgImportLeads?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOptout?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  excludeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  orgImportOpportunities?: InputMaybe<Array<OrgImportOpportunities>>;
  includeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  parsingOptions?: InputMaybe<ParsingOptions>;
  source?: InputMaybe<Scalars['String']>;
  addressVerificationStatusList?: InputMaybe<Scalars['String']>;
  parentId?: InputMaybe<Scalars['String']>;
  ultimateParentId?: InputMaybe<Scalars['String']>;
  subUnitType?: InputMaybe<Scalars['String']>;
  isLocationHierarchy?: InputMaybe<Scalars['Boolean']>;
};


export type CompanyDetailsModelcompanyHierarchyArgs = {
  companyID?: InputMaybe<Scalars['String']>;
  fetchTechAddDropOptions?: InputMaybe<Scalars['Boolean']>;
  showUnmaskedContacts?: InputMaybe<Scalars['Boolean']>;
  defaultSearchParams?: InputMaybe<DefaultSearchParams>;
  packageName?: InputMaybe<Scalars['String']>;
  buyingCommittee?: InputMaybe<Scalars['String']>;
  companyPastOrPresent?: InputMaybe<Scalars['StringScalar']>;
  contactRequirements?: InputMaybe<Scalars['StringScalar']>;
  doziIndustry?: InputMaybe<Scalars['StringScalar']>;
  excludeDefunctCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeNoCompany?: InputMaybe<Scalars['StringScalar']>;
  isCertified?: InputMaybe<Scalars['StringScalar']>;
  sortBy?: InputMaybe<Scalars['StringScalar']>;
  sortOrder?: InputMaybe<Scalars['StringScalar']>;
  nnNegation?: InputMaybe<Scalars['StringScalar']>;
  nnQueryId?: InputMaybe<Scalars['StringScalar']>;
  nnStartDate?: InputMaybe<Scalars['StringScalar']>;
  nnEndDate?: InputMaybe<Scalars['StringScalar']>;
  companyId?: InputMaybe<Scalars['StringScalar']>;
  companyIds?: InputMaybe<Scalars['StringScalar']>;
  revenueMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  revenueMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMax?: InputMaybe<Scalars['StringScalar']>;
  techAttributesAddedDropped?: InputMaybe<TechAttributesAddedDropped>;
  techAttributeNotUsedAnd?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMin?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMax?: InputMaybe<Scalars['StringScalar']>;
  locationCountMin?: InputMaybe<Scalars['StringScalar']>;
  locationCountMax?: InputMaybe<Scalars['StringScalar']>;
  metroAreas?: InputMaybe<Scalars['StringScalar']>;
  doziPrimaryIndustry?: InputMaybe<Scalars['StringScalar']>;
  hqLocationAreaCodes?: InputMaybe<Scalars['StringScalar']>;
  departmentEmployeeCounts?: InputMaybe<DepartmentEmployeeCounts>;
  departmentBudgets?: InputMaybe<DepartmentBudgets>;
  street?: InputMaybe<Scalars['StringScalar']>;
  locationType?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  negateScope?: InputMaybe<Scalars['Boolean']>;
  itBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  itBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  anyFundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  anyFundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  fundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  anyFundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  allInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  recentInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  state?: InputMaybe<Scalars['StringScalar']>;
  metroRegion?: InputMaybe<Scalars['StringScalar']>;
  country?: InputMaybe<Scalars['StringScalar']>;
  continent?: InputMaybe<Scalars['StringScalar']>;
  companyType?: InputMaybe<Scalars['StringScalar']>;
  companyName?: InputMaybe<Scalars['StringScalar']>;
  companyDomainNames?: InputMaybe<Scalars['StringScalar']>;
  companyDesc?: InputMaybe<Scalars['StringScalar']>;
  isPublic?: InputMaybe<Scalars['StringScalar']>;
  location?: InputMaybe<Scalars['StringScalar']>;
  zipCode?: InputMaybe<Scalars['StringScalar']>;
  radiusMiles?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTag?: InputMaybe<Scalars['StringScalar']>;
  industryKeywordsMulti?: InputMaybe<Scalars['StringScalar']>;
  primaryIndustriesOnly?: InputMaybe<Scalars['StringScalar']>;
  industryClassification?: InputMaybe<Scalars['StringScalar']>;
  industryKeywords?: InputMaybe<Scalars['StringScalar']>;
  industryCodeList?: InputMaybe<Scalars['StringScalar']>;
  industryCode?: InputMaybe<Scalars['StringScalar']>;
  industryCodeAnd?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  revenueClassification?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassification?: InputMaybe<Scalars['StringScalar']>;
  companyRanking?: InputMaybe<Scalars['StringScalar']>;
  pubPrivateSectors?: InputMaybe<Scalars['StringScalar']>;
  locationSearchType?: InputMaybe<Scalars['StringScalar']>;
  fundingMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  fundingMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAnd?: InputMaybe<Scalars['StringScalar']>;
  allInvestors?: InputMaybe<Scalars['StringScalar']>;
  recentInvestors?: InputMaybe<Scalars['StringScalar']>;
  allFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  recentFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  certificationStartDate?: InputMaybe<Scalars['StringScalar']>;
  certificationEndDate?: InputMaybe<Scalars['StringScalar']>;
  streetLineTwo?: InputMaybe<Scalars['StringScalar']>;
  hashtagField?: InputMaybe<Scalars['StringScalar']>;
  fullName?: InputMaybe<Scalars['StringScalar']>;
  gender?: InputMaybe<Scalars['StringScalar']>;
  personIds?: InputMaybe<Scalars['StringScalar']>;
  personID?: InputMaybe<Scalars['StringScalar']>;
  personId?: InputMaybe<Scalars['StringScalar']>;
  hasCanadianEmail?: InputMaybe<Scalars['StringScalar']>;
  companyLocationIds?: InputMaybe<Scalars['StringScalar']>;
  emailAddress?: InputMaybe<Scalars['StringScalar']>;
  firstName?: InputMaybe<Scalars['StringScalar']>;
  lastName?: InputMaybe<Scalars['StringScalar']>;
  middleInitial?: InputMaybe<Scalars['StringScalar']>;
  excludedPersonTitle?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  titleCertification?: InputMaybe<Scalars['StringScalar']>;
  personTitle?: InputMaybe<Scalars['StringScalar']>;
  titleSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleSeniority?: InputMaybe<Scalars['StringScalar']>;
  degree?: InputMaybe<Scalars['StringScalar']>;
  school?: InputMaybe<Scalars['StringScalar']>;
  companyDomainName?: InputMaybe<Scalars['StringScalar']>;
  validDateMonthDist?: InputMaybe<Scalars['StringScalar']>;
  zoomJoinsAccount?: InputMaybe<ZoomJoinsAccount>;
  orgJoinsAccount?: InputMaybe<OrgJoinsAccount>;
  titleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeOrgExportedCompanies?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgExportedContacts?: InputMaybe<Scalars['StringScalar']>;
  excludeCompanyTags?: InputMaybe<Scalars['StringScalar']>;
  personWebReferences?: InputMaybe<Scalars['StringScalar']>;
  personWebReferencesURL?: InputMaybe<Scalars['StringScalar']>;
  departments?: InputMaybe<Scalars['StringScalar']>;
  jobFunctions?: InputMaybe<Scalars['StringScalar']>;
  isEU?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMin?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMax?: InputMaybe<Scalars['StringScalar']>;
  hasLocationId?: InputMaybe<Scalars['StringScalar']>;
  hasPersonalEmail?: InputMaybe<Scalars['StringScalar']>;
  hasMobilePhone?: InputMaybe<Scalars['StringScalar']>;
  hasEmail?: InputMaybe<Scalars['StringScalar']>;
  hasPhone?: InputMaybe<Scalars['StringScalar']>;
  hasDirectPhone?: InputMaybe<Scalars['StringScalar']>;
  hasCompanyPhone?: InputMaybe<Scalars['StringScalar']>;
  hasTitle?: InputMaybe<Scalars['StringScalar']>;
  hasBeenNotified?: InputMaybe<Scalars['StringScalar']>;
  hasDepartment?: InputMaybe<Scalars['StringScalar']>;
  hasJobFunction?: InputMaybe<Scalars['StringScalar']>;
  hasSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgChartTier?: InputMaybe<Scalars['StringScalar']>;
  orgChartTier?: InputMaybe<Scalars['StringScalar']>;
  personCreationStartDate?: InputMaybe<Scalars['StringScalar']>;
  positionStartDate?: InputMaybe<Scalars['StringScalar']>;
  personCreationEndDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedStartDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedEndDate?: InputMaybe<Scalars['StringScalar']>;
  executivesOnly?: InputMaybe<Scalars['StringScalar']>;
  returnOnlyBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  excludeBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  page?: InputMaybe<Scalars['Float']>;
  rpp?: InputMaybe<Scalars['StringScalar']>;
  facetOptions?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  techAttributeTagNotUsedAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  findRecommendedContacts?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompanies?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesPage?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesRpp?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesSortBy?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesContacts?: InputMaybe<Scalars['StringScalar']>;
  solrPseudoOutputFields?: InputMaybe<Scalars['StringScalar']>;
  scoopEndDate?: InputMaybe<Scalars['StringScalar']>;
  scoopStartDate?: InputMaybe<Scalars['StringScalar']>;
  updatedSinceCreation?: InputMaybe<Scalars['StringScalar']>;
  scoopTypes?: InputMaybe<Scalars['StringScalar']>;
  scoopTopics?: InputMaybe<Scalars['StringScalar']>;
  scoopDepartments?: InputMaybe<Scalars['StringScalar']>;
  scoopDesc?: InputMaybe<Scalars['StringScalar']>;
  scoopIds?: InputMaybe<Scalars['StringScalar']>;
  scoringOptions?: InputMaybe<Scalars['StringScalar']>;
  masked?: InputMaybe<Scalars['Boolean']>;
  subscribed?: InputMaybe<Scalars['Boolean']>;
  orgImported?: InputMaybe<Scalars['Boolean']>;
  sessionToken?: InputMaybe<Scalars['StringScalar']>;
  definedUniverse?: InputMaybe<Scalars['StringScalar']>;
  outputFieldOptions?: InputMaybe<Scalars['StringScalar']>;
  ignoreDefaultFields?: InputMaybe<Scalars['StringScalar']>;
  includeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPersonOnlyMe?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedContacts?: InputMaybe<Scalars['Boolean']>;
  pTag?: InputMaybe<Scalars['StringScalar']>;
  cTag?: InputMaybe<Scalars['StringScalar']>;
  excludePeopleTags?: InputMaybe<Scalars['StringScalar']>;
  includeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAssociatedDeals?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeAllOrgImportLeads?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOptout?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  excludeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  orgImportOpportunities?: InputMaybe<Array<OrgImportOpportunities>>;
  includeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  parsingOptions?: InputMaybe<ParsingOptions>;
  source?: InputMaybe<Scalars['String']>;
  addressVerificationStatusList?: InputMaybe<Scalars['String']>;
  parentId?: InputMaybe<Scalars['String']>;
  ultimateParentId?: InputMaybe<Scalars['String']>;
  subUnitType?: InputMaybe<Scalars['String']>;
  isLocationHierarchy?: InputMaybe<Scalars['Boolean']>;
};

export type TechAttributesAddedDropped = {
  techAttributesAddedDropped?: InputMaybe<TechAttributeAddDropGroup>;
};

export type TechAttributeAddDropGroup = {
  techAttributeAddDrop?: InputMaybe<Array<TechAttributeAddDrop>>;
};

export type TechAttributeAddDrop = {
  startDate?: InputMaybe<Scalars['String']>;
  endDate?: InputMaybe<Scalars['String']>;
  techAttributes?: InputMaybe<Scalars['String']>;
  addDropFlag?: InputMaybe<Scalars['String']>;
};

export type DepartmentEmployeeCounts = {
  departmentEmployeeCount?: InputMaybe<Array<DepartmentEmployeeCount>>;
};

export type DepartmentEmployeeCount = {
  departmentName?: InputMaybe<Scalars['StringScalar']>;
  departmentCountMin?: InputMaybe<Scalars['StringScalar']>;
  departmentCountMax?: InputMaybe<Scalars['StringScalar']>;
};

export type DepartmentBudgets = {
  departmentBudget?: InputMaybe<Array<DepartmentBudgetsFilter>>;
};

export type DepartmentBudgetsFilter = {
  departmentName?: InputMaybe<Scalars['StringScalar']>;
  departmentBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  departmentBudgetMax?: InputMaybe<Scalars['StringScalar']>;
};

export type ZoomJoinsAccount = {
  departmentName?: InputMaybe<Scalars['String']>;
  departmentCountMin?: InputMaybe<Scalars['String']>;
  departmentCountMax?: InputMaybe<Scalars['String']>;
};

export type OrgJoinsAccount = {
  action?: InputMaybe<Scalars['String']>;
  origination?: InputMaybe<Scalars['String']>;
  negation?: InputMaybe<Scalars['Boolean']>;
  reload?: InputMaybe<Scalars['String']>;
  applyCriteria?: InputMaybe<Scalars['Boolean']>;
  owners?: InputMaybe<Array<Scalars['String']>>;
  universalTag?: InputMaybe<Scalars['String']>;
  rxPeriod?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<Array<Scalars['String']>>;
  leadStatus?: InputMaybe<Array<Scalars['String']>>;
};

export type AdvanceOrgImportFilters = {
  salesforce?: InputMaybe<Array<Scalars['StringScalar']>>;
  hubspot?: InputMaybe<Array<Scalars['StringScalar']>>;
  marketo?: InputMaybe<Array<Scalars['StringScalar']>>;
};

export type AdvanceAllOrgImportsFilters = {
  salesforce?: InputMaybe<Scalars['Boolean']>;
  hubspot?: InputMaybe<Scalars['Boolean']>;
  marketo?: InputMaybe<Scalars['Boolean']>;
};

export type OrgImportOpportunities = {
  createDateStart?: InputMaybe<Scalars['StringScalar']>;
  createDateEnd?: InputMaybe<Scalars['StringScalar']>;
  closeDateEnd?: InputMaybe<Scalars['StringScalar']>;
  closeDateStart?: InputMaybe<Scalars['StringScalar']>;
  platform?: InputMaybe<Scalars['StringScalar']>;
  includeAllOrgImportOpportunitiesOwners?: InputMaybe<ImportsPlatformModel>;
};

export type ImportsPlatformModel = {
  platform?: InputMaybe<Scalars['StringScalar']>;
};

export type ParsingOptions = {
  industry?: InputMaybe<Scalars['String']>;
};

export type CompanySearchModel = {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  tagged?: Maybe<Scalars['Boolean']>;
  masked?: Maybe<Scalars['Boolean']>;
  subscribed?: Maybe<Scalars['Boolean']>;
  exported?: Maybe<Scalars['Boolean']>;
  domain?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['String']>;
  fax?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  ticker?: Maybe<Scalars['String']>;
  crmEntityId?: Maybe<Scalars['String']>;
  revenue?: Maybe<Scalars['String']>;
  allIndustries?: Maybe<Array<Scalars['String']>>;
  isDefunct?: Maybe<Scalars['Boolean']>;
  uniqueCompanyNumContacts?: Maybe<Scalars['Float']>;
  companyHref?: Maybe<Scalars['String']>;
  isInPreview?: Maybe<Scalars['Boolean']>;
  funding?: Maybe<Array<FundingModel>>;
  certified?: Maybe<Scalars['Boolean']>;
  certificationDate?: Maybe<Scalars['String']>;
  icpScore?: Maybe<Scalars['String']>;
  locationsCount?: Maybe<Scalars['String']>;
  orgImport?: Maybe<Scalars['String']>;
  address?: Maybe<LocationModel>;
  displayAddress?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  employeeCount?: Maybe<Scalars['Float']>;
  employeeCountRange?: Maybe<Scalars['String']>;
  revenueRange?: Maybe<Scalars['String']>;
  doziIndustry?: Maybe<Array<DoziIndustryModel>>;
  topLevelIndustry?: Maybe<Array<Scalars['String']>>;
  doziIndustryString?: Maybe<Scalars['String']>;
  industry?: Maybe<Array<Scalars['String']>>;
  basicIndustries?: Maybe<Array<Scalars['String']>>;
  industryV2?: Maybe<Array<Scalars['String']>>;
  industries?: Maybe<Array<AttributeChipModel>>;
  industriesAsAttributes?: Maybe<Array<AttributeChipModel>>;
  ultimateParent?: Maybe<UltimateParentModel>;
  departmentBudgets?: Maybe<Array<DepartmentBudgetsModel>>;
  type?: Maybe<Scalars['String']>;
  companyRevenueIn000s?: Maybe<Scalars['Float']>;
  employeesRange?: Maybe<Scalars['String']>;
  locationType?: Maybe<Scalars['String']>;
  orgUniversalTagged?: Maybe<Array<OrgUniversalTagsModel>>;
  universalTagged?: Maybe<Array<Scalars['String']>>;
};

export type CompanySearchResultModel = {
  data?: Maybe<Array<CompanySearchModel>>;
  facetData?: Maybe<AdvanceFacetDataModel>;
  maxResults?: Maybe<Scalars['Float']>;
  totalResults?: Maybe<Scalars['Float']>;
};

export type PersonSearchFacade = {
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  personId?: Maybe<Scalars['String']>;
};

export type ScoopTopics = {
  scoopTopic?: Maybe<Array<Scalars['String']>>;
};

export type ScoopTypes = {
  scoopType?: Maybe<Array<Scalars['String']>>;
};

export type Scoops = {
  id?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
  company?: Maybe<CompanyDetailsModel>;
  description?: Maybe<Scalars['String']>;
  topics?: Maybe<ScoopTopics>;
  types?: Maybe<ScoopTypes>;
  originalPublishedDate?: Maybe<Scalars['String']>;
  publishedDate?: Maybe<Scalars['String']>;
  updatedText?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  urlText?: Maybe<Scalars['String']>;
  personRecords?: Maybe<Array<PersonSearchFacade>>;
  imageUrl?: Maybe<Scalars['String']>;
  orgImport?: Maybe<Scalars['String']>;
};

export type PredictedPersonDataModel = {
  guessedEmail?: Maybe<Scalars['String']>;
  companyId?: Maybe<Scalars['String']>;
  companyName?: Maybe<Scalars['String']>;
};

export type PersonSearchModel = {
  totalResults?: Maybe<Scalars['Float']>;
  maxResults?: Maybe<Scalars['Float']>;
  companiesCount?: Maybe<Scalars['Float']>;
  numUniqueCompanies?: Maybe<Scalars['Float']>;
  predictedData?: Maybe<PredictedPersonDataModel>;
  data?: Maybe<Array<PplAtOrgItemModel>>;
};


export type PersonSearchModelpredictedDataArgs = {
  personID?: InputMaybe<Scalars['StringScalar']>;
  jobTitle?: InputMaybe<Scalars['String']>;
  packageName?: InputMaybe<Scalars['String']>;
  isTopExecutives?: InputMaybe<Scalars['Boolean']>;
  companyID?: InputMaybe<Scalars['String']>;
  fetchTechAddDropOptions?: InputMaybe<Scalars['Boolean']>;
  showUnmaskedContacts?: InputMaybe<Scalars['Boolean']>;
  defaultSearchParams?: InputMaybe<DefaultSearchParams>;
  buyingCommittee?: InputMaybe<Scalars['String']>;
  companyPastOrPresent?: InputMaybe<Scalars['StringScalar']>;
  contactRequirements?: InputMaybe<Scalars['StringScalar']>;
  doziIndustry?: InputMaybe<Scalars['StringScalar']>;
  excludeDefunctCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeNoCompany?: InputMaybe<Scalars['StringScalar']>;
  isCertified?: InputMaybe<Scalars['StringScalar']>;
  sortBy?: InputMaybe<Scalars['StringScalar']>;
  sortOrder?: InputMaybe<Scalars['StringScalar']>;
  nnNegation?: InputMaybe<Scalars['StringScalar']>;
  nnQueryId?: InputMaybe<Scalars['StringScalar']>;
  nnStartDate?: InputMaybe<Scalars['StringScalar']>;
  nnEndDate?: InputMaybe<Scalars['StringScalar']>;
  companyId?: InputMaybe<Scalars['StringScalar']>;
  companyIds?: InputMaybe<Scalars['StringScalar']>;
  revenueMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  revenueMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMax?: InputMaybe<Scalars['StringScalar']>;
  techAttributesAddedDropped?: InputMaybe<TechAttributesAddedDropped>;
  techAttributeNotUsedAnd?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMin?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMax?: InputMaybe<Scalars['StringScalar']>;
  locationCountMin?: InputMaybe<Scalars['StringScalar']>;
  locationCountMax?: InputMaybe<Scalars['StringScalar']>;
  metroAreas?: InputMaybe<Scalars['StringScalar']>;
  doziPrimaryIndustry?: InputMaybe<Scalars['StringScalar']>;
  hqLocationAreaCodes?: InputMaybe<Scalars['StringScalar']>;
  departmentEmployeeCounts?: InputMaybe<DepartmentEmployeeCounts>;
  departmentBudgets?: InputMaybe<DepartmentBudgets>;
  street?: InputMaybe<Scalars['StringScalar']>;
  locationType?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  negateScope?: InputMaybe<Scalars['Boolean']>;
  itBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  itBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  anyFundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  anyFundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  fundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  anyFundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  allInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  recentInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  state?: InputMaybe<Scalars['StringScalar']>;
  metroRegion?: InputMaybe<Scalars['StringScalar']>;
  country?: InputMaybe<Scalars['StringScalar']>;
  continent?: InputMaybe<Scalars['StringScalar']>;
  companyType?: InputMaybe<Scalars['StringScalar']>;
  companyName?: InputMaybe<Scalars['StringScalar']>;
  companyDomainNames?: InputMaybe<Scalars['StringScalar']>;
  companyDesc?: InputMaybe<Scalars['StringScalar']>;
  isPublic?: InputMaybe<Scalars['StringScalar']>;
  location?: InputMaybe<Scalars['StringScalar']>;
  zipCode?: InputMaybe<Scalars['StringScalar']>;
  radiusMiles?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTag?: InputMaybe<Scalars['StringScalar']>;
  industryKeywordsMulti?: InputMaybe<Scalars['StringScalar']>;
  primaryIndustriesOnly?: InputMaybe<Scalars['StringScalar']>;
  industryClassification?: InputMaybe<Scalars['StringScalar']>;
  industryKeywords?: InputMaybe<Scalars['StringScalar']>;
  industryCodeList?: InputMaybe<Scalars['StringScalar']>;
  industryCode?: InputMaybe<Scalars['StringScalar']>;
  industryCodeAnd?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  revenueClassification?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassification?: InputMaybe<Scalars['StringScalar']>;
  companyRanking?: InputMaybe<Scalars['StringScalar']>;
  pubPrivateSectors?: InputMaybe<Scalars['StringScalar']>;
  locationSearchType?: InputMaybe<Scalars['StringScalar']>;
  fundingMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  fundingMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAnd?: InputMaybe<Scalars['StringScalar']>;
  allInvestors?: InputMaybe<Scalars['StringScalar']>;
  recentInvestors?: InputMaybe<Scalars['StringScalar']>;
  allFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  recentFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  certificationStartDate?: InputMaybe<Scalars['StringScalar']>;
  certificationEndDate?: InputMaybe<Scalars['StringScalar']>;
  streetLineTwo?: InputMaybe<Scalars['StringScalar']>;
  hashtagField?: InputMaybe<Scalars['StringScalar']>;
  fullName?: InputMaybe<Scalars['StringScalar']>;
  gender?: InputMaybe<Scalars['StringScalar']>;
  personIds?: InputMaybe<Scalars['StringScalar']>;
  personId?: InputMaybe<Scalars['StringScalar']>;
  hasCanadianEmail?: InputMaybe<Scalars['StringScalar']>;
  companyLocationIds?: InputMaybe<Scalars['StringScalar']>;
  emailAddress?: InputMaybe<Scalars['StringScalar']>;
  firstName?: InputMaybe<Scalars['StringScalar']>;
  lastName?: InputMaybe<Scalars['StringScalar']>;
  middleInitial?: InputMaybe<Scalars['StringScalar']>;
  excludedPersonTitle?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  titleCertification?: InputMaybe<Scalars['StringScalar']>;
  personTitle?: InputMaybe<Scalars['StringScalar']>;
  titleSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleSeniority?: InputMaybe<Scalars['StringScalar']>;
  degree?: InputMaybe<Scalars['StringScalar']>;
  school?: InputMaybe<Scalars['StringScalar']>;
  companyDomainName?: InputMaybe<Scalars['StringScalar']>;
  validDateMonthDist?: InputMaybe<Scalars['StringScalar']>;
  zoomJoinsAccount?: InputMaybe<ZoomJoinsAccount>;
  orgJoinsAccount?: InputMaybe<OrgJoinsAccount>;
  titleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeOrgExportedCompanies?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgExportedContacts?: InputMaybe<Scalars['StringScalar']>;
  excludeCompanyTags?: InputMaybe<Scalars['StringScalar']>;
  personWebReferences?: InputMaybe<Scalars['StringScalar']>;
  personWebReferencesURL?: InputMaybe<Scalars['StringScalar']>;
  departments?: InputMaybe<Scalars['StringScalar']>;
  jobFunctions?: InputMaybe<Scalars['StringScalar']>;
  isEU?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMin?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMax?: InputMaybe<Scalars['StringScalar']>;
  hasLocationId?: InputMaybe<Scalars['StringScalar']>;
  hasPersonalEmail?: InputMaybe<Scalars['StringScalar']>;
  hasMobilePhone?: InputMaybe<Scalars['StringScalar']>;
  hasEmail?: InputMaybe<Scalars['StringScalar']>;
  hasPhone?: InputMaybe<Scalars['StringScalar']>;
  hasDirectPhone?: InputMaybe<Scalars['StringScalar']>;
  hasCompanyPhone?: InputMaybe<Scalars['StringScalar']>;
  hasTitle?: InputMaybe<Scalars['StringScalar']>;
  hasBeenNotified?: InputMaybe<Scalars['StringScalar']>;
  hasDepartment?: InputMaybe<Scalars['StringScalar']>;
  hasJobFunction?: InputMaybe<Scalars['StringScalar']>;
  hasSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgChartTier?: InputMaybe<Scalars['StringScalar']>;
  orgChartTier?: InputMaybe<Scalars['StringScalar']>;
  personCreationStartDate?: InputMaybe<Scalars['StringScalar']>;
  positionStartDate?: InputMaybe<Scalars['StringScalar']>;
  personCreationEndDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedStartDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedEndDate?: InputMaybe<Scalars['StringScalar']>;
  executivesOnly?: InputMaybe<Scalars['StringScalar']>;
  returnOnlyBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  excludeBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  page?: InputMaybe<Scalars['Float']>;
  rpp?: InputMaybe<Scalars['StringScalar']>;
  facetOptions?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  techAttributeTagNotUsedAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  findRecommendedContacts?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompanies?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesPage?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesRpp?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesSortBy?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesContacts?: InputMaybe<Scalars['StringScalar']>;
  solrPseudoOutputFields?: InputMaybe<Scalars['StringScalar']>;
  scoopEndDate?: InputMaybe<Scalars['StringScalar']>;
  scoopStartDate?: InputMaybe<Scalars['StringScalar']>;
  updatedSinceCreation?: InputMaybe<Scalars['StringScalar']>;
  scoopTypes?: InputMaybe<Scalars['StringScalar']>;
  scoopTopics?: InputMaybe<Scalars['StringScalar']>;
  scoopDepartments?: InputMaybe<Scalars['StringScalar']>;
  scoopDesc?: InputMaybe<Scalars['StringScalar']>;
  scoopIds?: InputMaybe<Scalars['StringScalar']>;
  scoringOptions?: InputMaybe<Scalars['StringScalar']>;
  masked?: InputMaybe<Scalars['Boolean']>;
  subscribed?: InputMaybe<Scalars['Boolean']>;
  orgImported?: InputMaybe<Scalars['Boolean']>;
  sessionToken?: InputMaybe<Scalars['StringScalar']>;
  definedUniverse?: InputMaybe<Scalars['StringScalar']>;
  outputFieldOptions?: InputMaybe<Scalars['StringScalar']>;
  ignoreDefaultFields?: InputMaybe<Scalars['StringScalar']>;
  includeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPersonOnlyMe?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedContacts?: InputMaybe<Scalars['Boolean']>;
  pTag?: InputMaybe<Scalars['StringScalar']>;
  cTag?: InputMaybe<Scalars['StringScalar']>;
  excludePeopleTags?: InputMaybe<Scalars['StringScalar']>;
  includeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAssociatedDeals?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeAllOrgImportLeads?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOptout?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  excludeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  orgImportOpportunities?: InputMaybe<Array<OrgImportOpportunities>>;
  includeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  searchFacadeParams?: InputMaybe<PersonArgs>;
};

export type PersonArgs = {
  nnNegation?: InputMaybe<Scalars['StringScalar']>;
  nnQueryId?: InputMaybe<Scalars['StringScalar']>;
  nnStartDate?: InputMaybe<Scalars['StringScalar']>;
  nnEndDate?: InputMaybe<Scalars['StringScalar']>;
  companyId?: InputMaybe<Scalars['StringScalar']>;
  companyIds?: InputMaybe<Scalars['StringScalar']>;
  revenueMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  revenueMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMax?: InputMaybe<Scalars['StringScalar']>;
  techAttributesAddedDropped?: InputMaybe<TechAttributesAddedDropped>;
  techAttributeNotUsedAnd?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMin?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMax?: InputMaybe<Scalars['StringScalar']>;
  locationCountMin?: InputMaybe<Scalars['StringScalar']>;
  locationCountMax?: InputMaybe<Scalars['StringScalar']>;
  metroAreas?: InputMaybe<Scalars['StringScalar']>;
  doziPrimaryIndustry?: InputMaybe<Scalars['StringScalar']>;
  hqLocationAreaCodes?: InputMaybe<Scalars['StringScalar']>;
  departmentEmployeeCounts?: InputMaybe<DepartmentEmployeeCounts>;
  departmentBudgets?: InputMaybe<DepartmentBudgets>;
  street?: InputMaybe<Scalars['StringScalar']>;
  locationType?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  negateScope?: InputMaybe<Scalars['Boolean']>;
  itBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  itBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  anyFundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  anyFundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  fundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  anyFundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  allInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  recentInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  state?: InputMaybe<Scalars['StringScalar']>;
  metroRegion?: InputMaybe<Scalars['StringScalar']>;
  country?: InputMaybe<Scalars['StringScalar']>;
  continent?: InputMaybe<Scalars['StringScalar']>;
  companyType?: InputMaybe<Scalars['StringScalar']>;
  companyName?: InputMaybe<Scalars['StringScalar']>;
  companyDomainNames?: InputMaybe<Scalars['StringScalar']>;
  companyDesc?: InputMaybe<Scalars['StringScalar']>;
  isPublic?: InputMaybe<Scalars['StringScalar']>;
  location?: InputMaybe<Scalars['StringScalar']>;
  zipCode?: InputMaybe<Scalars['StringScalar']>;
  radiusMiles?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTag?: InputMaybe<Scalars['StringScalar']>;
  industryKeywordsMulti?: InputMaybe<Scalars['StringScalar']>;
  primaryIndustriesOnly?: InputMaybe<Scalars['StringScalar']>;
  industryClassification?: InputMaybe<Scalars['StringScalar']>;
  industryKeywords?: InputMaybe<Scalars['StringScalar']>;
  industryCodeList?: InputMaybe<Scalars['StringScalar']>;
  industryCode?: InputMaybe<Scalars['StringScalar']>;
  industryCodeAnd?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  revenueClassification?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassification?: InputMaybe<Scalars['StringScalar']>;
  companyRanking?: InputMaybe<Scalars['StringScalar']>;
  pubPrivateSectors?: InputMaybe<Scalars['StringScalar']>;
  locationSearchType?: InputMaybe<Scalars['StringScalar']>;
  fundingMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  fundingMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAnd?: InputMaybe<Scalars['StringScalar']>;
  allInvestors?: InputMaybe<Scalars['StringScalar']>;
  recentInvestors?: InputMaybe<Scalars['StringScalar']>;
  allFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  recentFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  isCertified?: InputMaybe<Scalars['String']>;
  certificationStartDate?: InputMaybe<Scalars['StringScalar']>;
  certificationEndDate?: InputMaybe<Scalars['StringScalar']>;
  streetLineTwo?: InputMaybe<Scalars['StringScalar']>;
  hashtagField?: InputMaybe<Scalars['StringScalar']>;
  fullName?: InputMaybe<Scalars['StringScalar']>;
  gender?: InputMaybe<Scalars['StringScalar']>;
  personIds?: InputMaybe<Scalars['StringScalar']>;
  personID?: InputMaybe<Scalars['String']>;
  personId?: InputMaybe<Scalars['StringScalar']>;
  hasCanadianEmail?: InputMaybe<Scalars['StringScalar']>;
  companyLocationIds?: InputMaybe<Scalars['StringScalar']>;
  emailAddress?: InputMaybe<Scalars['StringScalar']>;
  firstName?: InputMaybe<Scalars['StringScalar']>;
  lastName?: InputMaybe<Scalars['StringScalar']>;
  middleInitial?: InputMaybe<Scalars['StringScalar']>;
  excludedPersonTitle?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  titleCertification?: InputMaybe<Scalars['StringScalar']>;
  personTitle?: InputMaybe<Scalars['StringScalar']>;
  titleSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleSeniority?: InputMaybe<Scalars['StringScalar']>;
  degree?: InputMaybe<Scalars['StringScalar']>;
  school?: InputMaybe<Scalars['StringScalar']>;
  companyDomainName?: InputMaybe<Scalars['StringScalar']>;
  companyPastOrPresent?: InputMaybe<Scalars['String']>;
  validDateMonthDist?: InputMaybe<Scalars['StringScalar']>;
  contactRequirements?: InputMaybe<Scalars['String']>;
  zoomJoinsAccount?: InputMaybe<ZoomJoinsAccount>;
  orgJoinsAccount?: InputMaybe<OrgJoinsAccount>;
  titleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeNoCompany?: InputMaybe<Scalars['String']>;
  excludeExportedCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeOrgExportedCompanies?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgExportedContacts?: InputMaybe<Scalars['StringScalar']>;
  excludeCompanyTags?: InputMaybe<Scalars['StringScalar']>;
  personWebReferences?: InputMaybe<Scalars['StringScalar']>;
  personWebReferencesURL?: InputMaybe<Scalars['StringScalar']>;
  departments?: InputMaybe<Scalars['StringScalar']>;
  jobFunctions?: InputMaybe<Scalars['StringScalar']>;
  isEU?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMin?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMax?: InputMaybe<Scalars['StringScalar']>;
  hasLocationId?: InputMaybe<Scalars['StringScalar']>;
  hasPersonalEmail?: InputMaybe<Scalars['StringScalar']>;
  hasMobilePhone?: InputMaybe<Scalars['StringScalar']>;
  hasEmail?: InputMaybe<Scalars['StringScalar']>;
  hasPhone?: InputMaybe<Scalars['StringScalar']>;
  hasDirectPhone?: InputMaybe<Scalars['StringScalar']>;
  hasCompanyPhone?: InputMaybe<Scalars['StringScalar']>;
  hasTitle?: InputMaybe<Scalars['StringScalar']>;
  hasBeenNotified?: InputMaybe<Scalars['StringScalar']>;
  hasDepartment?: InputMaybe<Scalars['StringScalar']>;
  hasJobFunction?: InputMaybe<Scalars['StringScalar']>;
  hasSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgChartTier?: InputMaybe<Scalars['StringScalar']>;
  orgChartTier?: InputMaybe<Scalars['StringScalar']>;
  personCreationStartDate?: InputMaybe<Scalars['StringScalar']>;
  positionStartDate?: InputMaybe<Scalars['StringScalar']>;
  personCreationEndDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedStartDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedEndDate?: InputMaybe<Scalars['StringScalar']>;
  executivesOnly?: InputMaybe<Scalars['StringScalar']>;
  returnOnlyBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  excludeBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  page?: InputMaybe<Scalars['Float']>;
  rpp?: InputMaybe<Scalars['StringScalar']>;
  facetOptions?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  techAttributeTagNotUsedAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  findRecommendedContacts?: InputMaybe<Scalars['StringScalar']>;
  sortBy?: InputMaybe<Scalars['String']>;
  sortOrder?: InputMaybe<Scalars['String']>;
  uniqueCompanies?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesPage?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesRpp?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesSortBy?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesContacts?: InputMaybe<Scalars['StringScalar']>;
  solrPseudoOutputFields?: InputMaybe<Scalars['StringScalar']>;
  scoopEndDate?: InputMaybe<Scalars['StringScalar']>;
  scoopStartDate?: InputMaybe<Scalars['StringScalar']>;
  updatedSinceCreation?: InputMaybe<Scalars['StringScalar']>;
  scoopTypes?: InputMaybe<Scalars['StringScalar']>;
  scoopTopics?: InputMaybe<Scalars['StringScalar']>;
  scoopDepartments?: InputMaybe<Scalars['StringScalar']>;
  scoopDesc?: InputMaybe<Scalars['StringScalar']>;
  scoopIds?: InputMaybe<Scalars['StringScalar']>;
  doziIndustry?: InputMaybe<Scalars['String']>;
  scoringOptions?: InputMaybe<Scalars['StringScalar']>;
  masked?: InputMaybe<Scalars['Boolean']>;
  subscribed?: InputMaybe<Scalars['Boolean']>;
  orgImported?: InputMaybe<Scalars['Boolean']>;
  sessionToken?: InputMaybe<Scalars['StringScalar']>;
  definedUniverse?: InputMaybe<Scalars['StringScalar']>;
  outputFieldOptions?: InputMaybe<Scalars['StringScalar']>;
  ignoreDefaultFields?: InputMaybe<Scalars['StringScalar']>;
  includeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPersonOnlyMe?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedContacts?: InputMaybe<Scalars['Boolean']>;
  excludeDefunctCompanies?: InputMaybe<Scalars['Boolean']>;
  pTag?: InputMaybe<Scalars['StringScalar']>;
  cTag?: InputMaybe<Scalars['StringScalar']>;
  excludePeopleTags?: InputMaybe<Scalars['StringScalar']>;
  includeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAssociatedDeals?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeAllOrgImportLeads?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOptout?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  excludeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  orgImportOpportunities?: InputMaybe<Array<OrgImportOpportunities>>;
  includeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  companyID?: InputMaybe<Scalars['String']>;
  fetchTechAddDropOptions?: InputMaybe<Scalars['Boolean']>;
  showUnmaskedContacts?: InputMaybe<Scalars['Boolean']>;
  defaultSearchParams?: InputMaybe<DefaultSearchParams>;
  packageName?: InputMaybe<Scalars['String']>;
  buyingCommittee?: InputMaybe<Scalars['String']>;
  jobTitle?: InputMaybe<Scalars['String']>;
  isTopExecutives?: InputMaybe<Scalars['Boolean']>;
};

export type BoardMemberModel = {
  company?: Maybe<CompanyDetailsModel>;
  from?: Maybe<Scalars['String']>;
  to?: Maybe<Scalars['String']>;
  jobFunction?: Maybe<Array<Scalars['String']>>;
  title?: Maybe<Scalars['String']>;
  level?: Maybe<Scalars['String']>;
};

export type DegreeModel = {
  areaOfStudy?: Maybe<Scalars['String']>;
  degree?: Maybe<Scalars['String']>;
};

export type EducationModel = {
  school?: Maybe<Scalars['String']>;
  degree?: Maybe<DegreeModel>;
};

export type EmploymentHistoryModel = {
  companyName?: Maybe<Scalars['String']>;
  from?: Maybe<Scalars['String']>;
  to?: Maybe<Scalars['String']>;
  jobFunction?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  level?: Maybe<Scalars['String']>;
  companyID?: Maybe<Scalars['Float']>;
  companyWebsite?: Maybe<Scalars['String']>;
};

export type WebReferencesModel = {
  description?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
};

export type OrgChartJobFunction = {
  department?: Maybe<Scalars['String']>;
  departmentId?: Maybe<Scalars['String']>;
  jobFunction?: Maybe<Scalars['String']>;
  jobFunctionId?: Maybe<Scalars['String']>;
};

export type PersonDetailsModel = {
  entityId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  industry?: Maybe<Array<Scalars['String']>>;
  newJobFunction?: Maybe<Array<Scalars['String']>>;
  orgChartTier?: Maybe<Scalars['Float']>;
  topLevelIndustry?: Maybe<Array<Scalars['String']>>;
  title?: Maybe<Scalars['String']>;
  jobFunction?: Maybe<Array<Scalars['String']>>;
  employmentHistory?: Maybe<Array<EmploymentHistoryModel>>;
  education?: Maybe<Array<EducationModel>>;
  orgChartJobFunction?: Maybe<Array<OrgChartJobFunction>>;
  jobFunctions?: Maybe<Array<OrgChartJobFunction>>;
  webReference?: Maybe<Array<WebReferencesModel>>;
  boardMember?: Maybe<Array<BoardMemberModel>>;
  personBiography?: Maybe<Scalars['String']>;
  socialUrls?: Maybe<SocialMediaUrlModel>;
  socialUrlsParsed?: Maybe<SocialMediaParsed>;
  followerCountParsed?: Maybe<SocialMediaParsed>;
  foundedYear?: Maybe<Scalars['Float']>;
  alexaRank?: Maybe<Scalars['Float']>;
  directPhoneIsDoNotCall?: Maybe<Scalars['Boolean']>;
  mobilePhoneIsDoNotCall?: Maybe<Scalars['Boolean']>;
  directPhoneBlocked?: Maybe<Scalars['Boolean']>;
  mobilePhoneBlocked?: Maybe<Scalars['Boolean']>;
  emailBlocked?: Maybe<Scalars['Boolean']>;
  personalEmailBlocked?: Maybe<Scalars['Boolean']>;
  company?: Maybe<CompanyDetailsModel>;
  importedData?: Maybe<ImportedDataModel>;
};

export type SocialNetworkModel = {
  socialNetworkType?: Maybe<Scalars['String']>;
  socialNetworkUrl?: Maybe<Scalars['String']>;
};

export type SocialOrgChartMediaUrlModel = {
  socialMedia?: Maybe<Array<SocialNetworkModel>>;
};

export type JobFunctions = {
  department?: Maybe<Scalars['String']>;
  departmentId?: Maybe<Scalars['Float']>;
  departmentPriority?: Maybe<Scalars['Float']>;
  jobFunctionId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  orgChartSwimLane?: Maybe<Scalars['String']>;
  orgChartSwimLanePriority?: Maybe<Scalars['Float']>;
  rank?: Maybe<Scalars['Float']>;
};

export type ListedTypes = {
  listName?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Boolean']>;
};

export type SolarPseudoOtuputFieldsModel = {
  exported?: Maybe<Scalars['Boolean']>;
  imported?: Maybe<Scalars['Boolean']>;
  listed?: Maybe<Array<ListedTypes>>;
  orgImported?: Maybe<Scalars['Boolean']>;
  orgOriginSF?: Maybe<Scalars['Boolean']>;
  owned?: Maybe<Scalars['Boolean']>;
  recentExported?: Maybe<Scalars['Boolean']>;
  tagged?: Maybe<Scalars['Boolean']>;
  viewed?: Maybe<Scalars['Boolean']>;
};

export type OrgChartLevelModel = {
  businessEmailAddress?: Maybe<Scalars['String']>;
  companyHQPhone?: Maybe<Scalars['String']>;
  confidenceScore?: Maybe<Scalars['Float']>;
  directPhone?: Maybe<Scalars['String']>;
  directPhoneIsDoNotCall?: Maybe<Scalars['Boolean']>;
  imageUrl?: Maybe<Scalars['String']>;
  indentationPosition?: Maybe<Scalars['Float']>;
  isMasked?: Maybe<Scalars['Boolean']>;
  isTagged?: Maybe<Scalars['Boolean']>;
  jobFunctions?: Maybe<Array<JobFunctions>>;
  mobilePhone?: Maybe<Scalars['String']>;
  mobilePhoneIsDoNotCall?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  orgChartTier?: Maybe<Scalars['Float']>;
  personId?: Maybe<Scalars['Float']>;
  personalEmailAddress?: Maybe<Scalars['String']>;
  socialUrls?: Maybe<SocialOrgChartMediaUrlModel>;
  solrPseudoOutputFields?: Maybe<SolarPseudoOtuputFieldsModel>;
  subOrgChartTier?: Maybe<Scalars['Float']>;
  socialUrlsParsed?: Maybe<SocialMediaParsed>;
  followerCountParsed?: Maybe<SocialMediaParsed>;
  title?: Maybe<Scalars['String']>;
};

export type OrgChartSwimLanesNameDataModel = {
  data?: Maybe<Array<OrgChartLevelModel>>;
  departments?: Maybe<Scalars['String']>;
  jobFunctionName?: Maybe<Scalars['String']>;
  jobFunctions?: Maybe<Scalars['String']>;
  maxResults?: Maybe<Scalars['Float']>;
  orgChartSwimLane?: Maybe<Scalars['String']>;
  totalResults?: Maybe<Scalars['Float']>;
};

export type OrgChartSwimLanesModel = {
  data?: Maybe<Array<OrgChartSwimLanesNameDataModel>>;
  swimLaneName?: Maybe<Scalars['String']>;
};

export type OrgChart = {
  companyId?: Maybe<Scalars['String']>;
  departments?: Maybe<Scalars['String']>;
  highestTier?: Maybe<Scalars['Float']>;
  orgChartSwimLanes?: Maybe<Array<OrgChartSwimLanesModel>>;
  topLevelContacts?: Maybe<Array<OrgChartLevelModel>>;
};

export type PersonCertificationsModel = {
  certificationName?: Maybe<Scalars['String']>;
  organizationName?: Maybe<Scalars['String']>;
};

export type OrgUniversalTagModel = {
  tagName?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Boolean']>;
};

export type PplAtOrgItemModel = {
  buyingCommittee?: Maybe<Scalars['Boolean']>;
  certifications?: Maybe<Array<PersonCertificationsModel>>;
  orgUniversalTagged?: Maybe<Array<OrgUniversalTagModel>>;
  universalTagged?: Maybe<Array<OrgUniversalTagModel>>;
  certified?: Maybe<Scalars['Boolean']>;
  isEU?: Maybe<Scalars['Boolean']>;
  jobTitle?: Maybe<Scalars['String']>;
  positionStartDate?: Maybe<Scalars['String']>;
  socialUrls?: Maybe<SocialOrgChartMediaUrlModel>;
  website?: Maybe<Scalars['String']>;
  personID: Scalars['String'];
  profileImageURL?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  mobilePhone?: Maybe<Scalars['String']>;
  personalEmail?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  location?: Maybe<LocationModel>;
  topLevelIndustry?: Maybe<Array<Scalars['String']>>;
  industry?: Maybe<Array<Scalars['String']>>;
  lastMentioned?: Maybe<Scalars['String']>;
  lastUpdatedDate?: Maybe<Scalars['String']>;
  confidenceScore?: Maybe<Scalars['Float']>;
  noticeProvidedInfo?: Maybe<NoticeInfoModel>;
  privacyRegulationFlags?: Maybe<PrivacyRegulationsModel>;
  isPast?: Maybe<Scalars['String']>;
  score?: Maybe<Scalars['Float']>;
  name?: Maybe<Scalars['String']>;
  managementLevel?: Maybe<Scalars['String']>;
  jobFunction?: Maybe<Array<Scalars['String']>>;
  title?: Maybe<Scalars['String']>;
  companyID?: Maybe<Scalars['String']>;
  companyLogo?: Maybe<Scalars['String']>;
  companyName?: Maybe<Scalars['String']>;
  companyAddress?: Maybe<LocationModel>;
  companyRevenue?: Maybe<Scalars['String']>;
  companyRevenueRange?: Maybe<Scalars['String']>;
  companyEmployees?: Maybe<Scalars['Float']>;
  companyEmployeeCountRange?: Maybe<Scalars['String']>;
  companyDomain?: Maybe<Scalars['String']>;
  companyPhone?: Maybe<Scalars['String']>;
  companyDescription?: Maybe<Scalars['String']>;
  companyFax?: Maybe<Scalars['String']>;
  creationDate?: Maybe<Scalars['String']>;
  companyType?: Maybe<Scalars['String']>;
  subscribed?: Maybe<Scalars['Boolean']>;
  companyRevenueIn000s?: Maybe<Scalars['Float']>;
  companySIC?: Maybe<Array<Scalars['Float']>>;
  companyNAICS?: Maybe<Array<Scalars['Float']>>;
  companyTicker?: Maybe<Scalars['String']>;
  middleInitial?: Maybe<Scalars['String']>;
  isMasked?: Maybe<Scalars['Boolean']>;
  isTagged?: Maybe<Scalars['Boolean']>;
  directPhoneBlocked?: Maybe<Scalars['Boolean']>;
  mobilePhoneBlocked?: Maybe<Scalars['Boolean']>;
  personalEmailBlocked?: Maybe<Scalars['Boolean']>;
  emailBlocked?: Maybe<Scalars['Boolean']>;
  doziIndustry?: Maybe<Array<DoziIndustryModel>>;
};

export type QuickSearchDataRes = {
  companyId?: Maybe<Scalars['String']>;
  companyName?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  personID?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  isDefunct?: Maybe<Scalars['Boolean']>;
  ultimateParent?: Maybe<UltimateParentModel>;
};

export type QuickSearchRes = {
  companiesCount?: Maybe<Scalars['Float']>;
  data?: Maybe<Array<QuickSearchDataRes>>;
  maxResults?: Maybe<Scalars['Float']>;
  totalResults?: Maybe<Scalars['Float']>;
};

export type OnEnterTops = {
  topCount?: Maybe<Scalars['String']>;
  topName?: Maybe<Scalars['String']>;
  topValue?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type FundingInvestorSuggestionModel = {
  companyName?: Maybe<Scalars['String']>;
  investorDomain?: Maybe<Scalars['String']>;
  investorName?: Maybe<Scalars['String']>;
};

export type FundingSuggestiongModel = {
  amountIn000s?: Maybe<Scalars['Float']>;
  date?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  investors?: Maybe<Array<FundingInvestorSuggestionModel>>;
  round?: Maybe<Scalars['String']>;
};

export type CompanySuggestionDataModel = {
  buyingCommittee?: Maybe<Scalars['Boolean']>;
  certifications?: Maybe<Array<PersonCertificationsModel>>;
  orgUniversalTagged?: Maybe<Array<OrgUniversalTagModel>>;
  universalTagged?: Maybe<Array<OrgUniversalTagModel>>;
  certified?: Maybe<Scalars['Boolean']>;
  isEU?: Maybe<Scalars['Boolean']>;
  jobTitle?: Maybe<Scalars['String']>;
  positionStartDate?: Maybe<Scalars['String']>;
  socialUrls?: Maybe<SocialOrgChartMediaUrlModel>;
  website?: Maybe<Scalars['String']>;
  companyAddress?: Maybe<LocationModel>;
  companyDescription?: Maybe<Scalars['String']>;
  companyDomain?: Maybe<Scalars['String']>;
  companyEmployeeCountRange?: Maybe<Scalars['String']>;
  companyEmployees?: Maybe<Scalars['Float']>;
  companyID?: Maybe<Scalars['String']>;
  companyLogo?: Maybe<Scalars['String']>;
  companyName?: Maybe<Scalars['String']>;
  companyPhone?: Maybe<Scalars['String']>;
  companyType?: Maybe<Scalars['String']>;
  confidenceScore?: Maybe<Scalars['Float']>;
  companyRevenue?: Maybe<Scalars['String']>;
  creationDate?: Maybe<Scalars['String']>;
  middleInitial?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  profileImageURL?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  companyRevenueRange?: Maybe<Scalars['String']>;
  companyTicker?: Maybe<Scalars['String']>;
  companyRevenueIn000s?: Maybe<Scalars['Float']>;
  doziIndustry?: Maybe<Array<DoziIndustryModel>>;
  firstName?: Maybe<Scalars['String']>;
  isMasked?: Maybe<Scalars['Boolean']>;
  isPast?: Maybe<Scalars['String']>;
  isTagged?: Maybe<Scalars['Boolean']>;
  lastMentioned?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  lastUpdatedDate?: Maybe<Scalars['String']>;
  location?: Maybe<LocationModel>;
  mobilePhoneBlocked?: Maybe<Scalars['Boolean']>;
  mobilePhoneIsDoNotCall?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  noticeProvidedInfo?: Maybe<NoticeInfoModel>;
  personID: Scalars['String'];
  score?: Maybe<Scalars['Float']>;
  subscribed?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  topLevelIndustry?: Maybe<Array<Scalars['String']>>;
  certificationDate?: Maybe<Scalars['String']>;
  companyIds?: Maybe<Array<Scalars['Float']>>;
  logo?: Maybe<Scalars['String']>;
  socialNetworkUrls?: Maybe<Array<SocialNetworkModel>>;
  employees?: Maybe<Scalars['Float']>;
  ultimateParent?: Maybe<UltimateParentModel>;
  employeesRange?: Maybe<Scalars['String']>;
  funding?: Maybe<Array<FundingSuggestiongModel>>;
  isDefunct?: Maybe<Scalars['Boolean']>;
  revenue?: Maybe<Scalars['String']>;
  companyEmployeeRange?: Maybe<Scalars['String']>;
  industries?: Maybe<Array<DoziIndustryModel>>;
  revenueRange?: Maybe<Scalars['String']>;
  totalFundingAmountIn000s?: Maybe<Scalars['Float']>;
};

export type CompanySuggestionModel = {
  companiesCount?: Maybe<Scalars['Float']>;
  data?: Maybe<Array<CompanySuggestionDataModel>>;
  maxResults?: Maybe<Scalars['Float']>;
  totalResults?: Maybe<Scalars['Float']>;
};

export type ItemSuggestions = {
  type?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type SearchSuggestions = {
  displayItem?: Maybe<Scalars['String']>;
  searchType?: Maybe<Scalars['String']>;
  suggestions?: Maybe<Array<ItemSuggestions>>;
};

export type SuggestionsModel = {
  peopleSuggestion?: Maybe<PersonSearchModel>;
  companySuggestion?: Maybe<CompanySuggestionModel>;
};


export type SuggestionsModelpeopleSuggestionArgs = {
  rpp?: InputMaybe<Scalars['Float']>;
};


export type SuggestionsModelcompanySuggestionArgs = {
  rpp?: InputMaybe<Scalars['Float']>;
};

export type TrySearchSuggestion = {
  items?: Maybe<Array<SearchSuggestions>>;
  showAdditionalTrySearches?: Maybe<Scalars['Boolean']>;
};

export type QuickSearchModel = {
  success?: Maybe<Scalars['Boolean']>;
  companies?: Maybe<CompanySuggestionModel>;
  contacts?: Maybe<QuickSearchRes>;
  onEnterTops?: Maybe<Array<OnEnterTops>>;
  tops?: Maybe<Array<OnEnterTops>>;
  trySearchSuggestions?: Maybe<TrySearchSuggestion>;
};

export type Company = {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  tagged?: Maybe<Scalars['Boolean']>;
  masked?: Maybe<Scalars['Boolean']>;
  subscribed?: Maybe<Scalars['Boolean']>;
  exported?: Maybe<Scalars['Boolean']>;
  description?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['String']>;
  fax?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  ticker?: Maybe<Scalars['String']>;
  crmEntityId?: Maybe<Scalars['String']>;
  address?: Maybe<LocationModel>;
  displayAddress?: Maybe<Scalars['String']>;
  employeeCount?: Maybe<Scalars['Float']>;
  revenue?: Maybe<Scalars['String']>;
  doziIndustry?: Maybe<Array<DoziIndustryModel>>;
  doziIndustryString?: Maybe<Scalars['String']>;
  revenueRange?: Maybe<Scalars['String']>;
  industry?: Maybe<Array<Scalars['String']>>;
  industries?: Maybe<Array<Scalars['String']>>;
  allIndustries?: Maybe<Array<Scalars['String']>>;
  isDefunct?: Maybe<Scalars['Boolean']>;
  uniqueCompanyNumContacts?: Maybe<Scalars['Float']>;
  companyHref?: Maybe<Scalars['String']>;
  isInPreview?: Maybe<Scalars['Boolean']>;
  funding?: Maybe<Array<FundingModel>>;
  departmentBudgets?: Maybe<Array<DepartmentBudgetsModel>>;
  certified?: Maybe<Scalars['Boolean']>;
  certificationDate?: Maybe<Scalars['String']>;
  icpScore?: Maybe<Scalars['String']>;
  locationsCount?: Maybe<Scalars['String']>;
  ultimateParent?: Maybe<Scalars['String']>;
  orgImport?: Maybe<Scalars['String']>;
};

export type HCompaniesData = {
  certified?: Maybe<Scalars['Boolean']>;
  companyFax?: Maybe<Scalars['String']>;
  companyID?: Maybe<Scalars['String']>;
  companyPhone?: Maybe<Scalars['String']>;
  isDefunct?: Maybe<Scalars['Boolean']>;
  isMasked?: Maybe<Scalars['Boolean']>;
  isTagged?: Maybe<Scalars['Boolean']>;
  subscribed?: Maybe<Scalars['Boolean']>;
  totalFundingAmountIn000s?: Maybe<Scalars['Float']>;
  location?: Maybe<LocationModel>;
};

export type HCompaniesRes = {
  companiesCount?: Maybe<Scalars['Float']>;
  maxResults?: Maybe<Scalars['Float']>;
  totalResults?: Maybe<Scalars['Float']>;
  facetData?: Maybe<BasicFacetDataModel>;
  data?: Maybe<Array<HCompaniesData>>;
};

export type HUnifiedCompaniesRes = {
  resultEntity?: Maybe<Array<Company>>;
};

export type Query = {
  hCompaniesSearch: HCompaniesRes;
  hUnifiedCompaniesSearch: HUnifiedCompaniesRes;
  personDetails: PersonDetailsModel;
  personSearch: PersonSearchModel;
  scoopsSearch: Array<Scoops>;
  orgchartsSearch: OrgChart;
  companyHierarchySearch: CompanyHierarchyRes;
  facets: Facets;
  suggestions: SuggestionsModel;
  quickSearch: QuickSearchModel;
  companyDetails: CompanyDetailsModel;
  companySearch: CompanySearchResultModel;
};


export type QueryhCompaniesSearchArgs = {
  addressVerificationStatusList?: InputMaybe<Scalars['String']>;
  isLocationHierarchy?: InputMaybe<Scalars['Boolean']>;
  locationType?: InputMaybe<Scalars['String']>;
  parentId?: InputMaybe<Scalars['String']>;
  subUnitType?: InputMaybe<Scalars['String']>;
  ultimateParentId?: InputMaybe<Scalars['String']>;
  continent?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
};


export type QueryhUnifiedCompaniesSearchArgs = {
  isLocationHierarchy?: InputMaybe<Scalars['Boolean']>;
  page?: InputMaybe<Scalars['Float']>;
  rpp?: InputMaybe<Scalars['Float']>;
  subscribed?: InputMaybe<Scalars['Boolean']>;
  companyIds?: InputMaybe<Scalars['String']>;
  ultimateParentId?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  continent?: InputMaybe<Scalars['String']>;
  locationSearchType?: InputMaybe<Scalars['String']>;
};


export type QuerypersonDetailsArgs = {
  companyID?: InputMaybe<Scalars['String']>;
  fetchTechAddDropOptions?: InputMaybe<Scalars['Boolean']>;
  showUnmaskedContacts?: InputMaybe<Scalars['Boolean']>;
  defaultSearchParams?: InputMaybe<DefaultSearchParams>;
  packageName?: InputMaybe<Scalars['String']>;
  buyingCommittee?: InputMaybe<Scalars['String']>;
  companyPastOrPresent?: InputMaybe<Scalars['StringScalar']>;
  contactRequirements?: InputMaybe<Scalars['StringScalar']>;
  doziIndustry?: InputMaybe<Scalars['StringScalar']>;
  excludeDefunctCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeNoCompany?: InputMaybe<Scalars['StringScalar']>;
  isCertified?: InputMaybe<Scalars['StringScalar']>;
  sortBy?: InputMaybe<Scalars['StringScalar']>;
  sortOrder?: InputMaybe<Scalars['StringScalar']>;
  nnNegation?: InputMaybe<Scalars['StringScalar']>;
  nnQueryId?: InputMaybe<Scalars['StringScalar']>;
  nnStartDate?: InputMaybe<Scalars['StringScalar']>;
  nnEndDate?: InputMaybe<Scalars['StringScalar']>;
  companyId?: InputMaybe<Scalars['StringScalar']>;
  companyIds?: InputMaybe<Scalars['StringScalar']>;
  revenueMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  revenueMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMax?: InputMaybe<Scalars['StringScalar']>;
  techAttributesAddedDropped?: InputMaybe<TechAttributesAddedDropped>;
  techAttributeNotUsedAnd?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMin?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMax?: InputMaybe<Scalars['StringScalar']>;
  locationCountMin?: InputMaybe<Scalars['StringScalar']>;
  locationCountMax?: InputMaybe<Scalars['StringScalar']>;
  metroAreas?: InputMaybe<Scalars['StringScalar']>;
  doziPrimaryIndustry?: InputMaybe<Scalars['StringScalar']>;
  hqLocationAreaCodes?: InputMaybe<Scalars['StringScalar']>;
  departmentEmployeeCounts?: InputMaybe<DepartmentEmployeeCounts>;
  departmentBudgets?: InputMaybe<DepartmentBudgets>;
  street?: InputMaybe<Scalars['StringScalar']>;
  locationType?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  negateScope?: InputMaybe<Scalars['Boolean']>;
  itBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  itBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  anyFundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  anyFundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  fundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  anyFundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  allInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  recentInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  state?: InputMaybe<Scalars['StringScalar']>;
  metroRegion?: InputMaybe<Scalars['StringScalar']>;
  country?: InputMaybe<Scalars['StringScalar']>;
  continent?: InputMaybe<Scalars['StringScalar']>;
  companyType?: InputMaybe<Scalars['StringScalar']>;
  companyName?: InputMaybe<Scalars['StringScalar']>;
  companyDomainNames?: InputMaybe<Scalars['StringScalar']>;
  companyDesc?: InputMaybe<Scalars['StringScalar']>;
  isPublic?: InputMaybe<Scalars['StringScalar']>;
  location?: InputMaybe<Scalars['StringScalar']>;
  zipCode?: InputMaybe<Scalars['StringScalar']>;
  radiusMiles?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTag?: InputMaybe<Scalars['StringScalar']>;
  industryKeywordsMulti?: InputMaybe<Scalars['StringScalar']>;
  primaryIndustriesOnly?: InputMaybe<Scalars['StringScalar']>;
  industryClassification?: InputMaybe<Scalars['StringScalar']>;
  industryKeywords?: InputMaybe<Scalars['StringScalar']>;
  industryCodeList?: InputMaybe<Scalars['StringScalar']>;
  industryCode?: InputMaybe<Scalars['StringScalar']>;
  industryCodeAnd?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  revenueClassification?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassification?: InputMaybe<Scalars['StringScalar']>;
  companyRanking?: InputMaybe<Scalars['StringScalar']>;
  pubPrivateSectors?: InputMaybe<Scalars['StringScalar']>;
  locationSearchType?: InputMaybe<Scalars['StringScalar']>;
  fundingMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  fundingMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAnd?: InputMaybe<Scalars['StringScalar']>;
  allInvestors?: InputMaybe<Scalars['StringScalar']>;
  recentInvestors?: InputMaybe<Scalars['StringScalar']>;
  allFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  recentFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  certificationStartDate?: InputMaybe<Scalars['StringScalar']>;
  certificationEndDate?: InputMaybe<Scalars['StringScalar']>;
  streetLineTwo?: InputMaybe<Scalars['StringScalar']>;
  hashtagField?: InputMaybe<Scalars['StringScalar']>;
  fullName?: InputMaybe<Scalars['StringScalar']>;
  gender?: InputMaybe<Scalars['StringScalar']>;
  personIds?: InputMaybe<Scalars['StringScalar']>;
  personID?: InputMaybe<Scalars['String']>;
  personId?: InputMaybe<Scalars['StringScalar']>;
  hasCanadianEmail?: InputMaybe<Scalars['StringScalar']>;
  companyLocationIds?: InputMaybe<Scalars['StringScalar']>;
  emailAddress?: InputMaybe<Scalars['StringScalar']>;
  firstName?: InputMaybe<Scalars['StringScalar']>;
  lastName?: InputMaybe<Scalars['StringScalar']>;
  middleInitial?: InputMaybe<Scalars['StringScalar']>;
  excludedPersonTitle?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  titleCertification?: InputMaybe<Scalars['StringScalar']>;
  personTitle?: InputMaybe<Scalars['StringScalar']>;
  titleSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleSeniority?: InputMaybe<Scalars['StringScalar']>;
  degree?: InputMaybe<Scalars['StringScalar']>;
  school?: InputMaybe<Scalars['StringScalar']>;
  companyDomainName?: InputMaybe<Scalars['StringScalar']>;
  validDateMonthDist?: InputMaybe<Scalars['StringScalar']>;
  zoomJoinsAccount?: InputMaybe<ZoomJoinsAccount>;
  orgJoinsAccount?: InputMaybe<OrgJoinsAccount>;
  titleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeOrgExportedCompanies?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgExportedContacts?: InputMaybe<Scalars['StringScalar']>;
  excludeCompanyTags?: InputMaybe<Scalars['StringScalar']>;
  personWebReferences?: InputMaybe<Scalars['StringScalar']>;
  personWebReferencesURL?: InputMaybe<Scalars['StringScalar']>;
  departments?: InputMaybe<Scalars['StringScalar']>;
  jobFunctions?: InputMaybe<Scalars['StringScalar']>;
  isEU?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMin?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMax?: InputMaybe<Scalars['StringScalar']>;
  hasLocationId?: InputMaybe<Scalars['StringScalar']>;
  hasPersonalEmail?: InputMaybe<Scalars['StringScalar']>;
  hasMobilePhone?: InputMaybe<Scalars['StringScalar']>;
  hasEmail?: InputMaybe<Scalars['StringScalar']>;
  hasPhone?: InputMaybe<Scalars['StringScalar']>;
  hasDirectPhone?: InputMaybe<Scalars['StringScalar']>;
  hasCompanyPhone?: InputMaybe<Scalars['StringScalar']>;
  hasTitle?: InputMaybe<Scalars['StringScalar']>;
  hasBeenNotified?: InputMaybe<Scalars['StringScalar']>;
  hasDepartment?: InputMaybe<Scalars['StringScalar']>;
  hasJobFunction?: InputMaybe<Scalars['StringScalar']>;
  hasSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgChartTier?: InputMaybe<Scalars['StringScalar']>;
  orgChartTier?: InputMaybe<Scalars['StringScalar']>;
  personCreationStartDate?: InputMaybe<Scalars['StringScalar']>;
  positionStartDate?: InputMaybe<Scalars['StringScalar']>;
  personCreationEndDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedStartDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedEndDate?: InputMaybe<Scalars['StringScalar']>;
  executivesOnly?: InputMaybe<Scalars['StringScalar']>;
  returnOnlyBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  excludeBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  page?: InputMaybe<Scalars['Float']>;
  rpp?: InputMaybe<Scalars['StringScalar']>;
  facetOptions?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  techAttributeTagNotUsedAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  findRecommendedContacts?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompanies?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesPage?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesRpp?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesSortBy?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesContacts?: InputMaybe<Scalars['StringScalar']>;
  solrPseudoOutputFields?: InputMaybe<Scalars['StringScalar']>;
  scoopEndDate?: InputMaybe<Scalars['StringScalar']>;
  scoopStartDate?: InputMaybe<Scalars['StringScalar']>;
  updatedSinceCreation?: InputMaybe<Scalars['StringScalar']>;
  scoopTypes?: InputMaybe<Scalars['StringScalar']>;
  scoopTopics?: InputMaybe<Scalars['StringScalar']>;
  scoopDepartments?: InputMaybe<Scalars['StringScalar']>;
  scoopDesc?: InputMaybe<Scalars['StringScalar']>;
  scoopIds?: InputMaybe<Scalars['StringScalar']>;
  scoringOptions?: InputMaybe<Scalars['StringScalar']>;
  masked?: InputMaybe<Scalars['Boolean']>;
  subscribed?: InputMaybe<Scalars['Boolean']>;
  orgImported?: InputMaybe<Scalars['Boolean']>;
  sessionToken?: InputMaybe<Scalars['StringScalar']>;
  definedUniverse?: InputMaybe<Scalars['StringScalar']>;
  outputFieldOptions?: InputMaybe<Scalars['StringScalar']>;
  ignoreDefaultFields?: InputMaybe<Scalars['StringScalar']>;
  includeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPersonOnlyMe?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedContacts?: InputMaybe<Scalars['Boolean']>;
  pTag?: InputMaybe<Scalars['StringScalar']>;
  cTag?: InputMaybe<Scalars['StringScalar']>;
  excludePeopleTags?: InputMaybe<Scalars['StringScalar']>;
  includeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAssociatedDeals?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeAllOrgImportLeads?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOptout?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  excludeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  orgImportOpportunities?: InputMaybe<Array<OrgImportOpportunities>>;
  includeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  jobTitle?: InputMaybe<Scalars['String']>;
  isTopExecutives?: InputMaybe<Scalars['Boolean']>;
};


export type QuerypersonSearchArgs = {
  personID?: InputMaybe<Scalars['StringScalar']>;
  jobTitle?: InputMaybe<Scalars['String']>;
  packageName?: InputMaybe<Scalars['String']>;
  isTopExecutives?: InputMaybe<Scalars['Boolean']>;
  companyID?: InputMaybe<Scalars['String']>;
  fetchTechAddDropOptions?: InputMaybe<Scalars['Boolean']>;
  showUnmaskedContacts?: InputMaybe<Scalars['Boolean']>;
  defaultSearchParams?: InputMaybe<DefaultSearchParams>;
  buyingCommittee?: InputMaybe<Scalars['String']>;
  companyPastOrPresent?: InputMaybe<Scalars['StringScalar']>;
  contactRequirements?: InputMaybe<Scalars['StringScalar']>;
  doziIndustry?: InputMaybe<Scalars['StringScalar']>;
  excludeDefunctCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeNoCompany?: InputMaybe<Scalars['StringScalar']>;
  isCertified?: InputMaybe<Scalars['StringScalar']>;
  sortBy?: InputMaybe<Scalars['StringScalar']>;
  sortOrder?: InputMaybe<Scalars['StringScalar']>;
  nnNegation?: InputMaybe<Scalars['StringScalar']>;
  nnQueryId?: InputMaybe<Scalars['StringScalar']>;
  nnStartDate?: InputMaybe<Scalars['StringScalar']>;
  nnEndDate?: InputMaybe<Scalars['StringScalar']>;
  companyId?: InputMaybe<Scalars['StringScalar']>;
  companyIds?: InputMaybe<Scalars['StringScalar']>;
  revenueMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  revenueMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMax?: InputMaybe<Scalars['StringScalar']>;
  techAttributesAddedDropped?: InputMaybe<TechAttributesAddedDropped>;
  techAttributeNotUsedAnd?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMin?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMax?: InputMaybe<Scalars['StringScalar']>;
  locationCountMin?: InputMaybe<Scalars['StringScalar']>;
  locationCountMax?: InputMaybe<Scalars['StringScalar']>;
  metroAreas?: InputMaybe<Scalars['StringScalar']>;
  doziPrimaryIndustry?: InputMaybe<Scalars['StringScalar']>;
  hqLocationAreaCodes?: InputMaybe<Scalars['StringScalar']>;
  departmentEmployeeCounts?: InputMaybe<DepartmentEmployeeCounts>;
  departmentBudgets?: InputMaybe<DepartmentBudgets>;
  street?: InputMaybe<Scalars['StringScalar']>;
  locationType?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  negateScope?: InputMaybe<Scalars['Boolean']>;
  itBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  itBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  anyFundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  anyFundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  fundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  anyFundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  allInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  recentInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  state?: InputMaybe<Scalars['StringScalar']>;
  metroRegion?: InputMaybe<Scalars['StringScalar']>;
  country?: InputMaybe<Scalars['StringScalar']>;
  continent?: InputMaybe<Scalars['StringScalar']>;
  companyType?: InputMaybe<Scalars['StringScalar']>;
  companyName?: InputMaybe<Scalars['StringScalar']>;
  companyDomainNames?: InputMaybe<Scalars['StringScalar']>;
  companyDesc?: InputMaybe<Scalars['StringScalar']>;
  isPublic?: InputMaybe<Scalars['StringScalar']>;
  location?: InputMaybe<Scalars['StringScalar']>;
  zipCode?: InputMaybe<Scalars['StringScalar']>;
  radiusMiles?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTag?: InputMaybe<Scalars['StringScalar']>;
  industryKeywordsMulti?: InputMaybe<Scalars['StringScalar']>;
  primaryIndustriesOnly?: InputMaybe<Scalars['StringScalar']>;
  industryClassification?: InputMaybe<Scalars['StringScalar']>;
  industryKeywords?: InputMaybe<Scalars['StringScalar']>;
  industryCodeList?: InputMaybe<Scalars['StringScalar']>;
  industryCode?: InputMaybe<Scalars['StringScalar']>;
  industryCodeAnd?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  revenueClassification?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassification?: InputMaybe<Scalars['StringScalar']>;
  companyRanking?: InputMaybe<Scalars['StringScalar']>;
  pubPrivateSectors?: InputMaybe<Scalars['StringScalar']>;
  locationSearchType?: InputMaybe<Scalars['StringScalar']>;
  fundingMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  fundingMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAnd?: InputMaybe<Scalars['StringScalar']>;
  allInvestors?: InputMaybe<Scalars['StringScalar']>;
  recentInvestors?: InputMaybe<Scalars['StringScalar']>;
  allFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  recentFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  certificationStartDate?: InputMaybe<Scalars['StringScalar']>;
  certificationEndDate?: InputMaybe<Scalars['StringScalar']>;
  streetLineTwo?: InputMaybe<Scalars['StringScalar']>;
  hashtagField?: InputMaybe<Scalars['StringScalar']>;
  fullName?: InputMaybe<Scalars['StringScalar']>;
  gender?: InputMaybe<Scalars['StringScalar']>;
  personIds?: InputMaybe<Scalars['StringScalar']>;
  personId?: InputMaybe<Scalars['StringScalar']>;
  hasCanadianEmail?: InputMaybe<Scalars['StringScalar']>;
  companyLocationIds?: InputMaybe<Scalars['StringScalar']>;
  emailAddress?: InputMaybe<Scalars['StringScalar']>;
  firstName?: InputMaybe<Scalars['StringScalar']>;
  lastName?: InputMaybe<Scalars['StringScalar']>;
  middleInitial?: InputMaybe<Scalars['StringScalar']>;
  excludedPersonTitle?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  titleCertification?: InputMaybe<Scalars['StringScalar']>;
  personTitle?: InputMaybe<Scalars['StringScalar']>;
  titleSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleSeniority?: InputMaybe<Scalars['StringScalar']>;
  degree?: InputMaybe<Scalars['StringScalar']>;
  school?: InputMaybe<Scalars['StringScalar']>;
  companyDomainName?: InputMaybe<Scalars['StringScalar']>;
  validDateMonthDist?: InputMaybe<Scalars['StringScalar']>;
  zoomJoinsAccount?: InputMaybe<ZoomJoinsAccount>;
  orgJoinsAccount?: InputMaybe<OrgJoinsAccount>;
  titleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeOrgExportedCompanies?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgExportedContacts?: InputMaybe<Scalars['StringScalar']>;
  excludeCompanyTags?: InputMaybe<Scalars['StringScalar']>;
  personWebReferences?: InputMaybe<Scalars['StringScalar']>;
  personWebReferencesURL?: InputMaybe<Scalars['StringScalar']>;
  departments?: InputMaybe<Scalars['StringScalar']>;
  jobFunctions?: InputMaybe<Scalars['StringScalar']>;
  isEU?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMin?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMax?: InputMaybe<Scalars['StringScalar']>;
  hasLocationId?: InputMaybe<Scalars['StringScalar']>;
  hasPersonalEmail?: InputMaybe<Scalars['StringScalar']>;
  hasMobilePhone?: InputMaybe<Scalars['StringScalar']>;
  hasEmail?: InputMaybe<Scalars['StringScalar']>;
  hasPhone?: InputMaybe<Scalars['StringScalar']>;
  hasDirectPhone?: InputMaybe<Scalars['StringScalar']>;
  hasCompanyPhone?: InputMaybe<Scalars['StringScalar']>;
  hasTitle?: InputMaybe<Scalars['StringScalar']>;
  hasBeenNotified?: InputMaybe<Scalars['StringScalar']>;
  hasDepartment?: InputMaybe<Scalars['StringScalar']>;
  hasJobFunction?: InputMaybe<Scalars['StringScalar']>;
  hasSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgChartTier?: InputMaybe<Scalars['StringScalar']>;
  orgChartTier?: InputMaybe<Scalars['StringScalar']>;
  personCreationStartDate?: InputMaybe<Scalars['StringScalar']>;
  positionStartDate?: InputMaybe<Scalars['StringScalar']>;
  personCreationEndDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedStartDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedEndDate?: InputMaybe<Scalars['StringScalar']>;
  executivesOnly?: InputMaybe<Scalars['StringScalar']>;
  returnOnlyBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  excludeBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  page?: InputMaybe<Scalars['Float']>;
  rpp?: InputMaybe<Scalars['StringScalar']>;
  facetOptions?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  techAttributeTagNotUsedAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  findRecommendedContacts?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompanies?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesPage?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesRpp?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesSortBy?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesContacts?: InputMaybe<Scalars['StringScalar']>;
  solrPseudoOutputFields?: InputMaybe<Scalars['StringScalar']>;
  scoopEndDate?: InputMaybe<Scalars['StringScalar']>;
  scoopStartDate?: InputMaybe<Scalars['StringScalar']>;
  updatedSinceCreation?: InputMaybe<Scalars['StringScalar']>;
  scoopTypes?: InputMaybe<Scalars['StringScalar']>;
  scoopTopics?: InputMaybe<Scalars['StringScalar']>;
  scoopDepartments?: InputMaybe<Scalars['StringScalar']>;
  scoopDesc?: InputMaybe<Scalars['StringScalar']>;
  scoopIds?: InputMaybe<Scalars['StringScalar']>;
  scoringOptions?: InputMaybe<Scalars['StringScalar']>;
  masked?: InputMaybe<Scalars['Boolean']>;
  subscribed?: InputMaybe<Scalars['Boolean']>;
  orgImported?: InputMaybe<Scalars['Boolean']>;
  sessionToken?: InputMaybe<Scalars['StringScalar']>;
  definedUniverse?: InputMaybe<Scalars['StringScalar']>;
  outputFieldOptions?: InputMaybe<Scalars['StringScalar']>;
  ignoreDefaultFields?: InputMaybe<Scalars['StringScalar']>;
  includeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPersonOnlyMe?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedContacts?: InputMaybe<Scalars['Boolean']>;
  pTag?: InputMaybe<Scalars['StringScalar']>;
  cTag?: InputMaybe<Scalars['StringScalar']>;
  excludePeopleTags?: InputMaybe<Scalars['StringScalar']>;
  includeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAssociatedDeals?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeAllOrgImportLeads?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOptout?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  excludeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  orgImportOpportunities?: InputMaybe<Array<OrgImportOpportunities>>;
  includeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  searchFacadeParams?: InputMaybe<PersonArgs>;
};


export type QueryscoopsSearchArgs = {
  nnNegation?: InputMaybe<Scalars['StringScalar']>;
  nnQueryId?: InputMaybe<Scalars['StringScalar']>;
  nnStartDate?: InputMaybe<Scalars['StringScalar']>;
  nnEndDate?: InputMaybe<Scalars['StringScalar']>;
  companyId?: InputMaybe<Scalars['StringScalar']>;
  companyIds?: InputMaybe<Scalars['String']>;
  revenueMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  revenueMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMax?: InputMaybe<Scalars['StringScalar']>;
  techAttributesAddedDropped?: InputMaybe<TechAttributesAddedDropped>;
  techAttributeNotUsedAnd?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMin?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMax?: InputMaybe<Scalars['StringScalar']>;
  locationCountMin?: InputMaybe<Scalars['StringScalar']>;
  locationCountMax?: InputMaybe<Scalars['StringScalar']>;
  metroAreas?: InputMaybe<Scalars['StringScalar']>;
  doziPrimaryIndustry?: InputMaybe<Scalars['StringScalar']>;
  hqLocationAreaCodes?: InputMaybe<Scalars['StringScalar']>;
  departmentEmployeeCounts?: InputMaybe<DepartmentEmployeeCounts>;
  departmentBudgets?: InputMaybe<DepartmentBudgets>;
  street?: InputMaybe<Scalars['StringScalar']>;
  locationType?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  negateScope?: InputMaybe<Scalars['Boolean']>;
  itBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  itBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  anyFundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  anyFundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  fundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  anyFundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  allInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  recentInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  state?: InputMaybe<Scalars['StringScalar']>;
  metroRegion?: InputMaybe<Scalars['StringScalar']>;
  country?: InputMaybe<Scalars['StringScalar']>;
  continent?: InputMaybe<Scalars['StringScalar']>;
  companyType?: InputMaybe<Scalars['StringScalar']>;
  companyName?: InputMaybe<Scalars['String']>;
  companyDomainNames?: InputMaybe<Scalars['StringScalar']>;
  companyDesc?: InputMaybe<Scalars['StringScalar']>;
  isPublic?: InputMaybe<Scalars['StringScalar']>;
  location?: InputMaybe<Scalars['StringScalar']>;
  zipCode?: InputMaybe<Scalars['StringScalar']>;
  radiusMiles?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTag?: InputMaybe<Scalars['StringScalar']>;
  industryKeywordsMulti?: InputMaybe<Scalars['StringScalar']>;
  primaryIndustriesOnly?: InputMaybe<Scalars['StringScalar']>;
  industryClassification?: InputMaybe<Scalars['StringScalar']>;
  industryKeywords?: InputMaybe<Scalars['StringScalar']>;
  industryCodeList?: InputMaybe<Scalars['StringScalar']>;
  industryCode?: InputMaybe<Scalars['StringScalar']>;
  industryCodeAnd?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  revenueClassification?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassification?: InputMaybe<Scalars['StringScalar']>;
  companyRanking?: InputMaybe<Scalars['StringScalar']>;
  pubPrivateSectors?: InputMaybe<Scalars['StringScalar']>;
  locationSearchType?: InputMaybe<Scalars['StringScalar']>;
  fundingMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  fundingMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAnd?: InputMaybe<Scalars['StringScalar']>;
  allInvestors?: InputMaybe<Scalars['StringScalar']>;
  recentInvestors?: InputMaybe<Scalars['StringScalar']>;
  allFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  recentFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  isCertified?: InputMaybe<Scalars['StringScalar']>;
  certificationStartDate?: InputMaybe<Scalars['StringScalar']>;
  certificationEndDate?: InputMaybe<Scalars['StringScalar']>;
  streetLineTwo?: InputMaybe<Scalars['StringScalar']>;
  hashtagField?: InputMaybe<Scalars['StringScalar']>;
  fullName?: InputMaybe<Scalars['StringScalar']>;
  gender?: InputMaybe<Scalars['StringScalar']>;
  personIds?: InputMaybe<Scalars['StringScalar']>;
  personID?: InputMaybe<Scalars['StringScalar']>;
  personId?: InputMaybe<Scalars['StringScalar']>;
  hasCanadianEmail?: InputMaybe<Scalars['StringScalar']>;
  companyLocationIds?: InputMaybe<Scalars['StringScalar']>;
  emailAddress?: InputMaybe<Scalars['StringScalar']>;
  firstName?: InputMaybe<Scalars['StringScalar']>;
  lastName?: InputMaybe<Scalars['StringScalar']>;
  middleInitial?: InputMaybe<Scalars['StringScalar']>;
  excludedPersonTitle?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  titleCertification?: InputMaybe<Scalars['StringScalar']>;
  personTitle?: InputMaybe<Scalars['StringScalar']>;
  titleSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleSeniority?: InputMaybe<Scalars['StringScalar']>;
  degree?: InputMaybe<Scalars['StringScalar']>;
  school?: InputMaybe<Scalars['StringScalar']>;
  companyDomainName?: InputMaybe<Scalars['StringScalar']>;
  companyPastOrPresent?: InputMaybe<Scalars['StringScalar']>;
  validDateMonthDist?: InputMaybe<Scalars['StringScalar']>;
  contactRequirements?: InputMaybe<Scalars['StringScalar']>;
  zoomJoinsAccount?: InputMaybe<ZoomJoinsAccount>;
  orgJoinsAccount?: InputMaybe<OrgJoinsAccount>;
  titleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeNoCompany?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeOrgExportedCompanies?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgExportedContacts?: InputMaybe<Scalars['StringScalar']>;
  excludeCompanyTags?: InputMaybe<Scalars['StringScalar']>;
  personWebReferences?: InputMaybe<Scalars['StringScalar']>;
  personWebReferencesURL?: InputMaybe<Scalars['StringScalar']>;
  departments?: InputMaybe<Scalars['StringScalar']>;
  jobFunctions?: InputMaybe<Scalars['StringScalar']>;
  isEU?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMin?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMax?: InputMaybe<Scalars['StringScalar']>;
  hasLocationId?: InputMaybe<Scalars['StringScalar']>;
  hasPersonalEmail?: InputMaybe<Scalars['StringScalar']>;
  hasMobilePhone?: InputMaybe<Scalars['StringScalar']>;
  hasEmail?: InputMaybe<Scalars['StringScalar']>;
  hasPhone?: InputMaybe<Scalars['StringScalar']>;
  hasDirectPhone?: InputMaybe<Scalars['StringScalar']>;
  hasCompanyPhone?: InputMaybe<Scalars['StringScalar']>;
  hasTitle?: InputMaybe<Scalars['StringScalar']>;
  hasBeenNotified?: InputMaybe<Scalars['StringScalar']>;
  hasDepartment?: InputMaybe<Scalars['StringScalar']>;
  hasJobFunction?: InputMaybe<Scalars['StringScalar']>;
  hasSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgChartTier?: InputMaybe<Scalars['StringScalar']>;
  orgChartTier?: InputMaybe<Scalars['StringScalar']>;
  personCreationStartDate?: InputMaybe<Scalars['StringScalar']>;
  positionStartDate?: InputMaybe<Scalars['StringScalar']>;
  personCreationEndDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedStartDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedEndDate?: InputMaybe<Scalars['StringScalar']>;
  executivesOnly?: InputMaybe<Scalars['StringScalar']>;
  returnOnlyBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  excludeBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  page?: InputMaybe<Scalars['Float']>;
  rpp?: InputMaybe<Scalars['StringScalar']>;
  facetOptions?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  techAttributeTagNotUsedAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  findRecommendedContacts?: InputMaybe<Scalars['StringScalar']>;
  sortBy?: InputMaybe<Scalars['StringScalar']>;
  sortOrder?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompanies?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesPage?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesRpp?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesSortBy?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesContacts?: InputMaybe<Scalars['StringScalar']>;
  solrPseudoOutputFields?: InputMaybe<Scalars['StringScalar']>;
  scoopEndDate?: InputMaybe<Scalars['StringScalar']>;
  scoopStartDate?: InputMaybe<Scalars['StringScalar']>;
  updatedSinceCreation?: InputMaybe<Scalars['StringScalar']>;
  scoopTypes?: InputMaybe<Scalars['StringScalar']>;
  scoopTopics?: InputMaybe<Scalars['StringScalar']>;
  scoopDepartments?: InputMaybe<Scalars['StringScalar']>;
  scoopDesc?: InputMaybe<Scalars['StringScalar']>;
  scoopIds?: InputMaybe<Scalars['StringScalar']>;
  doziIndustry?: InputMaybe<Scalars['StringScalar']>;
  scoringOptions?: InputMaybe<Scalars['StringScalar']>;
  masked?: InputMaybe<Scalars['Boolean']>;
  subscribed?: InputMaybe<Scalars['Boolean']>;
  orgImported?: InputMaybe<Scalars['Boolean']>;
  sessionToken?: InputMaybe<Scalars['StringScalar']>;
  definedUniverse?: InputMaybe<Scalars['StringScalar']>;
  outputFieldOptions?: InputMaybe<Scalars['StringScalar']>;
  ignoreDefaultFields?: InputMaybe<Scalars['StringScalar']>;
  includeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPersonOnlyMe?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedContacts?: InputMaybe<Scalars['Boolean']>;
  excludeDefunctCompanies?: InputMaybe<Scalars['Boolean']>;
  pTag?: InputMaybe<Scalars['StringScalar']>;
  cTag?: InputMaybe<Scalars['StringScalar']>;
  excludePeopleTags?: InputMaybe<Scalars['StringScalar']>;
  includeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAssociatedDeals?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeAllOrgImportLeads?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOptout?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  excludeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  orgImportOpportunities?: InputMaybe<Array<OrgImportOpportunities>>;
  includeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
};


export type QueryorgchartsSearchArgs = {
  companyId?: InputMaybe<Scalars['String']>;
  departments?: InputMaybe<Scalars['String']>;
  isExecutiveContactOrgChart?: InputMaybe<Scalars['Boolean']>;
  isTierLevelOne?: InputMaybe<Scalars['Boolean']>;
  jobFunctionId?: InputMaybe<Scalars['String']>;
  employees?: InputMaybe<Scalars['Float']>;
  fullName?: InputMaybe<Scalars['String']>;
  personTitle?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Float']>;
  highestTier?: InputMaybe<Scalars['Float']>;
  jobFunctions?: InputMaybe<Scalars['String']>;
};


export type QuerycompanyHierarchySearchArgs = {
  companyIds?: InputMaybe<Scalars['String']>;
};


export type QueryfacetsArgs = {
  companyId?: InputMaybe<Scalars['String']>;
  facets?: InputMaybe<Scalars['String']>;
  subUnitType?: InputMaybe<Scalars['String']>;
  additionalOptions?: InputMaybe<LocationAdditionalOptions>;
  limits?: InputMaybe<Scalars['Float']>;
  fetchTechAddDropOptions?: InputMaybe<Scalars['Boolean']>;
  showUnmaskedContacts?: InputMaybe<Scalars['Boolean']>;
  packageName?: InputMaybe<Scalars['String']>;
  defaultSearchParams?: InputMaybe<DefaultSearchParams>;
  companyID?: InputMaybe<Scalars['String']>;
};


export type QuerysuggestionsArgs = {
  rpp?: InputMaybe<Scalars['Float']>;
};


export type QueryquickSearchArgs = {
  rpp?: InputMaybe<Scalars['Float']>;
  quickSearch?: InputMaybe<Scalars['String']>;
};


export type QuerycompanyDetailsArgs = {
  companyID?: InputMaybe<Scalars['String']>;
  fetchTechAddDropOptions?: InputMaybe<Scalars['Boolean']>;
  showUnmaskedContacts?: InputMaybe<Scalars['Boolean']>;
  defaultSearchParams?: InputMaybe<DefaultSearchParams>;
  packageName?: InputMaybe<Scalars['String']>;
  buyingCommittee?: InputMaybe<Scalars['String']>;
  companyPastOrPresent?: InputMaybe<Scalars['StringScalar']>;
  contactRequirements?: InputMaybe<Scalars['StringScalar']>;
  doziIndustry?: InputMaybe<Scalars['StringScalar']>;
  excludeDefunctCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeNoCompany?: InputMaybe<Scalars['StringScalar']>;
  isCertified?: InputMaybe<Scalars['StringScalar']>;
  sortBy?: InputMaybe<Scalars['StringScalar']>;
  sortOrder?: InputMaybe<Scalars['StringScalar']>;
  nnNegation?: InputMaybe<Scalars['StringScalar']>;
  nnQueryId?: InputMaybe<Scalars['StringScalar']>;
  nnStartDate?: InputMaybe<Scalars['StringScalar']>;
  nnEndDate?: InputMaybe<Scalars['StringScalar']>;
  companyId?: InputMaybe<Scalars['StringScalar']>;
  companyIds?: InputMaybe<Scalars['StringScalar']>;
  revenueMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  revenueMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMax?: InputMaybe<Scalars['StringScalar']>;
  techAttributesAddedDropped?: InputMaybe<TechAttributesAddedDropped>;
  techAttributeNotUsedAnd?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMin?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMax?: InputMaybe<Scalars['StringScalar']>;
  locationCountMin?: InputMaybe<Scalars['StringScalar']>;
  locationCountMax?: InputMaybe<Scalars['StringScalar']>;
  metroAreas?: InputMaybe<Scalars['StringScalar']>;
  doziPrimaryIndustry?: InputMaybe<Scalars['StringScalar']>;
  hqLocationAreaCodes?: InputMaybe<Scalars['StringScalar']>;
  departmentEmployeeCounts?: InputMaybe<DepartmentEmployeeCounts>;
  departmentBudgets?: InputMaybe<DepartmentBudgets>;
  street?: InputMaybe<Scalars['StringScalar']>;
  locationType?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  negateScope?: InputMaybe<Scalars['Boolean']>;
  itBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  itBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  anyFundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  anyFundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  fundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  anyFundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  allInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  recentInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  state?: InputMaybe<Scalars['StringScalar']>;
  metroRegion?: InputMaybe<Scalars['StringScalar']>;
  country?: InputMaybe<Scalars['StringScalar']>;
  continent?: InputMaybe<Scalars['StringScalar']>;
  companyType?: InputMaybe<Scalars['StringScalar']>;
  companyName?: InputMaybe<Scalars['StringScalar']>;
  companyDomainNames?: InputMaybe<Scalars['StringScalar']>;
  companyDesc?: InputMaybe<Scalars['StringScalar']>;
  isPublic?: InputMaybe<Scalars['StringScalar']>;
  location?: InputMaybe<Scalars['StringScalar']>;
  zipCode?: InputMaybe<Scalars['StringScalar']>;
  radiusMiles?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTag?: InputMaybe<Scalars['StringScalar']>;
  industryKeywordsMulti?: InputMaybe<Scalars['StringScalar']>;
  primaryIndustriesOnly?: InputMaybe<Scalars['StringScalar']>;
  industryClassification?: InputMaybe<Scalars['StringScalar']>;
  industryKeywords?: InputMaybe<Scalars['StringScalar']>;
  industryCodeList?: InputMaybe<Scalars['StringScalar']>;
  industryCode?: InputMaybe<Scalars['StringScalar']>;
  industryCodeAnd?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  revenueClassification?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassification?: InputMaybe<Scalars['StringScalar']>;
  companyRanking?: InputMaybe<Scalars['StringScalar']>;
  pubPrivateSectors?: InputMaybe<Scalars['StringScalar']>;
  locationSearchType?: InputMaybe<Scalars['StringScalar']>;
  fundingMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  fundingMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAnd?: InputMaybe<Scalars['StringScalar']>;
  allInvestors?: InputMaybe<Scalars['StringScalar']>;
  recentInvestors?: InputMaybe<Scalars['StringScalar']>;
  allFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  recentFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  certificationStartDate?: InputMaybe<Scalars['StringScalar']>;
  certificationEndDate?: InputMaybe<Scalars['StringScalar']>;
  streetLineTwo?: InputMaybe<Scalars['StringScalar']>;
  hashtagField?: InputMaybe<Scalars['StringScalar']>;
  fullName?: InputMaybe<Scalars['StringScalar']>;
  gender?: InputMaybe<Scalars['StringScalar']>;
  personIds?: InputMaybe<Scalars['StringScalar']>;
  personID?: InputMaybe<Scalars['StringScalar']>;
  personId?: InputMaybe<Scalars['StringScalar']>;
  hasCanadianEmail?: InputMaybe<Scalars['StringScalar']>;
  companyLocationIds?: InputMaybe<Scalars['StringScalar']>;
  emailAddress?: InputMaybe<Scalars['StringScalar']>;
  firstName?: InputMaybe<Scalars['StringScalar']>;
  lastName?: InputMaybe<Scalars['StringScalar']>;
  middleInitial?: InputMaybe<Scalars['StringScalar']>;
  excludedPersonTitle?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  titleCertification?: InputMaybe<Scalars['StringScalar']>;
  personTitle?: InputMaybe<Scalars['StringScalar']>;
  titleSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleSeniority?: InputMaybe<Scalars['StringScalar']>;
  degree?: InputMaybe<Scalars['StringScalar']>;
  school?: InputMaybe<Scalars['StringScalar']>;
  companyDomainName?: InputMaybe<Scalars['StringScalar']>;
  validDateMonthDist?: InputMaybe<Scalars['StringScalar']>;
  zoomJoinsAccount?: InputMaybe<ZoomJoinsAccount>;
  orgJoinsAccount?: InputMaybe<OrgJoinsAccount>;
  titleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeOrgExportedCompanies?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgExportedContacts?: InputMaybe<Scalars['StringScalar']>;
  excludeCompanyTags?: InputMaybe<Scalars['StringScalar']>;
  personWebReferences?: InputMaybe<Scalars['StringScalar']>;
  personWebReferencesURL?: InputMaybe<Scalars['StringScalar']>;
  departments?: InputMaybe<Scalars['StringScalar']>;
  jobFunctions?: InputMaybe<Scalars['StringScalar']>;
  isEU?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMin?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMax?: InputMaybe<Scalars['StringScalar']>;
  hasLocationId?: InputMaybe<Scalars['StringScalar']>;
  hasPersonalEmail?: InputMaybe<Scalars['StringScalar']>;
  hasMobilePhone?: InputMaybe<Scalars['StringScalar']>;
  hasEmail?: InputMaybe<Scalars['StringScalar']>;
  hasPhone?: InputMaybe<Scalars['StringScalar']>;
  hasDirectPhone?: InputMaybe<Scalars['StringScalar']>;
  hasCompanyPhone?: InputMaybe<Scalars['StringScalar']>;
  hasTitle?: InputMaybe<Scalars['StringScalar']>;
  hasBeenNotified?: InputMaybe<Scalars['StringScalar']>;
  hasDepartment?: InputMaybe<Scalars['StringScalar']>;
  hasJobFunction?: InputMaybe<Scalars['StringScalar']>;
  hasSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgChartTier?: InputMaybe<Scalars['StringScalar']>;
  orgChartTier?: InputMaybe<Scalars['StringScalar']>;
  personCreationStartDate?: InputMaybe<Scalars['StringScalar']>;
  positionStartDate?: InputMaybe<Scalars['StringScalar']>;
  personCreationEndDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedStartDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedEndDate?: InputMaybe<Scalars['StringScalar']>;
  executivesOnly?: InputMaybe<Scalars['StringScalar']>;
  returnOnlyBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  excludeBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  page?: InputMaybe<Scalars['Float']>;
  rpp?: InputMaybe<Scalars['StringScalar']>;
  facetOptions?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  techAttributeTagNotUsedAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  findRecommendedContacts?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompanies?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesPage?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesRpp?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesSortBy?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesContacts?: InputMaybe<Scalars['StringScalar']>;
  solrPseudoOutputFields?: InputMaybe<Scalars['StringScalar']>;
  scoopEndDate?: InputMaybe<Scalars['StringScalar']>;
  scoopStartDate?: InputMaybe<Scalars['StringScalar']>;
  updatedSinceCreation?: InputMaybe<Scalars['StringScalar']>;
  scoopTypes?: InputMaybe<Scalars['StringScalar']>;
  scoopTopics?: InputMaybe<Scalars['StringScalar']>;
  scoopDepartments?: InputMaybe<Scalars['StringScalar']>;
  scoopDesc?: InputMaybe<Scalars['StringScalar']>;
  scoopIds?: InputMaybe<Scalars['StringScalar']>;
  scoringOptions?: InputMaybe<Scalars['StringScalar']>;
  masked?: InputMaybe<Scalars['Boolean']>;
  subscribed?: InputMaybe<Scalars['Boolean']>;
  orgImported?: InputMaybe<Scalars['Boolean']>;
  sessionToken?: InputMaybe<Scalars['StringScalar']>;
  definedUniverse?: InputMaybe<Scalars['StringScalar']>;
  outputFieldOptions?: InputMaybe<Scalars['StringScalar']>;
  ignoreDefaultFields?: InputMaybe<Scalars['StringScalar']>;
  includeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPersonOnlyMe?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedContacts?: InputMaybe<Scalars['Boolean']>;
  pTag?: InputMaybe<Scalars['StringScalar']>;
  cTag?: InputMaybe<Scalars['StringScalar']>;
  excludePeopleTags?: InputMaybe<Scalars['StringScalar']>;
  includeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAssociatedDeals?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeAllOrgImportLeads?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOptout?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  excludeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  orgImportOpportunities?: InputMaybe<Array<OrgImportOpportunities>>;
  includeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  parsingOptions?: InputMaybe<ParsingOptions>;
  source?: InputMaybe<Scalars['String']>;
  addressVerificationStatusList?: InputMaybe<Scalars['String']>;
  parentId?: InputMaybe<Scalars['String']>;
  ultimateParentId?: InputMaybe<Scalars['String']>;
  subUnitType?: InputMaybe<Scalars['String']>;
  isLocationHierarchy?: InputMaybe<Scalars['Boolean']>;
};


export type QuerycompanySearchArgs = {
  parsingOptions?: InputMaybe<ParsingOptions>;
  source?: InputMaybe<Scalars['String']>;
  addressVerificationStatusList?: InputMaybe<Scalars['String']>;
  parentId?: InputMaybe<Scalars['String']>;
  ultimateParentId?: InputMaybe<Scalars['String']>;
  subUnitType?: InputMaybe<Scalars['String']>;
  isLocationHierarchy?: InputMaybe<Scalars['Boolean']>;
  companyID?: InputMaybe<Scalars['String']>;
  fetchTechAddDropOptions?: InputMaybe<Scalars['Boolean']>;
  showUnmaskedContacts?: InputMaybe<Scalars['Boolean']>;
  defaultSearchParams?: InputMaybe<DefaultSearchParams>;
  packageName?: InputMaybe<Scalars['String']>;
  buyingCommittee?: InputMaybe<Scalars['String']>;
  companyPastOrPresent?: InputMaybe<Scalars['StringScalar']>;
  contactRequirements?: InputMaybe<Scalars['StringScalar']>;
  doziIndustry?: InputMaybe<Scalars['StringScalar']>;
  excludeDefunctCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeNoCompany?: InputMaybe<Scalars['StringScalar']>;
  isCertified?: InputMaybe<Scalars['StringScalar']>;
  sortBy?: InputMaybe<Scalars['StringScalar']>;
  sortOrder?: InputMaybe<Scalars['StringScalar']>;
  nnNegation?: InputMaybe<Scalars['StringScalar']>;
  nnQueryId?: InputMaybe<Scalars['StringScalar']>;
  nnStartDate?: InputMaybe<Scalars['StringScalar']>;
  nnEndDate?: InputMaybe<Scalars['StringScalar']>;
  companyId?: InputMaybe<Scalars['StringScalar']>;
  companyIds?: InputMaybe<Scalars['StringScalar']>;
  revenueMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  revenueMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMax?: InputMaybe<Scalars['StringScalar']>;
  techAttributesAddedDropped?: InputMaybe<TechAttributesAddedDropped>;
  techAttributeNotUsedAnd?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMin?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMax?: InputMaybe<Scalars['StringScalar']>;
  locationCountMin?: InputMaybe<Scalars['StringScalar']>;
  locationCountMax?: InputMaybe<Scalars['StringScalar']>;
  metroAreas?: InputMaybe<Scalars['StringScalar']>;
  doziPrimaryIndustry?: InputMaybe<Scalars['StringScalar']>;
  hqLocationAreaCodes?: InputMaybe<Scalars['StringScalar']>;
  departmentEmployeeCounts?: InputMaybe<DepartmentEmployeeCounts>;
  departmentBudgets?: InputMaybe<DepartmentBudgets>;
  street?: InputMaybe<Scalars['StringScalar']>;
  locationType?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  negateScope?: InputMaybe<Scalars['Boolean']>;
  itBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  itBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  anyFundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  anyFundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  fundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  anyFundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  allInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  recentInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  state?: InputMaybe<Scalars['StringScalar']>;
  metroRegion?: InputMaybe<Scalars['StringScalar']>;
  country?: InputMaybe<Scalars['StringScalar']>;
  continent?: InputMaybe<Scalars['StringScalar']>;
  companyType?: InputMaybe<Scalars['StringScalar']>;
  companyName?: InputMaybe<Scalars['StringScalar']>;
  companyDomainNames?: InputMaybe<Scalars['StringScalar']>;
  companyDesc?: InputMaybe<Scalars['StringScalar']>;
  isPublic?: InputMaybe<Scalars['StringScalar']>;
  location?: InputMaybe<Scalars['StringScalar']>;
  zipCode?: InputMaybe<Scalars['StringScalar']>;
  radiusMiles?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTag?: InputMaybe<Scalars['StringScalar']>;
  industryKeywordsMulti?: InputMaybe<Scalars['StringScalar']>;
  primaryIndustriesOnly?: InputMaybe<Scalars['StringScalar']>;
  industryClassification?: InputMaybe<Scalars['StringScalar']>;
  industryKeywords?: InputMaybe<Scalars['StringScalar']>;
  industryCodeList?: InputMaybe<Scalars['StringScalar']>;
  industryCode?: InputMaybe<Scalars['StringScalar']>;
  industryCodeAnd?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  revenueClassification?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassification?: InputMaybe<Scalars['StringScalar']>;
  companyRanking?: InputMaybe<Scalars['StringScalar']>;
  pubPrivateSectors?: InputMaybe<Scalars['StringScalar']>;
  locationSearchType?: InputMaybe<Scalars['StringScalar']>;
  fundingMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  fundingMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAnd?: InputMaybe<Scalars['StringScalar']>;
  allInvestors?: InputMaybe<Scalars['StringScalar']>;
  recentInvestors?: InputMaybe<Scalars['StringScalar']>;
  allFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  recentFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  certificationStartDate?: InputMaybe<Scalars['StringScalar']>;
  certificationEndDate?: InputMaybe<Scalars['StringScalar']>;
  streetLineTwo?: InputMaybe<Scalars['StringScalar']>;
  hashtagField?: InputMaybe<Scalars['StringScalar']>;
  fullName?: InputMaybe<Scalars['StringScalar']>;
  gender?: InputMaybe<Scalars['StringScalar']>;
  personIds?: InputMaybe<Scalars['StringScalar']>;
  personID?: InputMaybe<Scalars['StringScalar']>;
  personId?: InputMaybe<Scalars['StringScalar']>;
  hasCanadianEmail?: InputMaybe<Scalars['StringScalar']>;
  companyLocationIds?: InputMaybe<Scalars['StringScalar']>;
  emailAddress?: InputMaybe<Scalars['StringScalar']>;
  firstName?: InputMaybe<Scalars['StringScalar']>;
  lastName?: InputMaybe<Scalars['StringScalar']>;
  middleInitial?: InputMaybe<Scalars['StringScalar']>;
  excludedPersonTitle?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  titleCertification?: InputMaybe<Scalars['StringScalar']>;
  personTitle?: InputMaybe<Scalars['StringScalar']>;
  titleSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleSeniority?: InputMaybe<Scalars['StringScalar']>;
  degree?: InputMaybe<Scalars['StringScalar']>;
  school?: InputMaybe<Scalars['StringScalar']>;
  companyDomainName?: InputMaybe<Scalars['StringScalar']>;
  validDateMonthDist?: InputMaybe<Scalars['StringScalar']>;
  zoomJoinsAccount?: InputMaybe<ZoomJoinsAccount>;
  orgJoinsAccount?: InputMaybe<OrgJoinsAccount>;
  titleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeOrgExportedCompanies?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgExportedContacts?: InputMaybe<Scalars['StringScalar']>;
  excludeCompanyTags?: InputMaybe<Scalars['StringScalar']>;
  personWebReferences?: InputMaybe<Scalars['StringScalar']>;
  personWebReferencesURL?: InputMaybe<Scalars['StringScalar']>;
  departments?: InputMaybe<Scalars['StringScalar']>;
  jobFunctions?: InputMaybe<Scalars['StringScalar']>;
  isEU?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMin?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMax?: InputMaybe<Scalars['StringScalar']>;
  hasLocationId?: InputMaybe<Scalars['StringScalar']>;
  hasPersonalEmail?: InputMaybe<Scalars['StringScalar']>;
  hasMobilePhone?: InputMaybe<Scalars['StringScalar']>;
  hasEmail?: InputMaybe<Scalars['StringScalar']>;
  hasPhone?: InputMaybe<Scalars['StringScalar']>;
  hasDirectPhone?: InputMaybe<Scalars['StringScalar']>;
  hasCompanyPhone?: InputMaybe<Scalars['StringScalar']>;
  hasTitle?: InputMaybe<Scalars['StringScalar']>;
  hasBeenNotified?: InputMaybe<Scalars['StringScalar']>;
  hasDepartment?: InputMaybe<Scalars['StringScalar']>;
  hasJobFunction?: InputMaybe<Scalars['StringScalar']>;
  hasSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgChartTier?: InputMaybe<Scalars['StringScalar']>;
  orgChartTier?: InputMaybe<Scalars['StringScalar']>;
  personCreationStartDate?: InputMaybe<Scalars['StringScalar']>;
  positionStartDate?: InputMaybe<Scalars['StringScalar']>;
  personCreationEndDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedStartDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedEndDate?: InputMaybe<Scalars['StringScalar']>;
  executivesOnly?: InputMaybe<Scalars['StringScalar']>;
  returnOnlyBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  excludeBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  page?: InputMaybe<Scalars['Float']>;
  rpp?: InputMaybe<Scalars['StringScalar']>;
  facetOptions?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  techAttributeTagNotUsedAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  findRecommendedContacts?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompanies?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesPage?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesRpp?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesSortBy?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesContacts?: InputMaybe<Scalars['StringScalar']>;
  solrPseudoOutputFields?: InputMaybe<Scalars['StringScalar']>;
  scoopEndDate?: InputMaybe<Scalars['StringScalar']>;
  scoopStartDate?: InputMaybe<Scalars['StringScalar']>;
  updatedSinceCreation?: InputMaybe<Scalars['StringScalar']>;
  scoopTypes?: InputMaybe<Scalars['StringScalar']>;
  scoopTopics?: InputMaybe<Scalars['StringScalar']>;
  scoopDepartments?: InputMaybe<Scalars['StringScalar']>;
  scoopDesc?: InputMaybe<Scalars['StringScalar']>;
  scoopIds?: InputMaybe<Scalars['StringScalar']>;
  scoringOptions?: InputMaybe<Scalars['StringScalar']>;
  masked?: InputMaybe<Scalars['Boolean']>;
  subscribed?: InputMaybe<Scalars['Boolean']>;
  orgImported?: InputMaybe<Scalars['Boolean']>;
  sessionToken?: InputMaybe<Scalars['StringScalar']>;
  definedUniverse?: InputMaybe<Scalars['StringScalar']>;
  outputFieldOptions?: InputMaybe<Scalars['StringScalar']>;
  ignoreDefaultFields?: InputMaybe<Scalars['StringScalar']>;
  includeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPersonOnlyMe?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedContacts?: InputMaybe<Scalars['Boolean']>;
  pTag?: InputMaybe<Scalars['StringScalar']>;
  cTag?: InputMaybe<Scalars['StringScalar']>;
  excludePeopleTags?: InputMaybe<Scalars['StringScalar']>;
  includeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAssociatedDeals?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeAllOrgImportLeads?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOptout?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  excludeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  orgImportOpportunities?: InputMaybe<Array<OrgImportOpportunities>>;
  includeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  searchFacadeParams?: InputMaybe<CompanyArgs>;
};

export type CompanyArgs = {
  nnNegation?: InputMaybe<Scalars['StringScalar']>;
  nnQueryId?: InputMaybe<Scalars['StringScalar']>;
  nnStartDate?: InputMaybe<Scalars['StringScalar']>;
  nnEndDate?: InputMaybe<Scalars['StringScalar']>;
  companyId?: InputMaybe<Scalars['StringScalar']>;
  companyIds?: InputMaybe<Scalars['StringScalar']>;
  revenueMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  revenueMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMax?: InputMaybe<Scalars['StringScalar']>;
  techAttributesAddedDropped?: InputMaybe<TechAttributesAddedDropped>;
  techAttributeNotUsedAnd?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMin?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMax?: InputMaybe<Scalars['StringScalar']>;
  locationCountMin?: InputMaybe<Scalars['StringScalar']>;
  locationCountMax?: InputMaybe<Scalars['StringScalar']>;
  metroAreas?: InputMaybe<Scalars['StringScalar']>;
  doziPrimaryIndustry?: InputMaybe<Scalars['StringScalar']>;
  hqLocationAreaCodes?: InputMaybe<Scalars['StringScalar']>;
  departmentEmployeeCounts?: InputMaybe<DepartmentEmployeeCounts>;
  departmentBudgets?: InputMaybe<DepartmentBudgets>;
  street?: InputMaybe<Scalars['StringScalar']>;
  locationType?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  negateScope?: InputMaybe<Scalars['Boolean']>;
  itBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  itBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  anyFundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  anyFundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  fundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  anyFundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  allInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  recentInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  state?: InputMaybe<Scalars['StringScalar']>;
  metroRegion?: InputMaybe<Scalars['StringScalar']>;
  country?: InputMaybe<Scalars['StringScalar']>;
  continent?: InputMaybe<Scalars['StringScalar']>;
  companyType?: InputMaybe<Scalars['StringScalar']>;
  companyName?: InputMaybe<Scalars['StringScalar']>;
  companyDomainNames?: InputMaybe<Scalars['StringScalar']>;
  companyDesc?: InputMaybe<Scalars['StringScalar']>;
  isPublic?: InputMaybe<Scalars['StringScalar']>;
  location?: InputMaybe<Scalars['StringScalar']>;
  zipCode?: InputMaybe<Scalars['StringScalar']>;
  radiusMiles?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTag?: InputMaybe<Scalars['StringScalar']>;
  industryKeywordsMulti?: InputMaybe<Scalars['StringScalar']>;
  primaryIndustriesOnly?: InputMaybe<Scalars['StringScalar']>;
  industryClassification?: InputMaybe<Scalars['StringScalar']>;
  industryKeywords?: InputMaybe<Scalars['StringScalar']>;
  industryCodeList?: InputMaybe<Scalars['StringScalar']>;
  industryCode?: InputMaybe<Scalars['StringScalar']>;
  industryCodeAnd?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  revenueClassification?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassification?: InputMaybe<Scalars['StringScalar']>;
  companyRanking?: InputMaybe<Scalars['StringScalar']>;
  pubPrivateSectors?: InputMaybe<Scalars['StringScalar']>;
  locationSearchType?: InputMaybe<Scalars['StringScalar']>;
  fundingMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  fundingMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAnd?: InputMaybe<Scalars['StringScalar']>;
  allInvestors?: InputMaybe<Scalars['StringScalar']>;
  recentInvestors?: InputMaybe<Scalars['StringScalar']>;
  allFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  recentFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  isCertified?: InputMaybe<Scalars['String']>;
  certificationStartDate?: InputMaybe<Scalars['StringScalar']>;
  certificationEndDate?: InputMaybe<Scalars['StringScalar']>;
  streetLineTwo?: InputMaybe<Scalars['StringScalar']>;
  hashtagField?: InputMaybe<Scalars['StringScalar']>;
  fullName?: InputMaybe<Scalars['StringScalar']>;
  gender?: InputMaybe<Scalars['StringScalar']>;
  personIds?: InputMaybe<Scalars['StringScalar']>;
  personID?: InputMaybe<Scalars['StringScalar']>;
  personId?: InputMaybe<Scalars['StringScalar']>;
  hasCanadianEmail?: InputMaybe<Scalars['StringScalar']>;
  companyLocationIds?: InputMaybe<Scalars['StringScalar']>;
  emailAddress?: InputMaybe<Scalars['StringScalar']>;
  firstName?: InputMaybe<Scalars['StringScalar']>;
  lastName?: InputMaybe<Scalars['StringScalar']>;
  middleInitial?: InputMaybe<Scalars['StringScalar']>;
  excludedPersonTitle?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  titleCertification?: InputMaybe<Scalars['StringScalar']>;
  personTitle?: InputMaybe<Scalars['StringScalar']>;
  titleSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleSeniority?: InputMaybe<Scalars['StringScalar']>;
  degree?: InputMaybe<Scalars['StringScalar']>;
  school?: InputMaybe<Scalars['StringScalar']>;
  companyDomainName?: InputMaybe<Scalars['StringScalar']>;
  companyPastOrPresent?: InputMaybe<Scalars['String']>;
  validDateMonthDist?: InputMaybe<Scalars['StringScalar']>;
  contactRequirements?: InputMaybe<Scalars['String']>;
  zoomJoinsAccount?: InputMaybe<ZoomJoinsAccount>;
  orgJoinsAccount?: InputMaybe<OrgJoinsAccount>;
  titleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeNoCompany?: InputMaybe<Scalars['String']>;
  excludeExportedCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeOrgExportedCompanies?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgExportedContacts?: InputMaybe<Scalars['StringScalar']>;
  excludeCompanyTags?: InputMaybe<Scalars['StringScalar']>;
  personWebReferences?: InputMaybe<Scalars['StringScalar']>;
  personWebReferencesURL?: InputMaybe<Scalars['StringScalar']>;
  departments?: InputMaybe<Scalars['StringScalar']>;
  jobFunctions?: InputMaybe<Scalars['StringScalar']>;
  isEU?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMin?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMax?: InputMaybe<Scalars['StringScalar']>;
  hasLocationId?: InputMaybe<Scalars['StringScalar']>;
  hasPersonalEmail?: InputMaybe<Scalars['StringScalar']>;
  hasMobilePhone?: InputMaybe<Scalars['StringScalar']>;
  hasEmail?: InputMaybe<Scalars['StringScalar']>;
  hasPhone?: InputMaybe<Scalars['StringScalar']>;
  hasDirectPhone?: InputMaybe<Scalars['StringScalar']>;
  hasCompanyPhone?: InputMaybe<Scalars['StringScalar']>;
  hasTitle?: InputMaybe<Scalars['StringScalar']>;
  hasBeenNotified?: InputMaybe<Scalars['StringScalar']>;
  hasDepartment?: InputMaybe<Scalars['StringScalar']>;
  hasJobFunction?: InputMaybe<Scalars['StringScalar']>;
  hasSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgChartTier?: InputMaybe<Scalars['StringScalar']>;
  orgChartTier?: InputMaybe<Scalars['StringScalar']>;
  personCreationStartDate?: InputMaybe<Scalars['StringScalar']>;
  positionStartDate?: InputMaybe<Scalars['StringScalar']>;
  personCreationEndDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedStartDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedEndDate?: InputMaybe<Scalars['StringScalar']>;
  executivesOnly?: InputMaybe<Scalars['StringScalar']>;
  returnOnlyBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  excludeBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  page?: InputMaybe<Scalars['Float']>;
  rpp?: InputMaybe<Scalars['StringScalar']>;
  facetOptions?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  techAttributeTagNotUsedAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  findRecommendedContacts?: InputMaybe<Scalars['StringScalar']>;
  sortBy?: InputMaybe<Scalars['String']>;
  sortOrder?: InputMaybe<Scalars['String']>;
  uniqueCompanies?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesPage?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesRpp?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesSortBy?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesContacts?: InputMaybe<Scalars['StringScalar']>;
  solrPseudoOutputFields?: InputMaybe<Scalars['StringScalar']>;
  scoopEndDate?: InputMaybe<Scalars['StringScalar']>;
  scoopStartDate?: InputMaybe<Scalars['StringScalar']>;
  updatedSinceCreation?: InputMaybe<Scalars['StringScalar']>;
  scoopTypes?: InputMaybe<Scalars['StringScalar']>;
  scoopTopics?: InputMaybe<Scalars['StringScalar']>;
  scoopDepartments?: InputMaybe<Scalars['StringScalar']>;
  scoopDesc?: InputMaybe<Scalars['StringScalar']>;
  scoopIds?: InputMaybe<Scalars['StringScalar']>;
  doziIndustry?: InputMaybe<Scalars['String']>;
  scoringOptions?: InputMaybe<Scalars['StringScalar']>;
  masked?: InputMaybe<Scalars['Boolean']>;
  subscribed?: InputMaybe<Scalars['Boolean']>;
  orgImported?: InputMaybe<Scalars['Boolean']>;
  sessionToken?: InputMaybe<Scalars['StringScalar']>;
  definedUniverse?: InputMaybe<Scalars['StringScalar']>;
  outputFieldOptions?: InputMaybe<Scalars['StringScalar']>;
  ignoreDefaultFields?: InputMaybe<Scalars['StringScalar']>;
  includeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPersonOnlyMe?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedContacts?: InputMaybe<Scalars['Boolean']>;
  excludeDefunctCompanies?: InputMaybe<Scalars['Boolean']>;
  pTag?: InputMaybe<Scalars['StringScalar']>;
  cTag?: InputMaybe<Scalars['StringScalar']>;
  excludePeopleTags?: InputMaybe<Scalars['StringScalar']>;
  includeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAssociatedDeals?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeAllOrgImportLeads?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOptout?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  excludeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  orgImportOpportunities?: InputMaybe<Array<OrgImportOpportunities>>;
  includeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  companyID?: InputMaybe<Scalars['String']>;
  fetchTechAddDropOptions?: InputMaybe<Scalars['Boolean']>;
  showUnmaskedContacts?: InputMaybe<Scalars['Boolean']>;
  defaultSearchParams?: InputMaybe<DefaultSearchParams>;
  packageName?: InputMaybe<Scalars['String']>;
  buyingCommittee?: InputMaybe<Scalars['String']>;
  parsingOptions?: InputMaybe<ParsingOptions>;
  source?: InputMaybe<Scalars['String']>;
  addressVerificationStatusList?: InputMaybe<Scalars['String']>;
  parentId?: InputMaybe<Scalars['String']>;
  ultimateParentId?: InputMaybe<Scalars['String']>;
  subUnitType?: InputMaybe<Scalars['String']>;
  isLocationHierarchy?: InputMaybe<Scalars['Boolean']>;
};

    }
    export type QueryFacetsSearchSdk = {
  /** null **/
  hCompaniesSearch: InContextSdkMethod<FacetsSearchTypes.Query['hCompaniesSearch'], FacetsSearchTypes.QueryhCompaniesSearchArgs, MeshContext>,
  /** null **/
  hUnifiedCompaniesSearch: InContextSdkMethod<FacetsSearchTypes.Query['hUnifiedCompaniesSearch'], FacetsSearchTypes.QueryhUnifiedCompaniesSearchArgs, MeshContext>,
  /** null **/
  personDetails: InContextSdkMethod<FacetsSearchTypes.Query['personDetails'], FacetsSearchTypes.QuerypersonDetailsArgs, MeshContext>,
  /** null **/
  personSearch: InContextSdkMethod<FacetsSearchTypes.Query['personSearch'], FacetsSearchTypes.QuerypersonSearchArgs, MeshContext>,
  /** null **/
  scoopsSearch: InContextSdkMethod<FacetsSearchTypes.Query['scoopsSearch'], FacetsSearchTypes.QueryscoopsSearchArgs, MeshContext>,
  /** null **/
  orgchartsSearch: InContextSdkMethod<FacetsSearchTypes.Query['orgchartsSearch'], FacetsSearchTypes.QueryorgchartsSearchArgs, MeshContext>,
  /** null **/
  companyHierarchySearch: InContextSdkMethod<FacetsSearchTypes.Query['companyHierarchySearch'], FacetsSearchTypes.QuerycompanyHierarchySearchArgs, MeshContext>,
  /** null **/
  facets: InContextSdkMethod<FacetsSearchTypes.Query['facets'], FacetsSearchTypes.QueryfacetsArgs, MeshContext>,
  /** null **/
  suggestions: InContextSdkMethod<FacetsSearchTypes.Query['suggestions'], FacetsSearchTypes.QuerysuggestionsArgs, MeshContext>,
  /** null **/
  quickSearch: InContextSdkMethod<FacetsSearchTypes.Query['quickSearch'], FacetsSearchTypes.QueryquickSearchArgs, MeshContext>,
  /** null **/
  companyDetails: InContextSdkMethod<FacetsSearchTypes.Query['companyDetails'], FacetsSearchTypes.QuerycompanyDetailsArgs, MeshContext>,
  /** null **/
  companySearch: InContextSdkMethod<FacetsSearchTypes.Query['companySearch'], FacetsSearchTypes.QuerycompanySearchArgs, MeshContext>
};

export type MutationFacetsSearchSdk = {

};

export type SubscriptionFacetsSearchSdk = {

};


    export namespace ScoopsSearchTypes {
      export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  StringScalar: any;
};

export type FundingInvestorModel = {
  companyName?: Maybe<Scalars['String']>;
};

export type FundingModel = {
  amountIn000s?: Maybe<Scalars['Float']>;
  date?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  investors?: Maybe<FundingInvestorModel>;
};

export type DoziIndustryModel = {
  displayName?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  isPrimary?: Maybe<Scalars['Boolean']>;
  score?: Maybe<Scalars['Float']>;
  code?: Maybe<Scalars['String']>;
};

export type UltimateParentModel = {
  id?: Maybe<Scalars['Float']>;
  name?: Maybe<Scalars['String']>;
};

export type MergerModel = {
  companyId?: Maybe<Scalars['String']>;
  companyName?: Maybe<Scalars['String']>;
  zoomUrl?: Maybe<Scalars['String']>;
};

export type LocationModel = {
  Street?: Maybe<Scalars['String']>;
  City?: Maybe<Scalars['String']>;
  State?: Maybe<Scalars['String']>;
  Zip?: Maybe<Scalars['String']>;
  street?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  CountryCode?: Maybe<Scalars['String']>;
  countryCode?: Maybe<Scalars['String']>;
};

export type SocialMediaParsed = {
  linkedin?: Maybe<Scalars['String']>;
  facebook?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  youtube?: Maybe<Scalars['String']>;
};

export type SocialMediaModel = {
  followerCount?: Maybe<Scalars['Float']>;
  socialNetworkType?: Maybe<Scalars['String']>;
  socialNetworkUrl?: Maybe<Scalars['String']>;
};

export type SocialMediaUrlModel = {
  socialMedia?: Maybe<Array<SocialMediaModel>>;
};

export type PrivacyRegulationsModel = {
  privacyRegulationFlag?: Maybe<Scalars['String']>;
};

export type OrgUniversalTagsModel = {
  tagName?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Boolean']>;
};

export type OwnersValueModel = {
  date?: Maybe<Scalars['Float']>;
  crmEntityId?: Maybe<Scalars['String']>;
  ownerId?: Maybe<Scalars['String']>;
  ownerName?: Maybe<Scalars['String']>;
};

export type OwnersModel = {
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Array<OwnersValueModel>>;
};

export type ImportedDataModel = {
  date?: Maybe<Scalars['Float']>;
  owners?: Maybe<Array<OwnersModel>>;
};

export type AttributeChipModel = {
  displayName?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
  isPrimary?: Maybe<Scalars['Boolean']>;
  chipHref?: Maybe<Scalars['String']>;
  lastSeen?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  count?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
};

export type AttributeChipGroupModel = {
  areaOfStudy?: Maybe<Scalars['String']>;
  degree?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  attributeCol?: Maybe<Array<AttributeChipModel>>;
  isOpen?: Maybe<Scalars['Boolean']>;
  isPrimary?: Maybe<Scalars['Boolean']>;
  order?: Maybe<Scalars['Float']>;
};

export type NoticeInfoModel = {
  hasBeenNotified?: Maybe<Scalars['Boolean']>;
  emailNoticeProvidedDate?: Maybe<Scalars['String']>;
};

export type ProductModel = {
  value?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
};

export type FacetItemModel = {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  count?: Maybe<Scalars['Float']>;
  searchValue?: Maybe<Scalars['String']>;
};

export type FacetDataItem = {
  count?: Maybe<Scalars['Float']>;
  counts?: Maybe<Array<FacetItemModel>>;
};

export type FacetDataOptions = {
  ManagementLevels?: Maybe<FacetDataItem>;
  DEPARTMENT?: Maybe<FacetDataItem>;
  Continents?: Maybe<FacetDataItem>;
  Countries?: Maybe<FacetDataItem>;
  States?: Maybe<FacetDataItem>;
  LOCATION_COMPANY_ID?: Maybe<FacetDataItem>;
};

export type FacetModel = {
  totalResults?: Maybe<Scalars['Float']>;
  maxResults?: Maybe<Scalars['Float']>;
  facetCount?: Maybe<Scalars['Float']>;
  totalRecordsCount?: Maybe<Scalars['Float']>;
  data?: Maybe<FacetDataOptions>;
};

export type AdvanceFacetDataModel = {
  facets?: Maybe<Array<BasicFacetItemModel>>;
};

export type Facets = {
  peopleFacets: FacetModel;
  locationFacets: FacetModel;
  orgChartFacets?: Maybe<AdvanceFacetDataModel>;
};


export type FacetspeopleFacetsArgs = {
  companyId?: InputMaybe<Scalars['String']>;
  facets?: InputMaybe<Scalars['String']>;
  subUnitType?: InputMaybe<Scalars['String']>;
  additionalOptions?: InputMaybe<LocationAdditionalOptions>;
  limits?: InputMaybe<Scalars['Float']>;
  fetchTechAddDropOptions?: InputMaybe<Scalars['Boolean']>;
  showUnmaskedContacts?: InputMaybe<Scalars['Boolean']>;
  packageName?: InputMaybe<Scalars['String']>;
  defaultSearchParams?: InputMaybe<DefaultSearchParams>;
  companyID?: InputMaybe<Scalars['String']>;
};


export type FacetslocationFacetsArgs = {
  companyId?: InputMaybe<Scalars['String']>;
  facets?: InputMaybe<Scalars['String']>;
  subUnitType?: InputMaybe<Scalars['String']>;
  additionalOptions?: InputMaybe<LocationAdditionalOptions>;
  limits?: InputMaybe<Scalars['Float']>;
  fetchTechAddDropOptions?: InputMaybe<Scalars['Boolean']>;
  showUnmaskedContacts?: InputMaybe<Scalars['Boolean']>;
  packageName?: InputMaybe<Scalars['String']>;
  defaultSearchParams?: InputMaybe<DefaultSearchParams>;
  companyID?: InputMaybe<Scalars['String']>;
};


export type FacetsorgChartFacetsArgs = {
  companyId?: InputMaybe<Scalars['String']>;
  facets?: InputMaybe<Scalars['String']>;
  subUnitType?: InputMaybe<Scalars['String']>;
  additionalOptions?: InputMaybe<LocationAdditionalOptions>;
  limits?: InputMaybe<Scalars['Float']>;
  fetchTechAddDropOptions?: InputMaybe<Scalars['Boolean']>;
  showUnmaskedContacts?: InputMaybe<Scalars['Boolean']>;
  packageName?: InputMaybe<Scalars['String']>;
  defaultSearchParams?: InputMaybe<DefaultSearchParams>;
  companyID?: InputMaybe<Scalars['String']>;
};

export type LocationAdditionalOptions = {
  companyPastOrPresent?: InputMaybe<Scalars['Float']>;
  confidenceScoreMax?: InputMaybe<Scalars['Float']>;
  rpp?: InputMaybe<Scalars['Float']>;
  confidenceScoreMin?: InputMaybe<Scalars['Float']>;
  page?: InputMaybe<Scalars['Float']>;
  excludeBoardMembers?: InputMaybe<Scalars['Boolean']>;
  excludeNoCompany?: InputMaybe<Scalars['Boolean']>;
};

export type DefaultSearchParams = {
  facets?: InputMaybe<Scalars['String']>;
  sortBy?: InputMaybe<Scalars['String']>;
  sortOrder?: InputMaybe<Scalars['String']>;
  companyPastOrPresent?: InputMaybe<Scalars['String']>;
  excludeNoCompany?: InputMaybe<Scalars['String']>;
  excludeDefunctCompanies?: InputMaybe<Scalars['Boolean']>;
  returnOnlyBoardMembers?: InputMaybe<Scalars['Boolean']>;
  excludeBoardMembers?: InputMaybe<Scalars['Boolean']>;
  contactRequirements?: InputMaybe<Scalars['String']>;
  confidenceScoreMin?: InputMaybe<Scalars['Float']>;
  confidenceScoreMax?: InputMaybe<Scalars['Float']>;
  isCertified?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Float']>;
  uniqueCompaniesSortBy?: InputMaybe<Scalars['String']>;
  validDateMonthDist?: InputMaybe<Scalars['String']>;
  limits?: InputMaybe<Scalars['Float']>;
  origination?: InputMaybe<Scalars['String']>;
};

export type BasicFacetItemModel = {
  name?: Maybe<Scalars['String']>;
  counts?: Maybe<Array<FacetItemModel>>;
};

export type BasicFacetDataModel = {
  facets?: Maybe<BasicFacetItemModel>;
};

export type SubUnitTypeInfo = {
  type?: Maybe<Scalars['Float']>;
  typeDescription?: Maybe<Scalars['String']>;
};

export type FamilyTreeModel = {
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Float']>;
  name?: Maybe<Scalars['String']>;
  familyNodes?: Maybe<Array<FamilyTreeModel>>;
  checked?: Maybe<Scalars['Boolean']>;
  phone?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  employeeCount?: Maybe<Scalars['Float']>;
  searchByAddressUrl?: Maybe<Scalars['String']>;
  subUnitTypeInfo?: Maybe<SubUnitTypeInfo>;
  locationType?: Maybe<Scalars['String']>;
};

export type CompanyHierarchyRes = {
  familyTree?: Maybe<FamilyTreeModel>;
  ultimateParent?: Maybe<UltimateParentModel>;
};

export type DepartmentBudgetsModel = {
  departmentType?: Maybe<Scalars['String']>;
  budgetAmount?: Maybe<Scalars['Float']>;
};

export type CompetitorModel = {
  companyId?: Maybe<Scalars['Float']>;
  companyName?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  revenue?: Maybe<Scalars['String']>;
  employeeCount?: Maybe<Scalars['Float']>;
};

export type TechnologyAddDropModel = {
  technologyId?: Maybe<Scalars['Float']>;
  activity?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export type EmployeeGrowthDataModel = {
  label?: Maybe<Scalars['String']>;
  employeeCount?: Maybe<Scalars['Float']>;
};

export type EmployeeGrowthModel = {
  oneYearEmployeeGrowthRate?: Maybe<Scalars['Float']>;
  twoYearEmployeeGrowthRate?: Maybe<Scalars['Float']>;
  employeeGrowthData?: Maybe<Array<EmployeeGrowthDataModel>>;
};

export type CompanyDetailsModel = {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  tagged?: Maybe<Scalars['Boolean']>;
  masked?: Maybe<Scalars['Boolean']>;
  subscribed?: Maybe<Scalars['Boolean']>;
  exported?: Maybe<Scalars['Boolean']>;
  domain?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['String']>;
  fax?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  ticker?: Maybe<Scalars['String']>;
  crmEntityId?: Maybe<Scalars['String']>;
  revenue?: Maybe<Scalars['String']>;
  allIndustries?: Maybe<Array<Scalars['String']>>;
  isDefunct?: Maybe<Scalars['Boolean']>;
  uniqueCompanyNumContacts?: Maybe<Scalars['Float']>;
  companyHref?: Maybe<Scalars['String']>;
  isInPreview?: Maybe<Scalars['Boolean']>;
  funding?: Maybe<Array<FundingModel>>;
  certified?: Maybe<Scalars['Boolean']>;
  certificationDate?: Maybe<Scalars['String']>;
  icpScore?: Maybe<Scalars['String']>;
  locationsCount?: Maybe<Scalars['String']>;
  orgImport?: Maybe<Scalars['String']>;
  entityId?: Maybe<Scalars['String']>;
  address?: Maybe<LocationModel>;
  displayAddress?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  NAICS?: Maybe<Array<Scalars['Float']>>;
  SIC?: Maybe<Array<Scalars['Float']>>;
  ranking?: Maybe<Array<Scalars['String']>>;
  employeeCount?: Maybe<Scalars['Float']>;
  employeeCountRange?: Maybe<Scalars['String']>;
  revenueRange?: Maybe<Scalars['String']>;
  companyAttributes?: Maybe<Array<AttributeChipGroupModel>>;
  techAttributes?: Maybe<Array<AttributeChipGroupModel>>;
  doziIndustry?: Maybe<Array<DoziIndustryModel>>;
  topLevelIndustry?: Maybe<Array<Scalars['String']>>;
  industryLabel?: Maybe<Array<DoziIndustryModel>>;
  doziIndustryString?: Maybe<Scalars['String']>;
  industry?: Maybe<Array<Scalars['String']>>;
  industryV2?: Maybe<Array<Scalars['String']>>;
  industryForBasic?: Maybe<Array<Scalars['String']>>;
  topIndustry?: Maybe<Array<Scalars['String']>>;
  industries?: Maybe<Array<AttributeChipModel>>;
  industriesAsAttributes?: Maybe<Array<AttributeChipModel>>;
  basicIndustries?: Maybe<Array<Scalars['String']>>;
  merger?: Maybe<Array<MergerModel>>;
  alternateNames?: Maybe<Array<Scalars['String']>>;
  orgChartFacetData?: Maybe<FacetDataOptions>;
  importedData?: Maybe<ImportedDataModel>;
  socialUrls?: Maybe<SocialMediaUrlModel>;
  socialUrlsParsed?: Maybe<SocialMediaParsed>;
  followerCountParsed?: Maybe<SocialMediaParsed>;
  foundedYear?: Maybe<Scalars['Float']>;
  alexaRank?: Maybe<Scalars['Float']>;
  departmentBudgets?: Maybe<Array<DepartmentBudgetsModel>>;
  companyEmployeeGrowth?: Maybe<EmployeeGrowthModel>;
  ultimateParent?: Maybe<UltimateParentModel>;
  basicUltimateParent?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  products?: Maybe<Array<ProductModel>>;
  technologyAddDrop?: Maybe<Array<TechnologyAddDropModel>>;
  competitors?: Maybe<Array<CompetitorModel>>;
  companyHierarchy?: Maybe<CompanyHierarchyRes>;
};


export type CompanyDetailsModelindustryArgs = {
  companyID?: InputMaybe<Scalars['String']>;
  fetchTechAddDropOptions?: InputMaybe<Scalars['Boolean']>;
  showUnmaskedContacts?: InputMaybe<Scalars['Boolean']>;
  defaultSearchParams?: InputMaybe<DefaultSearchParams>;
  packageName?: InputMaybe<Scalars['String']>;
  buyingCommittee?: InputMaybe<Scalars['String']>;
  companyPastOrPresent?: InputMaybe<Scalars['StringScalar']>;
  contactRequirements?: InputMaybe<Scalars['StringScalar']>;
  doziIndustry?: InputMaybe<Scalars['StringScalar']>;
  excludeDefunctCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeNoCompany?: InputMaybe<Scalars['StringScalar']>;
  isCertified?: InputMaybe<Scalars['StringScalar']>;
  sortBy?: InputMaybe<Scalars['StringScalar']>;
  sortOrder?: InputMaybe<Scalars['StringScalar']>;
  nnNegation?: InputMaybe<Scalars['StringScalar']>;
  nnQueryId?: InputMaybe<Scalars['StringScalar']>;
  nnStartDate?: InputMaybe<Scalars['StringScalar']>;
  nnEndDate?: InputMaybe<Scalars['StringScalar']>;
  companyId?: InputMaybe<Scalars['StringScalar']>;
  companyIds?: InputMaybe<Scalars['StringScalar']>;
  revenueMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  revenueMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMax?: InputMaybe<Scalars['StringScalar']>;
  techAttributesAddedDropped?: InputMaybe<TechAttributesAddedDropped>;
  techAttributeNotUsedAnd?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMin?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMax?: InputMaybe<Scalars['StringScalar']>;
  locationCountMin?: InputMaybe<Scalars['StringScalar']>;
  locationCountMax?: InputMaybe<Scalars['StringScalar']>;
  metroAreas?: InputMaybe<Scalars['StringScalar']>;
  doziPrimaryIndustry?: InputMaybe<Scalars['StringScalar']>;
  hqLocationAreaCodes?: InputMaybe<Scalars['StringScalar']>;
  departmentEmployeeCounts?: InputMaybe<DepartmentEmployeeCounts>;
  departmentBudgets?: InputMaybe<DepartmentBudgets>;
  street?: InputMaybe<Scalars['StringScalar']>;
  locationType?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  negateScope?: InputMaybe<Scalars['Boolean']>;
  itBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  itBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  anyFundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  anyFundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  fundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  anyFundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  allInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  recentInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  state?: InputMaybe<Scalars['StringScalar']>;
  metroRegion?: InputMaybe<Scalars['StringScalar']>;
  country?: InputMaybe<Scalars['StringScalar']>;
  continent?: InputMaybe<Scalars['StringScalar']>;
  companyType?: InputMaybe<Scalars['StringScalar']>;
  companyName?: InputMaybe<Scalars['StringScalar']>;
  companyDomainNames?: InputMaybe<Scalars['StringScalar']>;
  companyDesc?: InputMaybe<Scalars['StringScalar']>;
  isPublic?: InputMaybe<Scalars['StringScalar']>;
  location?: InputMaybe<Scalars['StringScalar']>;
  zipCode?: InputMaybe<Scalars['StringScalar']>;
  radiusMiles?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTag?: InputMaybe<Scalars['StringScalar']>;
  industryKeywordsMulti?: InputMaybe<Scalars['StringScalar']>;
  primaryIndustriesOnly?: InputMaybe<Scalars['StringScalar']>;
  industryClassification?: InputMaybe<Scalars['StringScalar']>;
  industryKeywords?: InputMaybe<Scalars['StringScalar']>;
  industryCodeList?: InputMaybe<Scalars['StringScalar']>;
  industryCode?: InputMaybe<Scalars['StringScalar']>;
  industryCodeAnd?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  revenueClassification?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassification?: InputMaybe<Scalars['StringScalar']>;
  companyRanking?: InputMaybe<Scalars['StringScalar']>;
  pubPrivateSectors?: InputMaybe<Scalars['StringScalar']>;
  locationSearchType?: InputMaybe<Scalars['StringScalar']>;
  fundingMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  fundingMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAnd?: InputMaybe<Scalars['StringScalar']>;
  allInvestors?: InputMaybe<Scalars['StringScalar']>;
  recentInvestors?: InputMaybe<Scalars['StringScalar']>;
  allFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  recentFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  certificationStartDate?: InputMaybe<Scalars['StringScalar']>;
  certificationEndDate?: InputMaybe<Scalars['StringScalar']>;
  streetLineTwo?: InputMaybe<Scalars['StringScalar']>;
  hashtagField?: InputMaybe<Scalars['StringScalar']>;
  fullName?: InputMaybe<Scalars['StringScalar']>;
  gender?: InputMaybe<Scalars['StringScalar']>;
  personIds?: InputMaybe<Scalars['StringScalar']>;
  personID?: InputMaybe<Scalars['StringScalar']>;
  personId?: InputMaybe<Scalars['StringScalar']>;
  hasCanadianEmail?: InputMaybe<Scalars['StringScalar']>;
  companyLocationIds?: InputMaybe<Scalars['StringScalar']>;
  emailAddress?: InputMaybe<Scalars['StringScalar']>;
  firstName?: InputMaybe<Scalars['StringScalar']>;
  lastName?: InputMaybe<Scalars['StringScalar']>;
  middleInitial?: InputMaybe<Scalars['StringScalar']>;
  excludedPersonTitle?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  titleCertification?: InputMaybe<Scalars['StringScalar']>;
  personTitle?: InputMaybe<Scalars['StringScalar']>;
  titleSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleSeniority?: InputMaybe<Scalars['StringScalar']>;
  degree?: InputMaybe<Scalars['StringScalar']>;
  school?: InputMaybe<Scalars['StringScalar']>;
  companyDomainName?: InputMaybe<Scalars['StringScalar']>;
  validDateMonthDist?: InputMaybe<Scalars['StringScalar']>;
  zoomJoinsAccount?: InputMaybe<ZoomJoinsAccount>;
  orgJoinsAccount?: InputMaybe<OrgJoinsAccount>;
  titleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeOrgExportedCompanies?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgExportedContacts?: InputMaybe<Scalars['StringScalar']>;
  excludeCompanyTags?: InputMaybe<Scalars['StringScalar']>;
  personWebReferences?: InputMaybe<Scalars['StringScalar']>;
  personWebReferencesURL?: InputMaybe<Scalars['StringScalar']>;
  departments?: InputMaybe<Scalars['StringScalar']>;
  jobFunctions?: InputMaybe<Scalars['StringScalar']>;
  isEU?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMin?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMax?: InputMaybe<Scalars['StringScalar']>;
  hasLocationId?: InputMaybe<Scalars['StringScalar']>;
  hasPersonalEmail?: InputMaybe<Scalars['StringScalar']>;
  hasMobilePhone?: InputMaybe<Scalars['StringScalar']>;
  hasEmail?: InputMaybe<Scalars['StringScalar']>;
  hasPhone?: InputMaybe<Scalars['StringScalar']>;
  hasDirectPhone?: InputMaybe<Scalars['StringScalar']>;
  hasCompanyPhone?: InputMaybe<Scalars['StringScalar']>;
  hasTitle?: InputMaybe<Scalars['StringScalar']>;
  hasBeenNotified?: InputMaybe<Scalars['StringScalar']>;
  hasDepartment?: InputMaybe<Scalars['StringScalar']>;
  hasJobFunction?: InputMaybe<Scalars['StringScalar']>;
  hasSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgChartTier?: InputMaybe<Scalars['StringScalar']>;
  orgChartTier?: InputMaybe<Scalars['StringScalar']>;
  personCreationStartDate?: InputMaybe<Scalars['StringScalar']>;
  positionStartDate?: InputMaybe<Scalars['StringScalar']>;
  personCreationEndDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedStartDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedEndDate?: InputMaybe<Scalars['StringScalar']>;
  executivesOnly?: InputMaybe<Scalars['StringScalar']>;
  returnOnlyBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  excludeBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  page?: InputMaybe<Scalars['Float']>;
  rpp?: InputMaybe<Scalars['StringScalar']>;
  facetOptions?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  techAttributeTagNotUsedAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  findRecommendedContacts?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompanies?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesPage?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesRpp?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesSortBy?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesContacts?: InputMaybe<Scalars['StringScalar']>;
  solrPseudoOutputFields?: InputMaybe<Scalars['StringScalar']>;
  scoopEndDate?: InputMaybe<Scalars['StringScalar']>;
  scoopStartDate?: InputMaybe<Scalars['StringScalar']>;
  updatedSinceCreation?: InputMaybe<Scalars['StringScalar']>;
  scoopTypes?: InputMaybe<Scalars['StringScalar']>;
  scoopTopics?: InputMaybe<Scalars['StringScalar']>;
  scoopDepartments?: InputMaybe<Scalars['StringScalar']>;
  scoopDesc?: InputMaybe<Scalars['StringScalar']>;
  scoopIds?: InputMaybe<Scalars['StringScalar']>;
  scoringOptions?: InputMaybe<Scalars['StringScalar']>;
  masked?: InputMaybe<Scalars['Boolean']>;
  subscribed?: InputMaybe<Scalars['Boolean']>;
  orgImported?: InputMaybe<Scalars['Boolean']>;
  sessionToken?: InputMaybe<Scalars['StringScalar']>;
  definedUniverse?: InputMaybe<Scalars['StringScalar']>;
  outputFieldOptions?: InputMaybe<Scalars['StringScalar']>;
  ignoreDefaultFields?: InputMaybe<Scalars['StringScalar']>;
  includeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPersonOnlyMe?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedContacts?: InputMaybe<Scalars['Boolean']>;
  pTag?: InputMaybe<Scalars['StringScalar']>;
  cTag?: InputMaybe<Scalars['StringScalar']>;
  excludePeopleTags?: InputMaybe<Scalars['StringScalar']>;
  includeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAssociatedDeals?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeAllOrgImportLeads?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOptout?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  excludeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  orgImportOpportunities?: InputMaybe<Array<OrgImportOpportunities>>;
  includeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  parsingOptions?: InputMaybe<ParsingOptions>;
  source?: InputMaybe<Scalars['String']>;
  addressVerificationStatusList?: InputMaybe<Scalars['String']>;
  parentId?: InputMaybe<Scalars['String']>;
  ultimateParentId?: InputMaybe<Scalars['String']>;
  subUnitType?: InputMaybe<Scalars['String']>;
  isLocationHierarchy?: InputMaybe<Scalars['Boolean']>;
};


export type CompanyDetailsModelcompanyHierarchyArgs = {
  companyID?: InputMaybe<Scalars['String']>;
  fetchTechAddDropOptions?: InputMaybe<Scalars['Boolean']>;
  showUnmaskedContacts?: InputMaybe<Scalars['Boolean']>;
  defaultSearchParams?: InputMaybe<DefaultSearchParams>;
  packageName?: InputMaybe<Scalars['String']>;
  buyingCommittee?: InputMaybe<Scalars['String']>;
  companyPastOrPresent?: InputMaybe<Scalars['StringScalar']>;
  contactRequirements?: InputMaybe<Scalars['StringScalar']>;
  doziIndustry?: InputMaybe<Scalars['StringScalar']>;
  excludeDefunctCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeNoCompany?: InputMaybe<Scalars['StringScalar']>;
  isCertified?: InputMaybe<Scalars['StringScalar']>;
  sortBy?: InputMaybe<Scalars['StringScalar']>;
  sortOrder?: InputMaybe<Scalars['StringScalar']>;
  nnNegation?: InputMaybe<Scalars['StringScalar']>;
  nnQueryId?: InputMaybe<Scalars['StringScalar']>;
  nnStartDate?: InputMaybe<Scalars['StringScalar']>;
  nnEndDate?: InputMaybe<Scalars['StringScalar']>;
  companyId?: InputMaybe<Scalars['StringScalar']>;
  companyIds?: InputMaybe<Scalars['StringScalar']>;
  revenueMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  revenueMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMax?: InputMaybe<Scalars['StringScalar']>;
  techAttributesAddedDropped?: InputMaybe<TechAttributesAddedDropped>;
  techAttributeNotUsedAnd?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMin?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMax?: InputMaybe<Scalars['StringScalar']>;
  locationCountMin?: InputMaybe<Scalars['StringScalar']>;
  locationCountMax?: InputMaybe<Scalars['StringScalar']>;
  metroAreas?: InputMaybe<Scalars['StringScalar']>;
  doziPrimaryIndustry?: InputMaybe<Scalars['StringScalar']>;
  hqLocationAreaCodes?: InputMaybe<Scalars['StringScalar']>;
  departmentEmployeeCounts?: InputMaybe<DepartmentEmployeeCounts>;
  departmentBudgets?: InputMaybe<DepartmentBudgets>;
  street?: InputMaybe<Scalars['StringScalar']>;
  locationType?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  negateScope?: InputMaybe<Scalars['Boolean']>;
  itBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  itBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  anyFundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  anyFundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  fundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  anyFundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  allInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  recentInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  state?: InputMaybe<Scalars['StringScalar']>;
  metroRegion?: InputMaybe<Scalars['StringScalar']>;
  country?: InputMaybe<Scalars['StringScalar']>;
  continent?: InputMaybe<Scalars['StringScalar']>;
  companyType?: InputMaybe<Scalars['StringScalar']>;
  companyName?: InputMaybe<Scalars['StringScalar']>;
  companyDomainNames?: InputMaybe<Scalars['StringScalar']>;
  companyDesc?: InputMaybe<Scalars['StringScalar']>;
  isPublic?: InputMaybe<Scalars['StringScalar']>;
  location?: InputMaybe<Scalars['StringScalar']>;
  zipCode?: InputMaybe<Scalars['StringScalar']>;
  radiusMiles?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTag?: InputMaybe<Scalars['StringScalar']>;
  industryKeywordsMulti?: InputMaybe<Scalars['StringScalar']>;
  primaryIndustriesOnly?: InputMaybe<Scalars['StringScalar']>;
  industryClassification?: InputMaybe<Scalars['StringScalar']>;
  industryKeywords?: InputMaybe<Scalars['StringScalar']>;
  industryCodeList?: InputMaybe<Scalars['StringScalar']>;
  industryCode?: InputMaybe<Scalars['StringScalar']>;
  industryCodeAnd?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  revenueClassification?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassification?: InputMaybe<Scalars['StringScalar']>;
  companyRanking?: InputMaybe<Scalars['StringScalar']>;
  pubPrivateSectors?: InputMaybe<Scalars['StringScalar']>;
  locationSearchType?: InputMaybe<Scalars['StringScalar']>;
  fundingMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  fundingMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAnd?: InputMaybe<Scalars['StringScalar']>;
  allInvestors?: InputMaybe<Scalars['StringScalar']>;
  recentInvestors?: InputMaybe<Scalars['StringScalar']>;
  allFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  recentFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  certificationStartDate?: InputMaybe<Scalars['StringScalar']>;
  certificationEndDate?: InputMaybe<Scalars['StringScalar']>;
  streetLineTwo?: InputMaybe<Scalars['StringScalar']>;
  hashtagField?: InputMaybe<Scalars['StringScalar']>;
  fullName?: InputMaybe<Scalars['StringScalar']>;
  gender?: InputMaybe<Scalars['StringScalar']>;
  personIds?: InputMaybe<Scalars['StringScalar']>;
  personID?: InputMaybe<Scalars['StringScalar']>;
  personId?: InputMaybe<Scalars['StringScalar']>;
  hasCanadianEmail?: InputMaybe<Scalars['StringScalar']>;
  companyLocationIds?: InputMaybe<Scalars['StringScalar']>;
  emailAddress?: InputMaybe<Scalars['StringScalar']>;
  firstName?: InputMaybe<Scalars['StringScalar']>;
  lastName?: InputMaybe<Scalars['StringScalar']>;
  middleInitial?: InputMaybe<Scalars['StringScalar']>;
  excludedPersonTitle?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  titleCertification?: InputMaybe<Scalars['StringScalar']>;
  personTitle?: InputMaybe<Scalars['StringScalar']>;
  titleSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleSeniority?: InputMaybe<Scalars['StringScalar']>;
  degree?: InputMaybe<Scalars['StringScalar']>;
  school?: InputMaybe<Scalars['StringScalar']>;
  companyDomainName?: InputMaybe<Scalars['StringScalar']>;
  validDateMonthDist?: InputMaybe<Scalars['StringScalar']>;
  zoomJoinsAccount?: InputMaybe<ZoomJoinsAccount>;
  orgJoinsAccount?: InputMaybe<OrgJoinsAccount>;
  titleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeOrgExportedCompanies?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgExportedContacts?: InputMaybe<Scalars['StringScalar']>;
  excludeCompanyTags?: InputMaybe<Scalars['StringScalar']>;
  personWebReferences?: InputMaybe<Scalars['StringScalar']>;
  personWebReferencesURL?: InputMaybe<Scalars['StringScalar']>;
  departments?: InputMaybe<Scalars['StringScalar']>;
  jobFunctions?: InputMaybe<Scalars['StringScalar']>;
  isEU?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMin?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMax?: InputMaybe<Scalars['StringScalar']>;
  hasLocationId?: InputMaybe<Scalars['StringScalar']>;
  hasPersonalEmail?: InputMaybe<Scalars['StringScalar']>;
  hasMobilePhone?: InputMaybe<Scalars['StringScalar']>;
  hasEmail?: InputMaybe<Scalars['StringScalar']>;
  hasPhone?: InputMaybe<Scalars['StringScalar']>;
  hasDirectPhone?: InputMaybe<Scalars['StringScalar']>;
  hasCompanyPhone?: InputMaybe<Scalars['StringScalar']>;
  hasTitle?: InputMaybe<Scalars['StringScalar']>;
  hasBeenNotified?: InputMaybe<Scalars['StringScalar']>;
  hasDepartment?: InputMaybe<Scalars['StringScalar']>;
  hasJobFunction?: InputMaybe<Scalars['StringScalar']>;
  hasSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgChartTier?: InputMaybe<Scalars['StringScalar']>;
  orgChartTier?: InputMaybe<Scalars['StringScalar']>;
  personCreationStartDate?: InputMaybe<Scalars['StringScalar']>;
  positionStartDate?: InputMaybe<Scalars['StringScalar']>;
  personCreationEndDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedStartDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedEndDate?: InputMaybe<Scalars['StringScalar']>;
  executivesOnly?: InputMaybe<Scalars['StringScalar']>;
  returnOnlyBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  excludeBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  page?: InputMaybe<Scalars['Float']>;
  rpp?: InputMaybe<Scalars['StringScalar']>;
  facetOptions?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  techAttributeTagNotUsedAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  findRecommendedContacts?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompanies?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesPage?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesRpp?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesSortBy?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesContacts?: InputMaybe<Scalars['StringScalar']>;
  solrPseudoOutputFields?: InputMaybe<Scalars['StringScalar']>;
  scoopEndDate?: InputMaybe<Scalars['StringScalar']>;
  scoopStartDate?: InputMaybe<Scalars['StringScalar']>;
  updatedSinceCreation?: InputMaybe<Scalars['StringScalar']>;
  scoopTypes?: InputMaybe<Scalars['StringScalar']>;
  scoopTopics?: InputMaybe<Scalars['StringScalar']>;
  scoopDepartments?: InputMaybe<Scalars['StringScalar']>;
  scoopDesc?: InputMaybe<Scalars['StringScalar']>;
  scoopIds?: InputMaybe<Scalars['StringScalar']>;
  scoringOptions?: InputMaybe<Scalars['StringScalar']>;
  masked?: InputMaybe<Scalars['Boolean']>;
  subscribed?: InputMaybe<Scalars['Boolean']>;
  orgImported?: InputMaybe<Scalars['Boolean']>;
  sessionToken?: InputMaybe<Scalars['StringScalar']>;
  definedUniverse?: InputMaybe<Scalars['StringScalar']>;
  outputFieldOptions?: InputMaybe<Scalars['StringScalar']>;
  ignoreDefaultFields?: InputMaybe<Scalars['StringScalar']>;
  includeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPersonOnlyMe?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedContacts?: InputMaybe<Scalars['Boolean']>;
  pTag?: InputMaybe<Scalars['StringScalar']>;
  cTag?: InputMaybe<Scalars['StringScalar']>;
  excludePeopleTags?: InputMaybe<Scalars['StringScalar']>;
  includeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAssociatedDeals?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeAllOrgImportLeads?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOptout?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  excludeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  orgImportOpportunities?: InputMaybe<Array<OrgImportOpportunities>>;
  includeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  parsingOptions?: InputMaybe<ParsingOptions>;
  source?: InputMaybe<Scalars['String']>;
  addressVerificationStatusList?: InputMaybe<Scalars['String']>;
  parentId?: InputMaybe<Scalars['String']>;
  ultimateParentId?: InputMaybe<Scalars['String']>;
  subUnitType?: InputMaybe<Scalars['String']>;
  isLocationHierarchy?: InputMaybe<Scalars['Boolean']>;
};

export type TechAttributesAddedDropped = {
  techAttributesAddedDropped?: InputMaybe<TechAttributeAddDropGroup>;
};

export type TechAttributeAddDropGroup = {
  techAttributeAddDrop?: InputMaybe<Array<TechAttributeAddDrop>>;
};

export type TechAttributeAddDrop = {
  startDate?: InputMaybe<Scalars['String']>;
  endDate?: InputMaybe<Scalars['String']>;
  techAttributes?: InputMaybe<Scalars['String']>;
  addDropFlag?: InputMaybe<Scalars['String']>;
};

export type DepartmentEmployeeCounts = {
  departmentEmployeeCount?: InputMaybe<Array<DepartmentEmployeeCount>>;
};

export type DepartmentEmployeeCount = {
  departmentName?: InputMaybe<Scalars['StringScalar']>;
  departmentCountMin?: InputMaybe<Scalars['StringScalar']>;
  departmentCountMax?: InputMaybe<Scalars['StringScalar']>;
};

export type DepartmentBudgets = {
  departmentBudget?: InputMaybe<Array<DepartmentBudgetsFilter>>;
};

export type DepartmentBudgetsFilter = {
  departmentName?: InputMaybe<Scalars['StringScalar']>;
  departmentBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  departmentBudgetMax?: InputMaybe<Scalars['StringScalar']>;
};

export type ZoomJoinsAccount = {
  departmentName?: InputMaybe<Scalars['String']>;
  departmentCountMin?: InputMaybe<Scalars['String']>;
  departmentCountMax?: InputMaybe<Scalars['String']>;
};

export type OrgJoinsAccount = {
  action?: InputMaybe<Scalars['String']>;
  origination?: InputMaybe<Scalars['String']>;
  negation?: InputMaybe<Scalars['Boolean']>;
  reload?: InputMaybe<Scalars['String']>;
  applyCriteria?: InputMaybe<Scalars['Boolean']>;
  owners?: InputMaybe<Array<Scalars['String']>>;
  universalTag?: InputMaybe<Scalars['String']>;
  rxPeriod?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<Array<Scalars['String']>>;
  leadStatus?: InputMaybe<Array<Scalars['String']>>;
};

export type AdvanceOrgImportFilters = {
  salesforce?: InputMaybe<Array<Scalars['StringScalar']>>;
  hubspot?: InputMaybe<Array<Scalars['StringScalar']>>;
  marketo?: InputMaybe<Array<Scalars['StringScalar']>>;
};

export type AdvanceAllOrgImportsFilters = {
  salesforce?: InputMaybe<Scalars['Boolean']>;
  hubspot?: InputMaybe<Scalars['Boolean']>;
  marketo?: InputMaybe<Scalars['Boolean']>;
};

export type OrgImportOpportunities = {
  createDateStart?: InputMaybe<Scalars['StringScalar']>;
  createDateEnd?: InputMaybe<Scalars['StringScalar']>;
  closeDateEnd?: InputMaybe<Scalars['StringScalar']>;
  closeDateStart?: InputMaybe<Scalars['StringScalar']>;
  platform?: InputMaybe<Scalars['StringScalar']>;
  includeAllOrgImportOpportunitiesOwners?: InputMaybe<ImportsPlatformModel>;
};

export type ImportsPlatformModel = {
  platform?: InputMaybe<Scalars['StringScalar']>;
};

export type ParsingOptions = {
  industry?: InputMaybe<Scalars['String']>;
};

export type CompanySearchModel = {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  tagged?: Maybe<Scalars['Boolean']>;
  masked?: Maybe<Scalars['Boolean']>;
  subscribed?: Maybe<Scalars['Boolean']>;
  exported?: Maybe<Scalars['Boolean']>;
  domain?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['String']>;
  fax?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  ticker?: Maybe<Scalars['String']>;
  crmEntityId?: Maybe<Scalars['String']>;
  revenue?: Maybe<Scalars['String']>;
  allIndustries?: Maybe<Array<Scalars['String']>>;
  isDefunct?: Maybe<Scalars['Boolean']>;
  uniqueCompanyNumContacts?: Maybe<Scalars['Float']>;
  companyHref?: Maybe<Scalars['String']>;
  isInPreview?: Maybe<Scalars['Boolean']>;
  funding?: Maybe<Array<FundingModel>>;
  certified?: Maybe<Scalars['Boolean']>;
  certificationDate?: Maybe<Scalars['String']>;
  icpScore?: Maybe<Scalars['String']>;
  locationsCount?: Maybe<Scalars['String']>;
  orgImport?: Maybe<Scalars['String']>;
  address?: Maybe<LocationModel>;
  displayAddress?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  employeeCount?: Maybe<Scalars['Float']>;
  employeeCountRange?: Maybe<Scalars['String']>;
  revenueRange?: Maybe<Scalars['String']>;
  doziIndustry?: Maybe<Array<DoziIndustryModel>>;
  topLevelIndustry?: Maybe<Array<Scalars['String']>>;
  doziIndustryString?: Maybe<Scalars['String']>;
  industry?: Maybe<Array<Scalars['String']>>;
  basicIndustries?: Maybe<Array<Scalars['String']>>;
  industryV2?: Maybe<Array<Scalars['String']>>;
  industries?: Maybe<Array<AttributeChipModel>>;
  industriesAsAttributes?: Maybe<Array<AttributeChipModel>>;
  ultimateParent?: Maybe<UltimateParentModel>;
  departmentBudgets?: Maybe<Array<DepartmentBudgetsModel>>;
  type?: Maybe<Scalars['String']>;
  companyRevenueIn000s?: Maybe<Scalars['Float']>;
  employeesRange?: Maybe<Scalars['String']>;
  locationType?: Maybe<Scalars['String']>;
  orgUniversalTagged?: Maybe<Array<OrgUniversalTagsModel>>;
  universalTagged?: Maybe<Array<Scalars['String']>>;
};

export type CompanySearchResultModel = {
  data?: Maybe<Array<CompanySearchModel>>;
  facetData?: Maybe<AdvanceFacetDataModel>;
  maxResults?: Maybe<Scalars['Float']>;
  totalResults?: Maybe<Scalars['Float']>;
};

export type PersonSearchFacade = {
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  personId?: Maybe<Scalars['String']>;
};

export type ScoopTopics = {
  scoopTopic?: Maybe<Array<Scalars['String']>>;
};

export type ScoopTypes = {
  scoopType?: Maybe<Array<Scalars['String']>>;
};

export type Scoops = {
  id?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
  company?: Maybe<CompanyDetailsModel>;
  description?: Maybe<Scalars['String']>;
  topics?: Maybe<ScoopTopics>;
  types?: Maybe<ScoopTypes>;
  originalPublishedDate?: Maybe<Scalars['String']>;
  publishedDate?: Maybe<Scalars['String']>;
  updatedText?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  urlText?: Maybe<Scalars['String']>;
  personRecords?: Maybe<Array<PersonSearchFacade>>;
  imageUrl?: Maybe<Scalars['String']>;
  orgImport?: Maybe<Scalars['String']>;
};

export type PredictedPersonDataModel = {
  guessedEmail?: Maybe<Scalars['String']>;
  companyId?: Maybe<Scalars['String']>;
  companyName?: Maybe<Scalars['String']>;
};

export type PersonSearchModel = {
  totalResults?: Maybe<Scalars['Float']>;
  maxResults?: Maybe<Scalars['Float']>;
  companiesCount?: Maybe<Scalars['Float']>;
  numUniqueCompanies?: Maybe<Scalars['Float']>;
  predictedData?: Maybe<PredictedPersonDataModel>;
  data?: Maybe<Array<PplAtOrgItemModel>>;
};


export type PersonSearchModelpredictedDataArgs = {
  personID?: InputMaybe<Scalars['StringScalar']>;
  jobTitle?: InputMaybe<Scalars['String']>;
  packageName?: InputMaybe<Scalars['String']>;
  isTopExecutives?: InputMaybe<Scalars['Boolean']>;
  companyID?: InputMaybe<Scalars['String']>;
  fetchTechAddDropOptions?: InputMaybe<Scalars['Boolean']>;
  showUnmaskedContacts?: InputMaybe<Scalars['Boolean']>;
  defaultSearchParams?: InputMaybe<DefaultSearchParams>;
  buyingCommittee?: InputMaybe<Scalars['String']>;
  companyPastOrPresent?: InputMaybe<Scalars['StringScalar']>;
  contactRequirements?: InputMaybe<Scalars['StringScalar']>;
  doziIndustry?: InputMaybe<Scalars['StringScalar']>;
  excludeDefunctCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeNoCompany?: InputMaybe<Scalars['StringScalar']>;
  isCertified?: InputMaybe<Scalars['StringScalar']>;
  sortBy?: InputMaybe<Scalars['StringScalar']>;
  sortOrder?: InputMaybe<Scalars['StringScalar']>;
  nnNegation?: InputMaybe<Scalars['StringScalar']>;
  nnQueryId?: InputMaybe<Scalars['StringScalar']>;
  nnStartDate?: InputMaybe<Scalars['StringScalar']>;
  nnEndDate?: InputMaybe<Scalars['StringScalar']>;
  companyId?: InputMaybe<Scalars['StringScalar']>;
  companyIds?: InputMaybe<Scalars['StringScalar']>;
  revenueMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  revenueMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMax?: InputMaybe<Scalars['StringScalar']>;
  techAttributesAddedDropped?: InputMaybe<TechAttributesAddedDropped>;
  techAttributeNotUsedAnd?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMin?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMax?: InputMaybe<Scalars['StringScalar']>;
  locationCountMin?: InputMaybe<Scalars['StringScalar']>;
  locationCountMax?: InputMaybe<Scalars['StringScalar']>;
  metroAreas?: InputMaybe<Scalars['StringScalar']>;
  doziPrimaryIndustry?: InputMaybe<Scalars['StringScalar']>;
  hqLocationAreaCodes?: InputMaybe<Scalars['StringScalar']>;
  departmentEmployeeCounts?: InputMaybe<DepartmentEmployeeCounts>;
  departmentBudgets?: InputMaybe<DepartmentBudgets>;
  street?: InputMaybe<Scalars['StringScalar']>;
  locationType?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  negateScope?: InputMaybe<Scalars['Boolean']>;
  itBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  itBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  anyFundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  anyFundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  fundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  anyFundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  allInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  recentInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  state?: InputMaybe<Scalars['StringScalar']>;
  metroRegion?: InputMaybe<Scalars['StringScalar']>;
  country?: InputMaybe<Scalars['StringScalar']>;
  continent?: InputMaybe<Scalars['StringScalar']>;
  companyType?: InputMaybe<Scalars['StringScalar']>;
  companyName?: InputMaybe<Scalars['StringScalar']>;
  companyDomainNames?: InputMaybe<Scalars['StringScalar']>;
  companyDesc?: InputMaybe<Scalars['StringScalar']>;
  isPublic?: InputMaybe<Scalars['StringScalar']>;
  location?: InputMaybe<Scalars['StringScalar']>;
  zipCode?: InputMaybe<Scalars['StringScalar']>;
  radiusMiles?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTag?: InputMaybe<Scalars['StringScalar']>;
  industryKeywordsMulti?: InputMaybe<Scalars['StringScalar']>;
  primaryIndustriesOnly?: InputMaybe<Scalars['StringScalar']>;
  industryClassification?: InputMaybe<Scalars['StringScalar']>;
  industryKeywords?: InputMaybe<Scalars['StringScalar']>;
  industryCodeList?: InputMaybe<Scalars['StringScalar']>;
  industryCode?: InputMaybe<Scalars['StringScalar']>;
  industryCodeAnd?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  revenueClassification?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassification?: InputMaybe<Scalars['StringScalar']>;
  companyRanking?: InputMaybe<Scalars['StringScalar']>;
  pubPrivateSectors?: InputMaybe<Scalars['StringScalar']>;
  locationSearchType?: InputMaybe<Scalars['StringScalar']>;
  fundingMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  fundingMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAnd?: InputMaybe<Scalars['StringScalar']>;
  allInvestors?: InputMaybe<Scalars['StringScalar']>;
  recentInvestors?: InputMaybe<Scalars['StringScalar']>;
  allFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  recentFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  certificationStartDate?: InputMaybe<Scalars['StringScalar']>;
  certificationEndDate?: InputMaybe<Scalars['StringScalar']>;
  streetLineTwo?: InputMaybe<Scalars['StringScalar']>;
  hashtagField?: InputMaybe<Scalars['StringScalar']>;
  fullName?: InputMaybe<Scalars['StringScalar']>;
  gender?: InputMaybe<Scalars['StringScalar']>;
  personIds?: InputMaybe<Scalars['StringScalar']>;
  personId?: InputMaybe<Scalars['StringScalar']>;
  hasCanadianEmail?: InputMaybe<Scalars['StringScalar']>;
  companyLocationIds?: InputMaybe<Scalars['StringScalar']>;
  emailAddress?: InputMaybe<Scalars['StringScalar']>;
  firstName?: InputMaybe<Scalars['StringScalar']>;
  lastName?: InputMaybe<Scalars['StringScalar']>;
  middleInitial?: InputMaybe<Scalars['StringScalar']>;
  excludedPersonTitle?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  titleCertification?: InputMaybe<Scalars['StringScalar']>;
  personTitle?: InputMaybe<Scalars['StringScalar']>;
  titleSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleSeniority?: InputMaybe<Scalars['StringScalar']>;
  degree?: InputMaybe<Scalars['StringScalar']>;
  school?: InputMaybe<Scalars['StringScalar']>;
  companyDomainName?: InputMaybe<Scalars['StringScalar']>;
  validDateMonthDist?: InputMaybe<Scalars['StringScalar']>;
  zoomJoinsAccount?: InputMaybe<ZoomJoinsAccount>;
  orgJoinsAccount?: InputMaybe<OrgJoinsAccount>;
  titleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeOrgExportedCompanies?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgExportedContacts?: InputMaybe<Scalars['StringScalar']>;
  excludeCompanyTags?: InputMaybe<Scalars['StringScalar']>;
  personWebReferences?: InputMaybe<Scalars['StringScalar']>;
  personWebReferencesURL?: InputMaybe<Scalars['StringScalar']>;
  departments?: InputMaybe<Scalars['StringScalar']>;
  jobFunctions?: InputMaybe<Scalars['StringScalar']>;
  isEU?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMin?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMax?: InputMaybe<Scalars['StringScalar']>;
  hasLocationId?: InputMaybe<Scalars['StringScalar']>;
  hasPersonalEmail?: InputMaybe<Scalars['StringScalar']>;
  hasMobilePhone?: InputMaybe<Scalars['StringScalar']>;
  hasEmail?: InputMaybe<Scalars['StringScalar']>;
  hasPhone?: InputMaybe<Scalars['StringScalar']>;
  hasDirectPhone?: InputMaybe<Scalars['StringScalar']>;
  hasCompanyPhone?: InputMaybe<Scalars['StringScalar']>;
  hasTitle?: InputMaybe<Scalars['StringScalar']>;
  hasBeenNotified?: InputMaybe<Scalars['StringScalar']>;
  hasDepartment?: InputMaybe<Scalars['StringScalar']>;
  hasJobFunction?: InputMaybe<Scalars['StringScalar']>;
  hasSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgChartTier?: InputMaybe<Scalars['StringScalar']>;
  orgChartTier?: InputMaybe<Scalars['StringScalar']>;
  personCreationStartDate?: InputMaybe<Scalars['StringScalar']>;
  positionStartDate?: InputMaybe<Scalars['StringScalar']>;
  personCreationEndDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedStartDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedEndDate?: InputMaybe<Scalars['StringScalar']>;
  executivesOnly?: InputMaybe<Scalars['StringScalar']>;
  returnOnlyBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  excludeBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  page?: InputMaybe<Scalars['Float']>;
  rpp?: InputMaybe<Scalars['StringScalar']>;
  facetOptions?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  techAttributeTagNotUsedAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  findRecommendedContacts?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompanies?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesPage?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesRpp?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesSortBy?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesContacts?: InputMaybe<Scalars['StringScalar']>;
  solrPseudoOutputFields?: InputMaybe<Scalars['StringScalar']>;
  scoopEndDate?: InputMaybe<Scalars['StringScalar']>;
  scoopStartDate?: InputMaybe<Scalars['StringScalar']>;
  updatedSinceCreation?: InputMaybe<Scalars['StringScalar']>;
  scoopTypes?: InputMaybe<Scalars['StringScalar']>;
  scoopTopics?: InputMaybe<Scalars['StringScalar']>;
  scoopDepartments?: InputMaybe<Scalars['StringScalar']>;
  scoopDesc?: InputMaybe<Scalars['StringScalar']>;
  scoopIds?: InputMaybe<Scalars['StringScalar']>;
  scoringOptions?: InputMaybe<Scalars['StringScalar']>;
  masked?: InputMaybe<Scalars['Boolean']>;
  subscribed?: InputMaybe<Scalars['Boolean']>;
  orgImported?: InputMaybe<Scalars['Boolean']>;
  sessionToken?: InputMaybe<Scalars['StringScalar']>;
  definedUniverse?: InputMaybe<Scalars['StringScalar']>;
  outputFieldOptions?: InputMaybe<Scalars['StringScalar']>;
  ignoreDefaultFields?: InputMaybe<Scalars['StringScalar']>;
  includeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPersonOnlyMe?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedContacts?: InputMaybe<Scalars['Boolean']>;
  pTag?: InputMaybe<Scalars['StringScalar']>;
  cTag?: InputMaybe<Scalars['StringScalar']>;
  excludePeopleTags?: InputMaybe<Scalars['StringScalar']>;
  includeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAssociatedDeals?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeAllOrgImportLeads?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOptout?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  excludeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  orgImportOpportunities?: InputMaybe<Array<OrgImportOpportunities>>;
  includeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  searchFacadeParams?: InputMaybe<PersonArgs>;
};

export type PersonArgs = {
  nnNegation?: InputMaybe<Scalars['StringScalar']>;
  nnQueryId?: InputMaybe<Scalars['StringScalar']>;
  nnStartDate?: InputMaybe<Scalars['StringScalar']>;
  nnEndDate?: InputMaybe<Scalars['StringScalar']>;
  companyId?: InputMaybe<Scalars['StringScalar']>;
  companyIds?: InputMaybe<Scalars['StringScalar']>;
  revenueMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  revenueMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMax?: InputMaybe<Scalars['StringScalar']>;
  techAttributesAddedDropped?: InputMaybe<TechAttributesAddedDropped>;
  techAttributeNotUsedAnd?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMin?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMax?: InputMaybe<Scalars['StringScalar']>;
  locationCountMin?: InputMaybe<Scalars['StringScalar']>;
  locationCountMax?: InputMaybe<Scalars['StringScalar']>;
  metroAreas?: InputMaybe<Scalars['StringScalar']>;
  doziPrimaryIndustry?: InputMaybe<Scalars['StringScalar']>;
  hqLocationAreaCodes?: InputMaybe<Scalars['StringScalar']>;
  departmentEmployeeCounts?: InputMaybe<DepartmentEmployeeCounts>;
  departmentBudgets?: InputMaybe<DepartmentBudgets>;
  street?: InputMaybe<Scalars['StringScalar']>;
  locationType?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  negateScope?: InputMaybe<Scalars['Boolean']>;
  itBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  itBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  anyFundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  anyFundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  fundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  anyFundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  allInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  recentInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  state?: InputMaybe<Scalars['StringScalar']>;
  metroRegion?: InputMaybe<Scalars['StringScalar']>;
  country?: InputMaybe<Scalars['StringScalar']>;
  continent?: InputMaybe<Scalars['StringScalar']>;
  companyType?: InputMaybe<Scalars['StringScalar']>;
  companyName?: InputMaybe<Scalars['StringScalar']>;
  companyDomainNames?: InputMaybe<Scalars['StringScalar']>;
  companyDesc?: InputMaybe<Scalars['StringScalar']>;
  isPublic?: InputMaybe<Scalars['StringScalar']>;
  location?: InputMaybe<Scalars['StringScalar']>;
  zipCode?: InputMaybe<Scalars['StringScalar']>;
  radiusMiles?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTag?: InputMaybe<Scalars['StringScalar']>;
  industryKeywordsMulti?: InputMaybe<Scalars['StringScalar']>;
  primaryIndustriesOnly?: InputMaybe<Scalars['StringScalar']>;
  industryClassification?: InputMaybe<Scalars['StringScalar']>;
  industryKeywords?: InputMaybe<Scalars['StringScalar']>;
  industryCodeList?: InputMaybe<Scalars['StringScalar']>;
  industryCode?: InputMaybe<Scalars['StringScalar']>;
  industryCodeAnd?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  revenueClassification?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassification?: InputMaybe<Scalars['StringScalar']>;
  companyRanking?: InputMaybe<Scalars['StringScalar']>;
  pubPrivateSectors?: InputMaybe<Scalars['StringScalar']>;
  locationSearchType?: InputMaybe<Scalars['StringScalar']>;
  fundingMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  fundingMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAnd?: InputMaybe<Scalars['StringScalar']>;
  allInvestors?: InputMaybe<Scalars['StringScalar']>;
  recentInvestors?: InputMaybe<Scalars['StringScalar']>;
  allFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  recentFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  isCertified?: InputMaybe<Scalars['String']>;
  certificationStartDate?: InputMaybe<Scalars['StringScalar']>;
  certificationEndDate?: InputMaybe<Scalars['StringScalar']>;
  streetLineTwo?: InputMaybe<Scalars['StringScalar']>;
  hashtagField?: InputMaybe<Scalars['StringScalar']>;
  fullName?: InputMaybe<Scalars['StringScalar']>;
  gender?: InputMaybe<Scalars['StringScalar']>;
  personIds?: InputMaybe<Scalars['StringScalar']>;
  personID?: InputMaybe<Scalars['String']>;
  personId?: InputMaybe<Scalars['StringScalar']>;
  hasCanadianEmail?: InputMaybe<Scalars['StringScalar']>;
  companyLocationIds?: InputMaybe<Scalars['StringScalar']>;
  emailAddress?: InputMaybe<Scalars['StringScalar']>;
  firstName?: InputMaybe<Scalars['StringScalar']>;
  lastName?: InputMaybe<Scalars['StringScalar']>;
  middleInitial?: InputMaybe<Scalars['StringScalar']>;
  excludedPersonTitle?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  titleCertification?: InputMaybe<Scalars['StringScalar']>;
  personTitle?: InputMaybe<Scalars['StringScalar']>;
  titleSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleSeniority?: InputMaybe<Scalars['StringScalar']>;
  degree?: InputMaybe<Scalars['StringScalar']>;
  school?: InputMaybe<Scalars['StringScalar']>;
  companyDomainName?: InputMaybe<Scalars['StringScalar']>;
  companyPastOrPresent?: InputMaybe<Scalars['String']>;
  validDateMonthDist?: InputMaybe<Scalars['StringScalar']>;
  contactRequirements?: InputMaybe<Scalars['String']>;
  zoomJoinsAccount?: InputMaybe<ZoomJoinsAccount>;
  orgJoinsAccount?: InputMaybe<OrgJoinsAccount>;
  titleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeNoCompany?: InputMaybe<Scalars['String']>;
  excludeExportedCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeOrgExportedCompanies?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgExportedContacts?: InputMaybe<Scalars['StringScalar']>;
  excludeCompanyTags?: InputMaybe<Scalars['StringScalar']>;
  personWebReferences?: InputMaybe<Scalars['StringScalar']>;
  personWebReferencesURL?: InputMaybe<Scalars['StringScalar']>;
  departments?: InputMaybe<Scalars['StringScalar']>;
  jobFunctions?: InputMaybe<Scalars['StringScalar']>;
  isEU?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMin?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMax?: InputMaybe<Scalars['StringScalar']>;
  hasLocationId?: InputMaybe<Scalars['StringScalar']>;
  hasPersonalEmail?: InputMaybe<Scalars['StringScalar']>;
  hasMobilePhone?: InputMaybe<Scalars['StringScalar']>;
  hasEmail?: InputMaybe<Scalars['StringScalar']>;
  hasPhone?: InputMaybe<Scalars['StringScalar']>;
  hasDirectPhone?: InputMaybe<Scalars['StringScalar']>;
  hasCompanyPhone?: InputMaybe<Scalars['StringScalar']>;
  hasTitle?: InputMaybe<Scalars['StringScalar']>;
  hasBeenNotified?: InputMaybe<Scalars['StringScalar']>;
  hasDepartment?: InputMaybe<Scalars['StringScalar']>;
  hasJobFunction?: InputMaybe<Scalars['StringScalar']>;
  hasSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgChartTier?: InputMaybe<Scalars['StringScalar']>;
  orgChartTier?: InputMaybe<Scalars['StringScalar']>;
  personCreationStartDate?: InputMaybe<Scalars['StringScalar']>;
  positionStartDate?: InputMaybe<Scalars['StringScalar']>;
  personCreationEndDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedStartDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedEndDate?: InputMaybe<Scalars['StringScalar']>;
  executivesOnly?: InputMaybe<Scalars['StringScalar']>;
  returnOnlyBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  excludeBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  page?: InputMaybe<Scalars['Float']>;
  rpp?: InputMaybe<Scalars['StringScalar']>;
  facetOptions?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  techAttributeTagNotUsedAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  findRecommendedContacts?: InputMaybe<Scalars['StringScalar']>;
  sortBy?: InputMaybe<Scalars['String']>;
  sortOrder?: InputMaybe<Scalars['String']>;
  uniqueCompanies?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesPage?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesRpp?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesSortBy?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesContacts?: InputMaybe<Scalars['StringScalar']>;
  solrPseudoOutputFields?: InputMaybe<Scalars['StringScalar']>;
  scoopEndDate?: InputMaybe<Scalars['StringScalar']>;
  scoopStartDate?: InputMaybe<Scalars['StringScalar']>;
  updatedSinceCreation?: InputMaybe<Scalars['StringScalar']>;
  scoopTypes?: InputMaybe<Scalars['StringScalar']>;
  scoopTopics?: InputMaybe<Scalars['StringScalar']>;
  scoopDepartments?: InputMaybe<Scalars['StringScalar']>;
  scoopDesc?: InputMaybe<Scalars['StringScalar']>;
  scoopIds?: InputMaybe<Scalars['StringScalar']>;
  doziIndustry?: InputMaybe<Scalars['String']>;
  scoringOptions?: InputMaybe<Scalars['StringScalar']>;
  masked?: InputMaybe<Scalars['Boolean']>;
  subscribed?: InputMaybe<Scalars['Boolean']>;
  orgImported?: InputMaybe<Scalars['Boolean']>;
  sessionToken?: InputMaybe<Scalars['StringScalar']>;
  definedUniverse?: InputMaybe<Scalars['StringScalar']>;
  outputFieldOptions?: InputMaybe<Scalars['StringScalar']>;
  ignoreDefaultFields?: InputMaybe<Scalars['StringScalar']>;
  includeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPersonOnlyMe?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedContacts?: InputMaybe<Scalars['Boolean']>;
  excludeDefunctCompanies?: InputMaybe<Scalars['Boolean']>;
  pTag?: InputMaybe<Scalars['StringScalar']>;
  cTag?: InputMaybe<Scalars['StringScalar']>;
  excludePeopleTags?: InputMaybe<Scalars['StringScalar']>;
  includeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAssociatedDeals?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeAllOrgImportLeads?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOptout?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  excludeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  orgImportOpportunities?: InputMaybe<Array<OrgImportOpportunities>>;
  includeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  companyID?: InputMaybe<Scalars['String']>;
  fetchTechAddDropOptions?: InputMaybe<Scalars['Boolean']>;
  showUnmaskedContacts?: InputMaybe<Scalars['Boolean']>;
  defaultSearchParams?: InputMaybe<DefaultSearchParams>;
  packageName?: InputMaybe<Scalars['String']>;
  buyingCommittee?: InputMaybe<Scalars['String']>;
  jobTitle?: InputMaybe<Scalars['String']>;
  isTopExecutives?: InputMaybe<Scalars['Boolean']>;
};

export type BoardMemberModel = {
  company?: Maybe<CompanyDetailsModel>;
  from?: Maybe<Scalars['String']>;
  to?: Maybe<Scalars['String']>;
  jobFunction?: Maybe<Array<Scalars['String']>>;
  title?: Maybe<Scalars['String']>;
  level?: Maybe<Scalars['String']>;
};

export type DegreeModel = {
  areaOfStudy?: Maybe<Scalars['String']>;
  degree?: Maybe<Scalars['String']>;
};

export type EducationModel = {
  school?: Maybe<Scalars['String']>;
  degree?: Maybe<DegreeModel>;
};

export type EmploymentHistoryModel = {
  companyName?: Maybe<Scalars['String']>;
  from?: Maybe<Scalars['String']>;
  to?: Maybe<Scalars['String']>;
  jobFunction?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  level?: Maybe<Scalars['String']>;
  companyID?: Maybe<Scalars['Float']>;
  companyWebsite?: Maybe<Scalars['String']>;
};

export type WebReferencesModel = {
  description?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
};

export type OrgChartJobFunction = {
  department?: Maybe<Scalars['String']>;
  departmentId?: Maybe<Scalars['String']>;
  jobFunction?: Maybe<Scalars['String']>;
  jobFunctionId?: Maybe<Scalars['String']>;
};

export type PersonDetailsModel = {
  entityId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  industry?: Maybe<Array<Scalars['String']>>;
  newJobFunction?: Maybe<Array<Scalars['String']>>;
  orgChartTier?: Maybe<Scalars['Float']>;
  topLevelIndustry?: Maybe<Array<Scalars['String']>>;
  title?: Maybe<Scalars['String']>;
  jobFunction?: Maybe<Array<Scalars['String']>>;
  employmentHistory?: Maybe<Array<EmploymentHistoryModel>>;
  education?: Maybe<Array<EducationModel>>;
  orgChartJobFunction?: Maybe<Array<OrgChartJobFunction>>;
  jobFunctions?: Maybe<Array<OrgChartJobFunction>>;
  webReference?: Maybe<Array<WebReferencesModel>>;
  boardMember?: Maybe<Array<BoardMemberModel>>;
  personBiography?: Maybe<Scalars['String']>;
  socialUrls?: Maybe<SocialMediaUrlModel>;
  socialUrlsParsed?: Maybe<SocialMediaParsed>;
  followerCountParsed?: Maybe<SocialMediaParsed>;
  foundedYear?: Maybe<Scalars['Float']>;
  alexaRank?: Maybe<Scalars['Float']>;
  directPhoneIsDoNotCall?: Maybe<Scalars['Boolean']>;
  mobilePhoneIsDoNotCall?: Maybe<Scalars['Boolean']>;
  directPhoneBlocked?: Maybe<Scalars['Boolean']>;
  mobilePhoneBlocked?: Maybe<Scalars['Boolean']>;
  emailBlocked?: Maybe<Scalars['Boolean']>;
  personalEmailBlocked?: Maybe<Scalars['Boolean']>;
  company?: Maybe<CompanyDetailsModel>;
  importedData?: Maybe<ImportedDataModel>;
};

export type SocialNetworkModel = {
  socialNetworkType?: Maybe<Scalars['String']>;
  socialNetworkUrl?: Maybe<Scalars['String']>;
};

export type SocialOrgChartMediaUrlModel = {
  socialMedia?: Maybe<Array<SocialNetworkModel>>;
};

export type JobFunctions = {
  department?: Maybe<Scalars['String']>;
  departmentId?: Maybe<Scalars['Float']>;
  departmentPriority?: Maybe<Scalars['Float']>;
  jobFunctionId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  orgChartSwimLane?: Maybe<Scalars['String']>;
  orgChartSwimLanePriority?: Maybe<Scalars['Float']>;
  rank?: Maybe<Scalars['Float']>;
};

export type ListedTypes = {
  listName?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Boolean']>;
};

export type SolarPseudoOtuputFieldsModel = {
  exported?: Maybe<Scalars['Boolean']>;
  imported?: Maybe<Scalars['Boolean']>;
  listed?: Maybe<Array<ListedTypes>>;
  orgImported?: Maybe<Scalars['Boolean']>;
  orgOriginSF?: Maybe<Scalars['Boolean']>;
  owned?: Maybe<Scalars['Boolean']>;
  recentExported?: Maybe<Scalars['Boolean']>;
  tagged?: Maybe<Scalars['Boolean']>;
  viewed?: Maybe<Scalars['Boolean']>;
};

export type OrgChartLevelModel = {
  businessEmailAddress?: Maybe<Scalars['String']>;
  companyHQPhone?: Maybe<Scalars['String']>;
  confidenceScore?: Maybe<Scalars['Float']>;
  directPhone?: Maybe<Scalars['String']>;
  directPhoneIsDoNotCall?: Maybe<Scalars['Boolean']>;
  imageUrl?: Maybe<Scalars['String']>;
  indentationPosition?: Maybe<Scalars['Float']>;
  isMasked?: Maybe<Scalars['Boolean']>;
  isTagged?: Maybe<Scalars['Boolean']>;
  jobFunctions?: Maybe<Array<JobFunctions>>;
  mobilePhone?: Maybe<Scalars['String']>;
  mobilePhoneIsDoNotCall?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  orgChartTier?: Maybe<Scalars['Float']>;
  personId?: Maybe<Scalars['Float']>;
  personalEmailAddress?: Maybe<Scalars['String']>;
  socialUrls?: Maybe<SocialOrgChartMediaUrlModel>;
  solrPseudoOutputFields?: Maybe<SolarPseudoOtuputFieldsModel>;
  subOrgChartTier?: Maybe<Scalars['Float']>;
  socialUrlsParsed?: Maybe<SocialMediaParsed>;
  followerCountParsed?: Maybe<SocialMediaParsed>;
  title?: Maybe<Scalars['String']>;
};

export type OrgChartSwimLanesNameDataModel = {
  data?: Maybe<Array<OrgChartLevelModel>>;
  departments?: Maybe<Scalars['String']>;
  jobFunctionName?: Maybe<Scalars['String']>;
  jobFunctions?: Maybe<Scalars['String']>;
  maxResults?: Maybe<Scalars['Float']>;
  orgChartSwimLane?: Maybe<Scalars['String']>;
  totalResults?: Maybe<Scalars['Float']>;
};

export type OrgChartSwimLanesModel = {
  data?: Maybe<Array<OrgChartSwimLanesNameDataModel>>;
  swimLaneName?: Maybe<Scalars['String']>;
};

export type OrgChart = {
  companyId?: Maybe<Scalars['String']>;
  departments?: Maybe<Scalars['String']>;
  highestTier?: Maybe<Scalars['Float']>;
  orgChartSwimLanes?: Maybe<Array<OrgChartSwimLanesModel>>;
  topLevelContacts?: Maybe<Array<OrgChartLevelModel>>;
};

export type PersonCertificationsModel = {
  certificationName?: Maybe<Scalars['String']>;
  organizationName?: Maybe<Scalars['String']>;
};

export type OrgUniversalTagModel = {
  tagName?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Boolean']>;
};

export type PplAtOrgItemModel = {
  buyingCommittee?: Maybe<Scalars['Boolean']>;
  certifications?: Maybe<Array<PersonCertificationsModel>>;
  orgUniversalTagged?: Maybe<Array<OrgUniversalTagModel>>;
  universalTagged?: Maybe<Array<OrgUniversalTagModel>>;
  certified?: Maybe<Scalars['Boolean']>;
  isEU?: Maybe<Scalars['Boolean']>;
  jobTitle?: Maybe<Scalars['String']>;
  positionStartDate?: Maybe<Scalars['String']>;
  socialUrls?: Maybe<SocialOrgChartMediaUrlModel>;
  website?: Maybe<Scalars['String']>;
  personID: Scalars['String'];
  profileImageURL?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  mobilePhone?: Maybe<Scalars['String']>;
  personalEmail?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  location?: Maybe<LocationModel>;
  topLevelIndustry?: Maybe<Array<Scalars['String']>>;
  industry?: Maybe<Array<Scalars['String']>>;
  lastMentioned?: Maybe<Scalars['String']>;
  lastUpdatedDate?: Maybe<Scalars['String']>;
  confidenceScore?: Maybe<Scalars['Float']>;
  noticeProvidedInfo?: Maybe<NoticeInfoModel>;
  privacyRegulationFlags?: Maybe<PrivacyRegulationsModel>;
  isPast?: Maybe<Scalars['String']>;
  score?: Maybe<Scalars['Float']>;
  name?: Maybe<Scalars['String']>;
  managementLevel?: Maybe<Scalars['String']>;
  jobFunction?: Maybe<Array<Scalars['String']>>;
  title?: Maybe<Scalars['String']>;
  companyID?: Maybe<Scalars['String']>;
  companyLogo?: Maybe<Scalars['String']>;
  companyName?: Maybe<Scalars['String']>;
  companyAddress?: Maybe<LocationModel>;
  companyRevenue?: Maybe<Scalars['String']>;
  companyRevenueRange?: Maybe<Scalars['String']>;
  companyEmployees?: Maybe<Scalars['Float']>;
  companyEmployeeCountRange?: Maybe<Scalars['String']>;
  companyDomain?: Maybe<Scalars['String']>;
  companyPhone?: Maybe<Scalars['String']>;
  companyDescription?: Maybe<Scalars['String']>;
  companyFax?: Maybe<Scalars['String']>;
  creationDate?: Maybe<Scalars['String']>;
  companyType?: Maybe<Scalars['String']>;
  subscribed?: Maybe<Scalars['Boolean']>;
  companyRevenueIn000s?: Maybe<Scalars['Float']>;
  companySIC?: Maybe<Array<Scalars['Float']>>;
  companyNAICS?: Maybe<Array<Scalars['Float']>>;
  companyTicker?: Maybe<Scalars['String']>;
  middleInitial?: Maybe<Scalars['String']>;
  isMasked?: Maybe<Scalars['Boolean']>;
  isTagged?: Maybe<Scalars['Boolean']>;
  directPhoneBlocked?: Maybe<Scalars['Boolean']>;
  mobilePhoneBlocked?: Maybe<Scalars['Boolean']>;
  personalEmailBlocked?: Maybe<Scalars['Boolean']>;
  emailBlocked?: Maybe<Scalars['Boolean']>;
  doziIndustry?: Maybe<Array<DoziIndustryModel>>;
};

export type QuickSearchDataRes = {
  companyId?: Maybe<Scalars['String']>;
  companyName?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  personID?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  isDefunct?: Maybe<Scalars['Boolean']>;
  ultimateParent?: Maybe<UltimateParentModel>;
};

export type QuickSearchRes = {
  companiesCount?: Maybe<Scalars['Float']>;
  data?: Maybe<Array<QuickSearchDataRes>>;
  maxResults?: Maybe<Scalars['Float']>;
  totalResults?: Maybe<Scalars['Float']>;
};

export type OnEnterTops = {
  topCount?: Maybe<Scalars['String']>;
  topName?: Maybe<Scalars['String']>;
  topValue?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type FundingInvestorSuggestionModel = {
  companyName?: Maybe<Scalars['String']>;
  investorDomain?: Maybe<Scalars['String']>;
  investorName?: Maybe<Scalars['String']>;
};

export type FundingSuggestiongModel = {
  amountIn000s?: Maybe<Scalars['Float']>;
  date?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  investors?: Maybe<Array<FundingInvestorSuggestionModel>>;
  round?: Maybe<Scalars['String']>;
};

export type CompanySuggestionDataModel = {
  buyingCommittee?: Maybe<Scalars['Boolean']>;
  certifications?: Maybe<Array<PersonCertificationsModel>>;
  orgUniversalTagged?: Maybe<Array<OrgUniversalTagModel>>;
  universalTagged?: Maybe<Array<OrgUniversalTagModel>>;
  certified?: Maybe<Scalars['Boolean']>;
  isEU?: Maybe<Scalars['Boolean']>;
  jobTitle?: Maybe<Scalars['String']>;
  positionStartDate?: Maybe<Scalars['String']>;
  socialUrls?: Maybe<SocialOrgChartMediaUrlModel>;
  website?: Maybe<Scalars['String']>;
  companyAddress?: Maybe<LocationModel>;
  companyDescription?: Maybe<Scalars['String']>;
  companyDomain?: Maybe<Scalars['String']>;
  companyEmployeeCountRange?: Maybe<Scalars['String']>;
  companyEmployees?: Maybe<Scalars['Float']>;
  companyID?: Maybe<Scalars['String']>;
  companyLogo?: Maybe<Scalars['String']>;
  companyName?: Maybe<Scalars['String']>;
  companyPhone?: Maybe<Scalars['String']>;
  companyType?: Maybe<Scalars['String']>;
  confidenceScore?: Maybe<Scalars['Float']>;
  companyRevenue?: Maybe<Scalars['String']>;
  creationDate?: Maybe<Scalars['String']>;
  middleInitial?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  profileImageURL?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  companyRevenueRange?: Maybe<Scalars['String']>;
  companyTicker?: Maybe<Scalars['String']>;
  companyRevenueIn000s?: Maybe<Scalars['Float']>;
  doziIndustry?: Maybe<Array<DoziIndustryModel>>;
  firstName?: Maybe<Scalars['String']>;
  isMasked?: Maybe<Scalars['Boolean']>;
  isPast?: Maybe<Scalars['String']>;
  isTagged?: Maybe<Scalars['Boolean']>;
  lastMentioned?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  lastUpdatedDate?: Maybe<Scalars['String']>;
  location?: Maybe<LocationModel>;
  mobilePhoneBlocked?: Maybe<Scalars['Boolean']>;
  mobilePhoneIsDoNotCall?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  noticeProvidedInfo?: Maybe<NoticeInfoModel>;
  personID: Scalars['String'];
  score?: Maybe<Scalars['Float']>;
  subscribed?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  topLevelIndustry?: Maybe<Array<Scalars['String']>>;
  certificationDate?: Maybe<Scalars['String']>;
  companyIds?: Maybe<Array<Scalars['Float']>>;
  logo?: Maybe<Scalars['String']>;
  socialNetworkUrls?: Maybe<Array<SocialNetworkModel>>;
  employees?: Maybe<Scalars['Float']>;
  ultimateParent?: Maybe<UltimateParentModel>;
  employeesRange?: Maybe<Scalars['String']>;
  funding?: Maybe<Array<FundingSuggestiongModel>>;
  isDefunct?: Maybe<Scalars['Boolean']>;
  revenue?: Maybe<Scalars['String']>;
  companyEmployeeRange?: Maybe<Scalars['String']>;
  industries?: Maybe<Array<DoziIndustryModel>>;
  revenueRange?: Maybe<Scalars['String']>;
  totalFundingAmountIn000s?: Maybe<Scalars['Float']>;
};

export type CompanySuggestionModel = {
  companiesCount?: Maybe<Scalars['Float']>;
  data?: Maybe<Array<CompanySuggestionDataModel>>;
  maxResults?: Maybe<Scalars['Float']>;
  totalResults?: Maybe<Scalars['Float']>;
};

export type ItemSuggestions = {
  type?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type SearchSuggestions = {
  displayItem?: Maybe<Scalars['String']>;
  searchType?: Maybe<Scalars['String']>;
  suggestions?: Maybe<Array<ItemSuggestions>>;
};

export type SuggestionsModel = {
  peopleSuggestion?: Maybe<PersonSearchModel>;
  companySuggestion?: Maybe<CompanySuggestionModel>;
};


export type SuggestionsModelpeopleSuggestionArgs = {
  rpp?: InputMaybe<Scalars['Float']>;
};


export type SuggestionsModelcompanySuggestionArgs = {
  rpp?: InputMaybe<Scalars['Float']>;
};

export type TrySearchSuggestion = {
  items?: Maybe<Array<SearchSuggestions>>;
  showAdditionalTrySearches?: Maybe<Scalars['Boolean']>;
};

export type QuickSearchModel = {
  success?: Maybe<Scalars['Boolean']>;
  companies?: Maybe<CompanySuggestionModel>;
  contacts?: Maybe<QuickSearchRes>;
  onEnterTops?: Maybe<Array<OnEnterTops>>;
  tops?: Maybe<Array<OnEnterTops>>;
  trySearchSuggestions?: Maybe<TrySearchSuggestion>;
};

export type Company = {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  tagged?: Maybe<Scalars['Boolean']>;
  masked?: Maybe<Scalars['Boolean']>;
  subscribed?: Maybe<Scalars['Boolean']>;
  exported?: Maybe<Scalars['Boolean']>;
  description?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['String']>;
  fax?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  ticker?: Maybe<Scalars['String']>;
  crmEntityId?: Maybe<Scalars['String']>;
  address?: Maybe<LocationModel>;
  displayAddress?: Maybe<Scalars['String']>;
  employeeCount?: Maybe<Scalars['Float']>;
  revenue?: Maybe<Scalars['String']>;
  doziIndustry?: Maybe<Array<DoziIndustryModel>>;
  doziIndustryString?: Maybe<Scalars['String']>;
  revenueRange?: Maybe<Scalars['String']>;
  industry?: Maybe<Array<Scalars['String']>>;
  industries?: Maybe<Array<Scalars['String']>>;
  allIndustries?: Maybe<Array<Scalars['String']>>;
  isDefunct?: Maybe<Scalars['Boolean']>;
  uniqueCompanyNumContacts?: Maybe<Scalars['Float']>;
  companyHref?: Maybe<Scalars['String']>;
  isInPreview?: Maybe<Scalars['Boolean']>;
  funding?: Maybe<Array<FundingModel>>;
  departmentBudgets?: Maybe<Array<DepartmentBudgetsModel>>;
  certified?: Maybe<Scalars['Boolean']>;
  certificationDate?: Maybe<Scalars['String']>;
  icpScore?: Maybe<Scalars['String']>;
  locationsCount?: Maybe<Scalars['String']>;
  ultimateParent?: Maybe<Scalars['String']>;
  orgImport?: Maybe<Scalars['String']>;
};

export type HCompaniesData = {
  certified?: Maybe<Scalars['Boolean']>;
  companyFax?: Maybe<Scalars['String']>;
  companyID?: Maybe<Scalars['String']>;
  companyPhone?: Maybe<Scalars['String']>;
  isDefunct?: Maybe<Scalars['Boolean']>;
  isMasked?: Maybe<Scalars['Boolean']>;
  isTagged?: Maybe<Scalars['Boolean']>;
  subscribed?: Maybe<Scalars['Boolean']>;
  totalFundingAmountIn000s?: Maybe<Scalars['Float']>;
  location?: Maybe<LocationModel>;
};

export type HCompaniesRes = {
  companiesCount?: Maybe<Scalars['Float']>;
  maxResults?: Maybe<Scalars['Float']>;
  totalResults?: Maybe<Scalars['Float']>;
  facetData?: Maybe<BasicFacetDataModel>;
  data?: Maybe<Array<HCompaniesData>>;
};

export type HUnifiedCompaniesRes = {
  resultEntity?: Maybe<Array<Company>>;
};

export type Query = {
  hCompaniesSearch: HCompaniesRes;
  hUnifiedCompaniesSearch: HUnifiedCompaniesRes;
  personDetails: PersonDetailsModel;
  personSearch: PersonSearchModel;
  scoopsSearch: Array<Scoops>;
  orgchartsSearch: OrgChart;
  companyHierarchySearch: CompanyHierarchyRes;
  facets: Facets;
  suggestions: SuggestionsModel;
  quickSearch: QuickSearchModel;
  companyDetails: CompanyDetailsModel;
  companySearch: CompanySearchResultModel;
};


export type QueryhCompaniesSearchArgs = {
  addressVerificationStatusList?: InputMaybe<Scalars['String']>;
  isLocationHierarchy?: InputMaybe<Scalars['Boolean']>;
  locationType?: InputMaybe<Scalars['String']>;
  parentId?: InputMaybe<Scalars['String']>;
  subUnitType?: InputMaybe<Scalars['String']>;
  ultimateParentId?: InputMaybe<Scalars['String']>;
  continent?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
};


export type QueryhUnifiedCompaniesSearchArgs = {
  isLocationHierarchy?: InputMaybe<Scalars['Boolean']>;
  page?: InputMaybe<Scalars['Float']>;
  rpp?: InputMaybe<Scalars['Float']>;
  subscribed?: InputMaybe<Scalars['Boolean']>;
  companyIds?: InputMaybe<Scalars['String']>;
  ultimateParentId?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  continent?: InputMaybe<Scalars['String']>;
  locationSearchType?: InputMaybe<Scalars['String']>;
};


export type QuerypersonDetailsArgs = {
  companyID?: InputMaybe<Scalars['String']>;
  fetchTechAddDropOptions?: InputMaybe<Scalars['Boolean']>;
  showUnmaskedContacts?: InputMaybe<Scalars['Boolean']>;
  defaultSearchParams?: InputMaybe<DefaultSearchParams>;
  packageName?: InputMaybe<Scalars['String']>;
  buyingCommittee?: InputMaybe<Scalars['String']>;
  companyPastOrPresent?: InputMaybe<Scalars['StringScalar']>;
  contactRequirements?: InputMaybe<Scalars['StringScalar']>;
  doziIndustry?: InputMaybe<Scalars['StringScalar']>;
  excludeDefunctCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeNoCompany?: InputMaybe<Scalars['StringScalar']>;
  isCertified?: InputMaybe<Scalars['StringScalar']>;
  sortBy?: InputMaybe<Scalars['StringScalar']>;
  sortOrder?: InputMaybe<Scalars['StringScalar']>;
  nnNegation?: InputMaybe<Scalars['StringScalar']>;
  nnQueryId?: InputMaybe<Scalars['StringScalar']>;
  nnStartDate?: InputMaybe<Scalars['StringScalar']>;
  nnEndDate?: InputMaybe<Scalars['StringScalar']>;
  companyId?: InputMaybe<Scalars['StringScalar']>;
  companyIds?: InputMaybe<Scalars['StringScalar']>;
  revenueMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  revenueMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMax?: InputMaybe<Scalars['StringScalar']>;
  techAttributesAddedDropped?: InputMaybe<TechAttributesAddedDropped>;
  techAttributeNotUsedAnd?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMin?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMax?: InputMaybe<Scalars['StringScalar']>;
  locationCountMin?: InputMaybe<Scalars['StringScalar']>;
  locationCountMax?: InputMaybe<Scalars['StringScalar']>;
  metroAreas?: InputMaybe<Scalars['StringScalar']>;
  doziPrimaryIndustry?: InputMaybe<Scalars['StringScalar']>;
  hqLocationAreaCodes?: InputMaybe<Scalars['StringScalar']>;
  departmentEmployeeCounts?: InputMaybe<DepartmentEmployeeCounts>;
  departmentBudgets?: InputMaybe<DepartmentBudgets>;
  street?: InputMaybe<Scalars['StringScalar']>;
  locationType?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  negateScope?: InputMaybe<Scalars['Boolean']>;
  itBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  itBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  anyFundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  anyFundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  fundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  anyFundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  allInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  recentInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  state?: InputMaybe<Scalars['StringScalar']>;
  metroRegion?: InputMaybe<Scalars['StringScalar']>;
  country?: InputMaybe<Scalars['StringScalar']>;
  continent?: InputMaybe<Scalars['StringScalar']>;
  companyType?: InputMaybe<Scalars['StringScalar']>;
  companyName?: InputMaybe<Scalars['StringScalar']>;
  companyDomainNames?: InputMaybe<Scalars['StringScalar']>;
  companyDesc?: InputMaybe<Scalars['StringScalar']>;
  isPublic?: InputMaybe<Scalars['StringScalar']>;
  location?: InputMaybe<Scalars['StringScalar']>;
  zipCode?: InputMaybe<Scalars['StringScalar']>;
  radiusMiles?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTag?: InputMaybe<Scalars['StringScalar']>;
  industryKeywordsMulti?: InputMaybe<Scalars['StringScalar']>;
  primaryIndustriesOnly?: InputMaybe<Scalars['StringScalar']>;
  industryClassification?: InputMaybe<Scalars['StringScalar']>;
  industryKeywords?: InputMaybe<Scalars['StringScalar']>;
  industryCodeList?: InputMaybe<Scalars['StringScalar']>;
  industryCode?: InputMaybe<Scalars['StringScalar']>;
  industryCodeAnd?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  revenueClassification?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassification?: InputMaybe<Scalars['StringScalar']>;
  companyRanking?: InputMaybe<Scalars['StringScalar']>;
  pubPrivateSectors?: InputMaybe<Scalars['StringScalar']>;
  locationSearchType?: InputMaybe<Scalars['StringScalar']>;
  fundingMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  fundingMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAnd?: InputMaybe<Scalars['StringScalar']>;
  allInvestors?: InputMaybe<Scalars['StringScalar']>;
  recentInvestors?: InputMaybe<Scalars['StringScalar']>;
  allFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  recentFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  certificationStartDate?: InputMaybe<Scalars['StringScalar']>;
  certificationEndDate?: InputMaybe<Scalars['StringScalar']>;
  streetLineTwo?: InputMaybe<Scalars['StringScalar']>;
  hashtagField?: InputMaybe<Scalars['StringScalar']>;
  fullName?: InputMaybe<Scalars['StringScalar']>;
  gender?: InputMaybe<Scalars['StringScalar']>;
  personIds?: InputMaybe<Scalars['StringScalar']>;
  personID?: InputMaybe<Scalars['String']>;
  personId?: InputMaybe<Scalars['StringScalar']>;
  hasCanadianEmail?: InputMaybe<Scalars['StringScalar']>;
  companyLocationIds?: InputMaybe<Scalars['StringScalar']>;
  emailAddress?: InputMaybe<Scalars['StringScalar']>;
  firstName?: InputMaybe<Scalars['StringScalar']>;
  lastName?: InputMaybe<Scalars['StringScalar']>;
  middleInitial?: InputMaybe<Scalars['StringScalar']>;
  excludedPersonTitle?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  titleCertification?: InputMaybe<Scalars['StringScalar']>;
  personTitle?: InputMaybe<Scalars['StringScalar']>;
  titleSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleSeniority?: InputMaybe<Scalars['StringScalar']>;
  degree?: InputMaybe<Scalars['StringScalar']>;
  school?: InputMaybe<Scalars['StringScalar']>;
  companyDomainName?: InputMaybe<Scalars['StringScalar']>;
  validDateMonthDist?: InputMaybe<Scalars['StringScalar']>;
  zoomJoinsAccount?: InputMaybe<ZoomJoinsAccount>;
  orgJoinsAccount?: InputMaybe<OrgJoinsAccount>;
  titleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeOrgExportedCompanies?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgExportedContacts?: InputMaybe<Scalars['StringScalar']>;
  excludeCompanyTags?: InputMaybe<Scalars['StringScalar']>;
  personWebReferences?: InputMaybe<Scalars['StringScalar']>;
  personWebReferencesURL?: InputMaybe<Scalars['StringScalar']>;
  departments?: InputMaybe<Scalars['StringScalar']>;
  jobFunctions?: InputMaybe<Scalars['StringScalar']>;
  isEU?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMin?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMax?: InputMaybe<Scalars['StringScalar']>;
  hasLocationId?: InputMaybe<Scalars['StringScalar']>;
  hasPersonalEmail?: InputMaybe<Scalars['StringScalar']>;
  hasMobilePhone?: InputMaybe<Scalars['StringScalar']>;
  hasEmail?: InputMaybe<Scalars['StringScalar']>;
  hasPhone?: InputMaybe<Scalars['StringScalar']>;
  hasDirectPhone?: InputMaybe<Scalars['StringScalar']>;
  hasCompanyPhone?: InputMaybe<Scalars['StringScalar']>;
  hasTitle?: InputMaybe<Scalars['StringScalar']>;
  hasBeenNotified?: InputMaybe<Scalars['StringScalar']>;
  hasDepartment?: InputMaybe<Scalars['StringScalar']>;
  hasJobFunction?: InputMaybe<Scalars['StringScalar']>;
  hasSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgChartTier?: InputMaybe<Scalars['StringScalar']>;
  orgChartTier?: InputMaybe<Scalars['StringScalar']>;
  personCreationStartDate?: InputMaybe<Scalars['StringScalar']>;
  positionStartDate?: InputMaybe<Scalars['StringScalar']>;
  personCreationEndDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedStartDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedEndDate?: InputMaybe<Scalars['StringScalar']>;
  executivesOnly?: InputMaybe<Scalars['StringScalar']>;
  returnOnlyBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  excludeBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  page?: InputMaybe<Scalars['Float']>;
  rpp?: InputMaybe<Scalars['StringScalar']>;
  facetOptions?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  techAttributeTagNotUsedAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  findRecommendedContacts?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompanies?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesPage?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesRpp?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesSortBy?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesContacts?: InputMaybe<Scalars['StringScalar']>;
  solrPseudoOutputFields?: InputMaybe<Scalars['StringScalar']>;
  scoopEndDate?: InputMaybe<Scalars['StringScalar']>;
  scoopStartDate?: InputMaybe<Scalars['StringScalar']>;
  updatedSinceCreation?: InputMaybe<Scalars['StringScalar']>;
  scoopTypes?: InputMaybe<Scalars['StringScalar']>;
  scoopTopics?: InputMaybe<Scalars['StringScalar']>;
  scoopDepartments?: InputMaybe<Scalars['StringScalar']>;
  scoopDesc?: InputMaybe<Scalars['StringScalar']>;
  scoopIds?: InputMaybe<Scalars['StringScalar']>;
  scoringOptions?: InputMaybe<Scalars['StringScalar']>;
  masked?: InputMaybe<Scalars['Boolean']>;
  subscribed?: InputMaybe<Scalars['Boolean']>;
  orgImported?: InputMaybe<Scalars['Boolean']>;
  sessionToken?: InputMaybe<Scalars['StringScalar']>;
  definedUniverse?: InputMaybe<Scalars['StringScalar']>;
  outputFieldOptions?: InputMaybe<Scalars['StringScalar']>;
  ignoreDefaultFields?: InputMaybe<Scalars['StringScalar']>;
  includeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPersonOnlyMe?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedContacts?: InputMaybe<Scalars['Boolean']>;
  pTag?: InputMaybe<Scalars['StringScalar']>;
  cTag?: InputMaybe<Scalars['StringScalar']>;
  excludePeopleTags?: InputMaybe<Scalars['StringScalar']>;
  includeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAssociatedDeals?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeAllOrgImportLeads?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOptout?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  excludeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  orgImportOpportunities?: InputMaybe<Array<OrgImportOpportunities>>;
  includeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  jobTitle?: InputMaybe<Scalars['String']>;
  isTopExecutives?: InputMaybe<Scalars['Boolean']>;
};


export type QuerypersonSearchArgs = {
  personID?: InputMaybe<Scalars['StringScalar']>;
  jobTitle?: InputMaybe<Scalars['String']>;
  packageName?: InputMaybe<Scalars['String']>;
  isTopExecutives?: InputMaybe<Scalars['Boolean']>;
  companyID?: InputMaybe<Scalars['String']>;
  fetchTechAddDropOptions?: InputMaybe<Scalars['Boolean']>;
  showUnmaskedContacts?: InputMaybe<Scalars['Boolean']>;
  defaultSearchParams?: InputMaybe<DefaultSearchParams>;
  buyingCommittee?: InputMaybe<Scalars['String']>;
  companyPastOrPresent?: InputMaybe<Scalars['StringScalar']>;
  contactRequirements?: InputMaybe<Scalars['StringScalar']>;
  doziIndustry?: InputMaybe<Scalars['StringScalar']>;
  excludeDefunctCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeNoCompany?: InputMaybe<Scalars['StringScalar']>;
  isCertified?: InputMaybe<Scalars['StringScalar']>;
  sortBy?: InputMaybe<Scalars['StringScalar']>;
  sortOrder?: InputMaybe<Scalars['StringScalar']>;
  nnNegation?: InputMaybe<Scalars['StringScalar']>;
  nnQueryId?: InputMaybe<Scalars['StringScalar']>;
  nnStartDate?: InputMaybe<Scalars['StringScalar']>;
  nnEndDate?: InputMaybe<Scalars['StringScalar']>;
  companyId?: InputMaybe<Scalars['StringScalar']>;
  companyIds?: InputMaybe<Scalars['StringScalar']>;
  revenueMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  revenueMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMax?: InputMaybe<Scalars['StringScalar']>;
  techAttributesAddedDropped?: InputMaybe<TechAttributesAddedDropped>;
  techAttributeNotUsedAnd?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMin?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMax?: InputMaybe<Scalars['StringScalar']>;
  locationCountMin?: InputMaybe<Scalars['StringScalar']>;
  locationCountMax?: InputMaybe<Scalars['StringScalar']>;
  metroAreas?: InputMaybe<Scalars['StringScalar']>;
  doziPrimaryIndustry?: InputMaybe<Scalars['StringScalar']>;
  hqLocationAreaCodes?: InputMaybe<Scalars['StringScalar']>;
  departmentEmployeeCounts?: InputMaybe<DepartmentEmployeeCounts>;
  departmentBudgets?: InputMaybe<DepartmentBudgets>;
  street?: InputMaybe<Scalars['StringScalar']>;
  locationType?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  negateScope?: InputMaybe<Scalars['Boolean']>;
  itBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  itBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  anyFundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  anyFundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  fundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  anyFundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  allInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  recentInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  state?: InputMaybe<Scalars['StringScalar']>;
  metroRegion?: InputMaybe<Scalars['StringScalar']>;
  country?: InputMaybe<Scalars['StringScalar']>;
  continent?: InputMaybe<Scalars['StringScalar']>;
  companyType?: InputMaybe<Scalars['StringScalar']>;
  companyName?: InputMaybe<Scalars['StringScalar']>;
  companyDomainNames?: InputMaybe<Scalars['StringScalar']>;
  companyDesc?: InputMaybe<Scalars['StringScalar']>;
  isPublic?: InputMaybe<Scalars['StringScalar']>;
  location?: InputMaybe<Scalars['StringScalar']>;
  zipCode?: InputMaybe<Scalars['StringScalar']>;
  radiusMiles?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTag?: InputMaybe<Scalars['StringScalar']>;
  industryKeywordsMulti?: InputMaybe<Scalars['StringScalar']>;
  primaryIndustriesOnly?: InputMaybe<Scalars['StringScalar']>;
  industryClassification?: InputMaybe<Scalars['StringScalar']>;
  industryKeywords?: InputMaybe<Scalars['StringScalar']>;
  industryCodeList?: InputMaybe<Scalars['StringScalar']>;
  industryCode?: InputMaybe<Scalars['StringScalar']>;
  industryCodeAnd?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  revenueClassification?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassification?: InputMaybe<Scalars['StringScalar']>;
  companyRanking?: InputMaybe<Scalars['StringScalar']>;
  pubPrivateSectors?: InputMaybe<Scalars['StringScalar']>;
  locationSearchType?: InputMaybe<Scalars['StringScalar']>;
  fundingMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  fundingMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAnd?: InputMaybe<Scalars['StringScalar']>;
  allInvestors?: InputMaybe<Scalars['StringScalar']>;
  recentInvestors?: InputMaybe<Scalars['StringScalar']>;
  allFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  recentFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  certificationStartDate?: InputMaybe<Scalars['StringScalar']>;
  certificationEndDate?: InputMaybe<Scalars['StringScalar']>;
  streetLineTwo?: InputMaybe<Scalars['StringScalar']>;
  hashtagField?: InputMaybe<Scalars['StringScalar']>;
  fullName?: InputMaybe<Scalars['StringScalar']>;
  gender?: InputMaybe<Scalars['StringScalar']>;
  personIds?: InputMaybe<Scalars['StringScalar']>;
  personId?: InputMaybe<Scalars['StringScalar']>;
  hasCanadianEmail?: InputMaybe<Scalars['StringScalar']>;
  companyLocationIds?: InputMaybe<Scalars['StringScalar']>;
  emailAddress?: InputMaybe<Scalars['StringScalar']>;
  firstName?: InputMaybe<Scalars['StringScalar']>;
  lastName?: InputMaybe<Scalars['StringScalar']>;
  middleInitial?: InputMaybe<Scalars['StringScalar']>;
  excludedPersonTitle?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  titleCertification?: InputMaybe<Scalars['StringScalar']>;
  personTitle?: InputMaybe<Scalars['StringScalar']>;
  titleSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleSeniority?: InputMaybe<Scalars['StringScalar']>;
  degree?: InputMaybe<Scalars['StringScalar']>;
  school?: InputMaybe<Scalars['StringScalar']>;
  companyDomainName?: InputMaybe<Scalars['StringScalar']>;
  validDateMonthDist?: InputMaybe<Scalars['StringScalar']>;
  zoomJoinsAccount?: InputMaybe<ZoomJoinsAccount>;
  orgJoinsAccount?: InputMaybe<OrgJoinsAccount>;
  titleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeOrgExportedCompanies?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgExportedContacts?: InputMaybe<Scalars['StringScalar']>;
  excludeCompanyTags?: InputMaybe<Scalars['StringScalar']>;
  personWebReferences?: InputMaybe<Scalars['StringScalar']>;
  personWebReferencesURL?: InputMaybe<Scalars['StringScalar']>;
  departments?: InputMaybe<Scalars['StringScalar']>;
  jobFunctions?: InputMaybe<Scalars['StringScalar']>;
  isEU?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMin?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMax?: InputMaybe<Scalars['StringScalar']>;
  hasLocationId?: InputMaybe<Scalars['StringScalar']>;
  hasPersonalEmail?: InputMaybe<Scalars['StringScalar']>;
  hasMobilePhone?: InputMaybe<Scalars['StringScalar']>;
  hasEmail?: InputMaybe<Scalars['StringScalar']>;
  hasPhone?: InputMaybe<Scalars['StringScalar']>;
  hasDirectPhone?: InputMaybe<Scalars['StringScalar']>;
  hasCompanyPhone?: InputMaybe<Scalars['StringScalar']>;
  hasTitle?: InputMaybe<Scalars['StringScalar']>;
  hasBeenNotified?: InputMaybe<Scalars['StringScalar']>;
  hasDepartment?: InputMaybe<Scalars['StringScalar']>;
  hasJobFunction?: InputMaybe<Scalars['StringScalar']>;
  hasSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgChartTier?: InputMaybe<Scalars['StringScalar']>;
  orgChartTier?: InputMaybe<Scalars['StringScalar']>;
  personCreationStartDate?: InputMaybe<Scalars['StringScalar']>;
  positionStartDate?: InputMaybe<Scalars['StringScalar']>;
  personCreationEndDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedStartDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedEndDate?: InputMaybe<Scalars['StringScalar']>;
  executivesOnly?: InputMaybe<Scalars['StringScalar']>;
  returnOnlyBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  excludeBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  page?: InputMaybe<Scalars['Float']>;
  rpp?: InputMaybe<Scalars['StringScalar']>;
  facetOptions?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  techAttributeTagNotUsedAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  findRecommendedContacts?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompanies?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesPage?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesRpp?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesSortBy?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesContacts?: InputMaybe<Scalars['StringScalar']>;
  solrPseudoOutputFields?: InputMaybe<Scalars['StringScalar']>;
  scoopEndDate?: InputMaybe<Scalars['StringScalar']>;
  scoopStartDate?: InputMaybe<Scalars['StringScalar']>;
  updatedSinceCreation?: InputMaybe<Scalars['StringScalar']>;
  scoopTypes?: InputMaybe<Scalars['StringScalar']>;
  scoopTopics?: InputMaybe<Scalars['StringScalar']>;
  scoopDepartments?: InputMaybe<Scalars['StringScalar']>;
  scoopDesc?: InputMaybe<Scalars['StringScalar']>;
  scoopIds?: InputMaybe<Scalars['StringScalar']>;
  scoringOptions?: InputMaybe<Scalars['StringScalar']>;
  masked?: InputMaybe<Scalars['Boolean']>;
  subscribed?: InputMaybe<Scalars['Boolean']>;
  orgImported?: InputMaybe<Scalars['Boolean']>;
  sessionToken?: InputMaybe<Scalars['StringScalar']>;
  definedUniverse?: InputMaybe<Scalars['StringScalar']>;
  outputFieldOptions?: InputMaybe<Scalars['StringScalar']>;
  ignoreDefaultFields?: InputMaybe<Scalars['StringScalar']>;
  includeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPersonOnlyMe?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedContacts?: InputMaybe<Scalars['Boolean']>;
  pTag?: InputMaybe<Scalars['StringScalar']>;
  cTag?: InputMaybe<Scalars['StringScalar']>;
  excludePeopleTags?: InputMaybe<Scalars['StringScalar']>;
  includeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAssociatedDeals?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeAllOrgImportLeads?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOptout?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  excludeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  orgImportOpportunities?: InputMaybe<Array<OrgImportOpportunities>>;
  includeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  searchFacadeParams?: InputMaybe<PersonArgs>;
};


export type QueryscoopsSearchArgs = {
  nnNegation?: InputMaybe<Scalars['StringScalar']>;
  nnQueryId?: InputMaybe<Scalars['StringScalar']>;
  nnStartDate?: InputMaybe<Scalars['StringScalar']>;
  nnEndDate?: InputMaybe<Scalars['StringScalar']>;
  companyId?: InputMaybe<Scalars['StringScalar']>;
  companyIds?: InputMaybe<Scalars['String']>;
  revenueMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  revenueMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMax?: InputMaybe<Scalars['StringScalar']>;
  techAttributesAddedDropped?: InputMaybe<TechAttributesAddedDropped>;
  techAttributeNotUsedAnd?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMin?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMax?: InputMaybe<Scalars['StringScalar']>;
  locationCountMin?: InputMaybe<Scalars['StringScalar']>;
  locationCountMax?: InputMaybe<Scalars['StringScalar']>;
  metroAreas?: InputMaybe<Scalars['StringScalar']>;
  doziPrimaryIndustry?: InputMaybe<Scalars['StringScalar']>;
  hqLocationAreaCodes?: InputMaybe<Scalars['StringScalar']>;
  departmentEmployeeCounts?: InputMaybe<DepartmentEmployeeCounts>;
  departmentBudgets?: InputMaybe<DepartmentBudgets>;
  street?: InputMaybe<Scalars['StringScalar']>;
  locationType?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  negateScope?: InputMaybe<Scalars['Boolean']>;
  itBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  itBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  anyFundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  anyFundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  fundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  anyFundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  allInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  recentInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  state?: InputMaybe<Scalars['StringScalar']>;
  metroRegion?: InputMaybe<Scalars['StringScalar']>;
  country?: InputMaybe<Scalars['StringScalar']>;
  continent?: InputMaybe<Scalars['StringScalar']>;
  companyType?: InputMaybe<Scalars['StringScalar']>;
  companyName?: InputMaybe<Scalars['String']>;
  companyDomainNames?: InputMaybe<Scalars['StringScalar']>;
  companyDesc?: InputMaybe<Scalars['StringScalar']>;
  isPublic?: InputMaybe<Scalars['StringScalar']>;
  location?: InputMaybe<Scalars['StringScalar']>;
  zipCode?: InputMaybe<Scalars['StringScalar']>;
  radiusMiles?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTag?: InputMaybe<Scalars['StringScalar']>;
  industryKeywordsMulti?: InputMaybe<Scalars['StringScalar']>;
  primaryIndustriesOnly?: InputMaybe<Scalars['StringScalar']>;
  industryClassification?: InputMaybe<Scalars['StringScalar']>;
  industryKeywords?: InputMaybe<Scalars['StringScalar']>;
  industryCodeList?: InputMaybe<Scalars['StringScalar']>;
  industryCode?: InputMaybe<Scalars['StringScalar']>;
  industryCodeAnd?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  revenueClassification?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassification?: InputMaybe<Scalars['StringScalar']>;
  companyRanking?: InputMaybe<Scalars['StringScalar']>;
  pubPrivateSectors?: InputMaybe<Scalars['StringScalar']>;
  locationSearchType?: InputMaybe<Scalars['StringScalar']>;
  fundingMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  fundingMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAnd?: InputMaybe<Scalars['StringScalar']>;
  allInvestors?: InputMaybe<Scalars['StringScalar']>;
  recentInvestors?: InputMaybe<Scalars['StringScalar']>;
  allFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  recentFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  isCertified?: InputMaybe<Scalars['StringScalar']>;
  certificationStartDate?: InputMaybe<Scalars['StringScalar']>;
  certificationEndDate?: InputMaybe<Scalars['StringScalar']>;
  streetLineTwo?: InputMaybe<Scalars['StringScalar']>;
  hashtagField?: InputMaybe<Scalars['StringScalar']>;
  fullName?: InputMaybe<Scalars['StringScalar']>;
  gender?: InputMaybe<Scalars['StringScalar']>;
  personIds?: InputMaybe<Scalars['StringScalar']>;
  personID?: InputMaybe<Scalars['StringScalar']>;
  personId?: InputMaybe<Scalars['StringScalar']>;
  hasCanadianEmail?: InputMaybe<Scalars['StringScalar']>;
  companyLocationIds?: InputMaybe<Scalars['StringScalar']>;
  emailAddress?: InputMaybe<Scalars['StringScalar']>;
  firstName?: InputMaybe<Scalars['StringScalar']>;
  lastName?: InputMaybe<Scalars['StringScalar']>;
  middleInitial?: InputMaybe<Scalars['StringScalar']>;
  excludedPersonTitle?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  titleCertification?: InputMaybe<Scalars['StringScalar']>;
  personTitle?: InputMaybe<Scalars['StringScalar']>;
  titleSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleSeniority?: InputMaybe<Scalars['StringScalar']>;
  degree?: InputMaybe<Scalars['StringScalar']>;
  school?: InputMaybe<Scalars['StringScalar']>;
  companyDomainName?: InputMaybe<Scalars['StringScalar']>;
  companyPastOrPresent?: InputMaybe<Scalars['StringScalar']>;
  validDateMonthDist?: InputMaybe<Scalars['StringScalar']>;
  contactRequirements?: InputMaybe<Scalars['StringScalar']>;
  zoomJoinsAccount?: InputMaybe<ZoomJoinsAccount>;
  orgJoinsAccount?: InputMaybe<OrgJoinsAccount>;
  titleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeNoCompany?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeOrgExportedCompanies?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgExportedContacts?: InputMaybe<Scalars['StringScalar']>;
  excludeCompanyTags?: InputMaybe<Scalars['StringScalar']>;
  personWebReferences?: InputMaybe<Scalars['StringScalar']>;
  personWebReferencesURL?: InputMaybe<Scalars['StringScalar']>;
  departments?: InputMaybe<Scalars['StringScalar']>;
  jobFunctions?: InputMaybe<Scalars['StringScalar']>;
  isEU?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMin?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMax?: InputMaybe<Scalars['StringScalar']>;
  hasLocationId?: InputMaybe<Scalars['StringScalar']>;
  hasPersonalEmail?: InputMaybe<Scalars['StringScalar']>;
  hasMobilePhone?: InputMaybe<Scalars['StringScalar']>;
  hasEmail?: InputMaybe<Scalars['StringScalar']>;
  hasPhone?: InputMaybe<Scalars['StringScalar']>;
  hasDirectPhone?: InputMaybe<Scalars['StringScalar']>;
  hasCompanyPhone?: InputMaybe<Scalars['StringScalar']>;
  hasTitle?: InputMaybe<Scalars['StringScalar']>;
  hasBeenNotified?: InputMaybe<Scalars['StringScalar']>;
  hasDepartment?: InputMaybe<Scalars['StringScalar']>;
  hasJobFunction?: InputMaybe<Scalars['StringScalar']>;
  hasSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgChartTier?: InputMaybe<Scalars['StringScalar']>;
  orgChartTier?: InputMaybe<Scalars['StringScalar']>;
  personCreationStartDate?: InputMaybe<Scalars['StringScalar']>;
  positionStartDate?: InputMaybe<Scalars['StringScalar']>;
  personCreationEndDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedStartDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedEndDate?: InputMaybe<Scalars['StringScalar']>;
  executivesOnly?: InputMaybe<Scalars['StringScalar']>;
  returnOnlyBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  excludeBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  page?: InputMaybe<Scalars['Float']>;
  rpp?: InputMaybe<Scalars['StringScalar']>;
  facetOptions?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  techAttributeTagNotUsedAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  findRecommendedContacts?: InputMaybe<Scalars['StringScalar']>;
  sortBy?: InputMaybe<Scalars['StringScalar']>;
  sortOrder?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompanies?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesPage?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesRpp?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesSortBy?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesContacts?: InputMaybe<Scalars['StringScalar']>;
  solrPseudoOutputFields?: InputMaybe<Scalars['StringScalar']>;
  scoopEndDate?: InputMaybe<Scalars['StringScalar']>;
  scoopStartDate?: InputMaybe<Scalars['StringScalar']>;
  updatedSinceCreation?: InputMaybe<Scalars['StringScalar']>;
  scoopTypes?: InputMaybe<Scalars['StringScalar']>;
  scoopTopics?: InputMaybe<Scalars['StringScalar']>;
  scoopDepartments?: InputMaybe<Scalars['StringScalar']>;
  scoopDesc?: InputMaybe<Scalars['StringScalar']>;
  scoopIds?: InputMaybe<Scalars['StringScalar']>;
  doziIndustry?: InputMaybe<Scalars['StringScalar']>;
  scoringOptions?: InputMaybe<Scalars['StringScalar']>;
  masked?: InputMaybe<Scalars['Boolean']>;
  subscribed?: InputMaybe<Scalars['Boolean']>;
  orgImported?: InputMaybe<Scalars['Boolean']>;
  sessionToken?: InputMaybe<Scalars['StringScalar']>;
  definedUniverse?: InputMaybe<Scalars['StringScalar']>;
  outputFieldOptions?: InputMaybe<Scalars['StringScalar']>;
  ignoreDefaultFields?: InputMaybe<Scalars['StringScalar']>;
  includeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPersonOnlyMe?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedContacts?: InputMaybe<Scalars['Boolean']>;
  excludeDefunctCompanies?: InputMaybe<Scalars['Boolean']>;
  pTag?: InputMaybe<Scalars['StringScalar']>;
  cTag?: InputMaybe<Scalars['StringScalar']>;
  excludePeopleTags?: InputMaybe<Scalars['StringScalar']>;
  includeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAssociatedDeals?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeAllOrgImportLeads?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOptout?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  excludeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  orgImportOpportunities?: InputMaybe<Array<OrgImportOpportunities>>;
  includeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
};


export type QueryorgchartsSearchArgs = {
  companyId?: InputMaybe<Scalars['String']>;
  departments?: InputMaybe<Scalars['String']>;
  isExecutiveContactOrgChart?: InputMaybe<Scalars['Boolean']>;
  isTierLevelOne?: InputMaybe<Scalars['Boolean']>;
  jobFunctionId?: InputMaybe<Scalars['String']>;
  employees?: InputMaybe<Scalars['Float']>;
  fullName?: InputMaybe<Scalars['String']>;
  personTitle?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Float']>;
  highestTier?: InputMaybe<Scalars['Float']>;
  jobFunctions?: InputMaybe<Scalars['String']>;
};


export type QuerycompanyHierarchySearchArgs = {
  companyIds?: InputMaybe<Scalars['String']>;
};


export type QueryfacetsArgs = {
  companyId?: InputMaybe<Scalars['String']>;
  facets?: InputMaybe<Scalars['String']>;
  subUnitType?: InputMaybe<Scalars['String']>;
  additionalOptions?: InputMaybe<LocationAdditionalOptions>;
  limits?: InputMaybe<Scalars['Float']>;
  fetchTechAddDropOptions?: InputMaybe<Scalars['Boolean']>;
  showUnmaskedContacts?: InputMaybe<Scalars['Boolean']>;
  packageName?: InputMaybe<Scalars['String']>;
  defaultSearchParams?: InputMaybe<DefaultSearchParams>;
  companyID?: InputMaybe<Scalars['String']>;
};


export type QuerysuggestionsArgs = {
  rpp?: InputMaybe<Scalars['Float']>;
};


export type QueryquickSearchArgs = {
  rpp?: InputMaybe<Scalars['Float']>;
  quickSearch?: InputMaybe<Scalars['String']>;
};


export type QuerycompanyDetailsArgs = {
  companyID?: InputMaybe<Scalars['String']>;
  fetchTechAddDropOptions?: InputMaybe<Scalars['Boolean']>;
  showUnmaskedContacts?: InputMaybe<Scalars['Boolean']>;
  defaultSearchParams?: InputMaybe<DefaultSearchParams>;
  packageName?: InputMaybe<Scalars['String']>;
  buyingCommittee?: InputMaybe<Scalars['String']>;
  companyPastOrPresent?: InputMaybe<Scalars['StringScalar']>;
  contactRequirements?: InputMaybe<Scalars['StringScalar']>;
  doziIndustry?: InputMaybe<Scalars['StringScalar']>;
  excludeDefunctCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeNoCompany?: InputMaybe<Scalars['StringScalar']>;
  isCertified?: InputMaybe<Scalars['StringScalar']>;
  sortBy?: InputMaybe<Scalars['StringScalar']>;
  sortOrder?: InputMaybe<Scalars['StringScalar']>;
  nnNegation?: InputMaybe<Scalars['StringScalar']>;
  nnQueryId?: InputMaybe<Scalars['StringScalar']>;
  nnStartDate?: InputMaybe<Scalars['StringScalar']>;
  nnEndDate?: InputMaybe<Scalars['StringScalar']>;
  companyId?: InputMaybe<Scalars['StringScalar']>;
  companyIds?: InputMaybe<Scalars['StringScalar']>;
  revenueMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  revenueMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMax?: InputMaybe<Scalars['StringScalar']>;
  techAttributesAddedDropped?: InputMaybe<TechAttributesAddedDropped>;
  techAttributeNotUsedAnd?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMin?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMax?: InputMaybe<Scalars['StringScalar']>;
  locationCountMin?: InputMaybe<Scalars['StringScalar']>;
  locationCountMax?: InputMaybe<Scalars['StringScalar']>;
  metroAreas?: InputMaybe<Scalars['StringScalar']>;
  doziPrimaryIndustry?: InputMaybe<Scalars['StringScalar']>;
  hqLocationAreaCodes?: InputMaybe<Scalars['StringScalar']>;
  departmentEmployeeCounts?: InputMaybe<DepartmentEmployeeCounts>;
  departmentBudgets?: InputMaybe<DepartmentBudgets>;
  street?: InputMaybe<Scalars['StringScalar']>;
  locationType?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  negateScope?: InputMaybe<Scalars['Boolean']>;
  itBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  itBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  anyFundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  anyFundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  fundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  anyFundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  allInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  recentInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  state?: InputMaybe<Scalars['StringScalar']>;
  metroRegion?: InputMaybe<Scalars['StringScalar']>;
  country?: InputMaybe<Scalars['StringScalar']>;
  continent?: InputMaybe<Scalars['StringScalar']>;
  companyType?: InputMaybe<Scalars['StringScalar']>;
  companyName?: InputMaybe<Scalars['StringScalar']>;
  companyDomainNames?: InputMaybe<Scalars['StringScalar']>;
  companyDesc?: InputMaybe<Scalars['StringScalar']>;
  isPublic?: InputMaybe<Scalars['StringScalar']>;
  location?: InputMaybe<Scalars['StringScalar']>;
  zipCode?: InputMaybe<Scalars['StringScalar']>;
  radiusMiles?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTag?: InputMaybe<Scalars['StringScalar']>;
  industryKeywordsMulti?: InputMaybe<Scalars['StringScalar']>;
  primaryIndustriesOnly?: InputMaybe<Scalars['StringScalar']>;
  industryClassification?: InputMaybe<Scalars['StringScalar']>;
  industryKeywords?: InputMaybe<Scalars['StringScalar']>;
  industryCodeList?: InputMaybe<Scalars['StringScalar']>;
  industryCode?: InputMaybe<Scalars['StringScalar']>;
  industryCodeAnd?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  revenueClassification?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassification?: InputMaybe<Scalars['StringScalar']>;
  companyRanking?: InputMaybe<Scalars['StringScalar']>;
  pubPrivateSectors?: InputMaybe<Scalars['StringScalar']>;
  locationSearchType?: InputMaybe<Scalars['StringScalar']>;
  fundingMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  fundingMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAnd?: InputMaybe<Scalars['StringScalar']>;
  allInvestors?: InputMaybe<Scalars['StringScalar']>;
  recentInvestors?: InputMaybe<Scalars['StringScalar']>;
  allFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  recentFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  certificationStartDate?: InputMaybe<Scalars['StringScalar']>;
  certificationEndDate?: InputMaybe<Scalars['StringScalar']>;
  streetLineTwo?: InputMaybe<Scalars['StringScalar']>;
  hashtagField?: InputMaybe<Scalars['StringScalar']>;
  fullName?: InputMaybe<Scalars['StringScalar']>;
  gender?: InputMaybe<Scalars['StringScalar']>;
  personIds?: InputMaybe<Scalars['StringScalar']>;
  personID?: InputMaybe<Scalars['StringScalar']>;
  personId?: InputMaybe<Scalars['StringScalar']>;
  hasCanadianEmail?: InputMaybe<Scalars['StringScalar']>;
  companyLocationIds?: InputMaybe<Scalars['StringScalar']>;
  emailAddress?: InputMaybe<Scalars['StringScalar']>;
  firstName?: InputMaybe<Scalars['StringScalar']>;
  lastName?: InputMaybe<Scalars['StringScalar']>;
  middleInitial?: InputMaybe<Scalars['StringScalar']>;
  excludedPersonTitle?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  titleCertification?: InputMaybe<Scalars['StringScalar']>;
  personTitle?: InputMaybe<Scalars['StringScalar']>;
  titleSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleSeniority?: InputMaybe<Scalars['StringScalar']>;
  degree?: InputMaybe<Scalars['StringScalar']>;
  school?: InputMaybe<Scalars['StringScalar']>;
  companyDomainName?: InputMaybe<Scalars['StringScalar']>;
  validDateMonthDist?: InputMaybe<Scalars['StringScalar']>;
  zoomJoinsAccount?: InputMaybe<ZoomJoinsAccount>;
  orgJoinsAccount?: InputMaybe<OrgJoinsAccount>;
  titleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeOrgExportedCompanies?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgExportedContacts?: InputMaybe<Scalars['StringScalar']>;
  excludeCompanyTags?: InputMaybe<Scalars['StringScalar']>;
  personWebReferences?: InputMaybe<Scalars['StringScalar']>;
  personWebReferencesURL?: InputMaybe<Scalars['StringScalar']>;
  departments?: InputMaybe<Scalars['StringScalar']>;
  jobFunctions?: InputMaybe<Scalars['StringScalar']>;
  isEU?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMin?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMax?: InputMaybe<Scalars['StringScalar']>;
  hasLocationId?: InputMaybe<Scalars['StringScalar']>;
  hasPersonalEmail?: InputMaybe<Scalars['StringScalar']>;
  hasMobilePhone?: InputMaybe<Scalars['StringScalar']>;
  hasEmail?: InputMaybe<Scalars['StringScalar']>;
  hasPhone?: InputMaybe<Scalars['StringScalar']>;
  hasDirectPhone?: InputMaybe<Scalars['StringScalar']>;
  hasCompanyPhone?: InputMaybe<Scalars['StringScalar']>;
  hasTitle?: InputMaybe<Scalars['StringScalar']>;
  hasBeenNotified?: InputMaybe<Scalars['StringScalar']>;
  hasDepartment?: InputMaybe<Scalars['StringScalar']>;
  hasJobFunction?: InputMaybe<Scalars['StringScalar']>;
  hasSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgChartTier?: InputMaybe<Scalars['StringScalar']>;
  orgChartTier?: InputMaybe<Scalars['StringScalar']>;
  personCreationStartDate?: InputMaybe<Scalars['StringScalar']>;
  positionStartDate?: InputMaybe<Scalars['StringScalar']>;
  personCreationEndDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedStartDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedEndDate?: InputMaybe<Scalars['StringScalar']>;
  executivesOnly?: InputMaybe<Scalars['StringScalar']>;
  returnOnlyBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  excludeBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  page?: InputMaybe<Scalars['Float']>;
  rpp?: InputMaybe<Scalars['StringScalar']>;
  facetOptions?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  techAttributeTagNotUsedAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  findRecommendedContacts?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompanies?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesPage?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesRpp?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesSortBy?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesContacts?: InputMaybe<Scalars['StringScalar']>;
  solrPseudoOutputFields?: InputMaybe<Scalars['StringScalar']>;
  scoopEndDate?: InputMaybe<Scalars['StringScalar']>;
  scoopStartDate?: InputMaybe<Scalars['StringScalar']>;
  updatedSinceCreation?: InputMaybe<Scalars['StringScalar']>;
  scoopTypes?: InputMaybe<Scalars['StringScalar']>;
  scoopTopics?: InputMaybe<Scalars['StringScalar']>;
  scoopDepartments?: InputMaybe<Scalars['StringScalar']>;
  scoopDesc?: InputMaybe<Scalars['StringScalar']>;
  scoopIds?: InputMaybe<Scalars['StringScalar']>;
  scoringOptions?: InputMaybe<Scalars['StringScalar']>;
  masked?: InputMaybe<Scalars['Boolean']>;
  subscribed?: InputMaybe<Scalars['Boolean']>;
  orgImported?: InputMaybe<Scalars['Boolean']>;
  sessionToken?: InputMaybe<Scalars['StringScalar']>;
  definedUniverse?: InputMaybe<Scalars['StringScalar']>;
  outputFieldOptions?: InputMaybe<Scalars['StringScalar']>;
  ignoreDefaultFields?: InputMaybe<Scalars['StringScalar']>;
  includeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPersonOnlyMe?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedContacts?: InputMaybe<Scalars['Boolean']>;
  pTag?: InputMaybe<Scalars['StringScalar']>;
  cTag?: InputMaybe<Scalars['StringScalar']>;
  excludePeopleTags?: InputMaybe<Scalars['StringScalar']>;
  includeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAssociatedDeals?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeAllOrgImportLeads?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOptout?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  excludeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  orgImportOpportunities?: InputMaybe<Array<OrgImportOpportunities>>;
  includeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  parsingOptions?: InputMaybe<ParsingOptions>;
  source?: InputMaybe<Scalars['String']>;
  addressVerificationStatusList?: InputMaybe<Scalars['String']>;
  parentId?: InputMaybe<Scalars['String']>;
  ultimateParentId?: InputMaybe<Scalars['String']>;
  subUnitType?: InputMaybe<Scalars['String']>;
  isLocationHierarchy?: InputMaybe<Scalars['Boolean']>;
};


export type QuerycompanySearchArgs = {
  parsingOptions?: InputMaybe<ParsingOptions>;
  source?: InputMaybe<Scalars['String']>;
  addressVerificationStatusList?: InputMaybe<Scalars['String']>;
  parentId?: InputMaybe<Scalars['String']>;
  ultimateParentId?: InputMaybe<Scalars['String']>;
  subUnitType?: InputMaybe<Scalars['String']>;
  isLocationHierarchy?: InputMaybe<Scalars['Boolean']>;
  companyID?: InputMaybe<Scalars['String']>;
  fetchTechAddDropOptions?: InputMaybe<Scalars['Boolean']>;
  showUnmaskedContacts?: InputMaybe<Scalars['Boolean']>;
  defaultSearchParams?: InputMaybe<DefaultSearchParams>;
  packageName?: InputMaybe<Scalars['String']>;
  buyingCommittee?: InputMaybe<Scalars['String']>;
  companyPastOrPresent?: InputMaybe<Scalars['StringScalar']>;
  contactRequirements?: InputMaybe<Scalars['StringScalar']>;
  doziIndustry?: InputMaybe<Scalars['StringScalar']>;
  excludeDefunctCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeNoCompany?: InputMaybe<Scalars['StringScalar']>;
  isCertified?: InputMaybe<Scalars['StringScalar']>;
  sortBy?: InputMaybe<Scalars['StringScalar']>;
  sortOrder?: InputMaybe<Scalars['StringScalar']>;
  nnNegation?: InputMaybe<Scalars['StringScalar']>;
  nnQueryId?: InputMaybe<Scalars['StringScalar']>;
  nnStartDate?: InputMaybe<Scalars['StringScalar']>;
  nnEndDate?: InputMaybe<Scalars['StringScalar']>;
  companyId?: InputMaybe<Scalars['StringScalar']>;
  companyIds?: InputMaybe<Scalars['StringScalar']>;
  revenueMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  revenueMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMax?: InputMaybe<Scalars['StringScalar']>;
  techAttributesAddedDropped?: InputMaybe<TechAttributesAddedDropped>;
  techAttributeNotUsedAnd?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMin?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMax?: InputMaybe<Scalars['StringScalar']>;
  locationCountMin?: InputMaybe<Scalars['StringScalar']>;
  locationCountMax?: InputMaybe<Scalars['StringScalar']>;
  metroAreas?: InputMaybe<Scalars['StringScalar']>;
  doziPrimaryIndustry?: InputMaybe<Scalars['StringScalar']>;
  hqLocationAreaCodes?: InputMaybe<Scalars['StringScalar']>;
  departmentEmployeeCounts?: InputMaybe<DepartmentEmployeeCounts>;
  departmentBudgets?: InputMaybe<DepartmentBudgets>;
  street?: InputMaybe<Scalars['StringScalar']>;
  locationType?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  negateScope?: InputMaybe<Scalars['Boolean']>;
  itBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  itBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  anyFundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  anyFundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  fundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  anyFundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  allInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  recentInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  state?: InputMaybe<Scalars['StringScalar']>;
  metroRegion?: InputMaybe<Scalars['StringScalar']>;
  country?: InputMaybe<Scalars['StringScalar']>;
  continent?: InputMaybe<Scalars['StringScalar']>;
  companyType?: InputMaybe<Scalars['StringScalar']>;
  companyName?: InputMaybe<Scalars['StringScalar']>;
  companyDomainNames?: InputMaybe<Scalars['StringScalar']>;
  companyDesc?: InputMaybe<Scalars['StringScalar']>;
  isPublic?: InputMaybe<Scalars['StringScalar']>;
  location?: InputMaybe<Scalars['StringScalar']>;
  zipCode?: InputMaybe<Scalars['StringScalar']>;
  radiusMiles?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTag?: InputMaybe<Scalars['StringScalar']>;
  industryKeywordsMulti?: InputMaybe<Scalars['StringScalar']>;
  primaryIndustriesOnly?: InputMaybe<Scalars['StringScalar']>;
  industryClassification?: InputMaybe<Scalars['StringScalar']>;
  industryKeywords?: InputMaybe<Scalars['StringScalar']>;
  industryCodeList?: InputMaybe<Scalars['StringScalar']>;
  industryCode?: InputMaybe<Scalars['StringScalar']>;
  industryCodeAnd?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  revenueClassification?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassification?: InputMaybe<Scalars['StringScalar']>;
  companyRanking?: InputMaybe<Scalars['StringScalar']>;
  pubPrivateSectors?: InputMaybe<Scalars['StringScalar']>;
  locationSearchType?: InputMaybe<Scalars['StringScalar']>;
  fundingMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  fundingMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAnd?: InputMaybe<Scalars['StringScalar']>;
  allInvestors?: InputMaybe<Scalars['StringScalar']>;
  recentInvestors?: InputMaybe<Scalars['StringScalar']>;
  allFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  recentFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  certificationStartDate?: InputMaybe<Scalars['StringScalar']>;
  certificationEndDate?: InputMaybe<Scalars['StringScalar']>;
  streetLineTwo?: InputMaybe<Scalars['StringScalar']>;
  hashtagField?: InputMaybe<Scalars['StringScalar']>;
  fullName?: InputMaybe<Scalars['StringScalar']>;
  gender?: InputMaybe<Scalars['StringScalar']>;
  personIds?: InputMaybe<Scalars['StringScalar']>;
  personID?: InputMaybe<Scalars['StringScalar']>;
  personId?: InputMaybe<Scalars['StringScalar']>;
  hasCanadianEmail?: InputMaybe<Scalars['StringScalar']>;
  companyLocationIds?: InputMaybe<Scalars['StringScalar']>;
  emailAddress?: InputMaybe<Scalars['StringScalar']>;
  firstName?: InputMaybe<Scalars['StringScalar']>;
  lastName?: InputMaybe<Scalars['StringScalar']>;
  middleInitial?: InputMaybe<Scalars['StringScalar']>;
  excludedPersonTitle?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  titleCertification?: InputMaybe<Scalars['StringScalar']>;
  personTitle?: InputMaybe<Scalars['StringScalar']>;
  titleSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleSeniority?: InputMaybe<Scalars['StringScalar']>;
  degree?: InputMaybe<Scalars['StringScalar']>;
  school?: InputMaybe<Scalars['StringScalar']>;
  companyDomainName?: InputMaybe<Scalars['StringScalar']>;
  validDateMonthDist?: InputMaybe<Scalars['StringScalar']>;
  zoomJoinsAccount?: InputMaybe<ZoomJoinsAccount>;
  orgJoinsAccount?: InputMaybe<OrgJoinsAccount>;
  titleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeOrgExportedCompanies?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgExportedContacts?: InputMaybe<Scalars['StringScalar']>;
  excludeCompanyTags?: InputMaybe<Scalars['StringScalar']>;
  personWebReferences?: InputMaybe<Scalars['StringScalar']>;
  personWebReferencesURL?: InputMaybe<Scalars['StringScalar']>;
  departments?: InputMaybe<Scalars['StringScalar']>;
  jobFunctions?: InputMaybe<Scalars['StringScalar']>;
  isEU?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMin?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMax?: InputMaybe<Scalars['StringScalar']>;
  hasLocationId?: InputMaybe<Scalars['StringScalar']>;
  hasPersonalEmail?: InputMaybe<Scalars['StringScalar']>;
  hasMobilePhone?: InputMaybe<Scalars['StringScalar']>;
  hasEmail?: InputMaybe<Scalars['StringScalar']>;
  hasPhone?: InputMaybe<Scalars['StringScalar']>;
  hasDirectPhone?: InputMaybe<Scalars['StringScalar']>;
  hasCompanyPhone?: InputMaybe<Scalars['StringScalar']>;
  hasTitle?: InputMaybe<Scalars['StringScalar']>;
  hasBeenNotified?: InputMaybe<Scalars['StringScalar']>;
  hasDepartment?: InputMaybe<Scalars['StringScalar']>;
  hasJobFunction?: InputMaybe<Scalars['StringScalar']>;
  hasSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgChartTier?: InputMaybe<Scalars['StringScalar']>;
  orgChartTier?: InputMaybe<Scalars['StringScalar']>;
  personCreationStartDate?: InputMaybe<Scalars['StringScalar']>;
  positionStartDate?: InputMaybe<Scalars['StringScalar']>;
  personCreationEndDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedStartDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedEndDate?: InputMaybe<Scalars['StringScalar']>;
  executivesOnly?: InputMaybe<Scalars['StringScalar']>;
  returnOnlyBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  excludeBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  page?: InputMaybe<Scalars['Float']>;
  rpp?: InputMaybe<Scalars['StringScalar']>;
  facetOptions?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  techAttributeTagNotUsedAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  findRecommendedContacts?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompanies?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesPage?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesRpp?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesSortBy?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesContacts?: InputMaybe<Scalars['StringScalar']>;
  solrPseudoOutputFields?: InputMaybe<Scalars['StringScalar']>;
  scoopEndDate?: InputMaybe<Scalars['StringScalar']>;
  scoopStartDate?: InputMaybe<Scalars['StringScalar']>;
  updatedSinceCreation?: InputMaybe<Scalars['StringScalar']>;
  scoopTypes?: InputMaybe<Scalars['StringScalar']>;
  scoopTopics?: InputMaybe<Scalars['StringScalar']>;
  scoopDepartments?: InputMaybe<Scalars['StringScalar']>;
  scoopDesc?: InputMaybe<Scalars['StringScalar']>;
  scoopIds?: InputMaybe<Scalars['StringScalar']>;
  scoringOptions?: InputMaybe<Scalars['StringScalar']>;
  masked?: InputMaybe<Scalars['Boolean']>;
  subscribed?: InputMaybe<Scalars['Boolean']>;
  orgImported?: InputMaybe<Scalars['Boolean']>;
  sessionToken?: InputMaybe<Scalars['StringScalar']>;
  definedUniverse?: InputMaybe<Scalars['StringScalar']>;
  outputFieldOptions?: InputMaybe<Scalars['StringScalar']>;
  ignoreDefaultFields?: InputMaybe<Scalars['StringScalar']>;
  includeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPersonOnlyMe?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedContacts?: InputMaybe<Scalars['Boolean']>;
  pTag?: InputMaybe<Scalars['StringScalar']>;
  cTag?: InputMaybe<Scalars['StringScalar']>;
  excludePeopleTags?: InputMaybe<Scalars['StringScalar']>;
  includeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAssociatedDeals?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeAllOrgImportLeads?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOptout?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  excludeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  orgImportOpportunities?: InputMaybe<Array<OrgImportOpportunities>>;
  includeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  searchFacadeParams?: InputMaybe<CompanyArgs>;
};

export type CompanyArgs = {
  nnNegation?: InputMaybe<Scalars['StringScalar']>;
  nnQueryId?: InputMaybe<Scalars['StringScalar']>;
  nnStartDate?: InputMaybe<Scalars['StringScalar']>;
  nnEndDate?: InputMaybe<Scalars['StringScalar']>;
  companyId?: InputMaybe<Scalars['StringScalar']>;
  companyIds?: InputMaybe<Scalars['StringScalar']>;
  revenueMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  revenueMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeMax?: InputMaybe<Scalars['StringScalar']>;
  techAttributesAddedDropped?: InputMaybe<TechAttributesAddedDropped>;
  techAttributeNotUsedAnd?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMin?: InputMaybe<Scalars['StringScalar']>;
  alexaRankMax?: InputMaybe<Scalars['StringScalar']>;
  locationCountMin?: InputMaybe<Scalars['StringScalar']>;
  locationCountMax?: InputMaybe<Scalars['StringScalar']>;
  metroAreas?: InputMaybe<Scalars['StringScalar']>;
  doziPrimaryIndustry?: InputMaybe<Scalars['StringScalar']>;
  hqLocationAreaCodes?: InputMaybe<Scalars['StringScalar']>;
  departmentEmployeeCounts?: InputMaybe<DepartmentEmployeeCounts>;
  departmentBudgets?: InputMaybe<DepartmentBudgets>;
  street?: InputMaybe<Scalars['StringScalar']>;
  locationType?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  oneYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMin?: InputMaybe<Scalars['StringScalar']>;
  twoYearEmployeeGrowthRateMax?: InputMaybe<Scalars['StringScalar']>;
  negateScope?: InputMaybe<Scalars['Boolean']>;
  itBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  itBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  hrBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  marketingBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMin?: InputMaybe<Scalars['StringScalar']>;
  financeBudgetMax?: InputMaybe<Scalars['StringScalar']>;
  anyFundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  anyFundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingStartDate?: InputMaybe<Scalars['StringScalar']>;
  fundingEndDate?: InputMaybe<Scalars['StringScalar']>;
  fundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  anyFundingDaysInPast?: InputMaybe<Scalars['StringScalar']>;
  allInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  recentInvestorIds?: InputMaybe<Scalars['StringScalar']>;
  state?: InputMaybe<Scalars['StringScalar']>;
  metroRegion?: InputMaybe<Scalars['StringScalar']>;
  country?: InputMaybe<Scalars['StringScalar']>;
  continent?: InputMaybe<Scalars['StringScalar']>;
  companyType?: InputMaybe<Scalars['StringScalar']>;
  companyName?: InputMaybe<Scalars['StringScalar']>;
  companyDomainNames?: InputMaybe<Scalars['StringScalar']>;
  companyDesc?: InputMaybe<Scalars['StringScalar']>;
  isPublic?: InputMaybe<Scalars['StringScalar']>;
  location?: InputMaybe<Scalars['StringScalar']>;
  zipCode?: InputMaybe<Scalars['StringScalar']>;
  radiusMiles?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTag?: InputMaybe<Scalars['StringScalar']>;
  industryKeywordsMulti?: InputMaybe<Scalars['StringScalar']>;
  primaryIndustriesOnly?: InputMaybe<Scalars['StringScalar']>;
  industryClassification?: InputMaybe<Scalars['StringScalar']>;
  industryKeywords?: InputMaybe<Scalars['StringScalar']>;
  industryCodeList?: InputMaybe<Scalars['StringScalar']>;
  industryCode?: InputMaybe<Scalars['StringScalar']>;
  industryCodeAnd?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  revenueClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  revenueClassification?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMin?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassificationMax?: InputMaybe<Scalars['StringScalar']>;
  employeeSizeClassification?: InputMaybe<Scalars['StringScalar']>;
  companyRanking?: InputMaybe<Scalars['StringScalar']>;
  pubPrivateSectors?: InputMaybe<Scalars['StringScalar']>;
  locationSearchType?: InputMaybe<Scalars['StringScalar']>;
  fundingMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  fundingMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAnd?: InputMaybe<Scalars['StringScalar']>;
  allInvestors?: InputMaybe<Scalars['StringScalar']>;
  recentInvestors?: InputMaybe<Scalars['StringScalar']>;
  allFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  recentFundingTypes?: InputMaybe<Scalars['StringScalar']>;
  isCertified?: InputMaybe<Scalars['String']>;
  certificationStartDate?: InputMaybe<Scalars['StringScalar']>;
  certificationEndDate?: InputMaybe<Scalars['StringScalar']>;
  streetLineTwo?: InputMaybe<Scalars['StringScalar']>;
  hashtagField?: InputMaybe<Scalars['StringScalar']>;
  fullName?: InputMaybe<Scalars['StringScalar']>;
  gender?: InputMaybe<Scalars['StringScalar']>;
  personIds?: InputMaybe<Scalars['StringScalar']>;
  personID?: InputMaybe<Scalars['StringScalar']>;
  personId?: InputMaybe<Scalars['StringScalar']>;
  hasCanadianEmail?: InputMaybe<Scalars['StringScalar']>;
  companyLocationIds?: InputMaybe<Scalars['StringScalar']>;
  emailAddress?: InputMaybe<Scalars['StringScalar']>;
  firstName?: InputMaybe<Scalars['StringScalar']>;
  lastName?: InputMaybe<Scalars['StringScalar']>;
  middleInitial?: InputMaybe<Scalars['StringScalar']>;
  excludedPersonTitle?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMinIn000s?: InputMaybe<Scalars['StringScalar']>;
  totalFundingAmountMaxIn000s?: InputMaybe<Scalars['StringScalar']>;
  titleCertification?: InputMaybe<Scalars['StringScalar']>;
  personTitle?: InputMaybe<Scalars['StringScalar']>;
  titleSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleSeniority?: InputMaybe<Scalars['StringScalar']>;
  degree?: InputMaybe<Scalars['StringScalar']>;
  school?: InputMaybe<Scalars['StringScalar']>;
  companyDomainName?: InputMaybe<Scalars['StringScalar']>;
  companyPastOrPresent?: InputMaybe<Scalars['String']>;
  validDateMonthDist?: InputMaybe<Scalars['StringScalar']>;
  contactRequirements?: InputMaybe<Scalars['String']>;
  zoomJoinsAccount?: InputMaybe<ZoomJoinsAccount>;
  orgJoinsAccount?: InputMaybe<OrgJoinsAccount>;
  titleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeTitleClassification?: InputMaybe<Scalars['StringScalar']>;
  excludeNoCompany?: InputMaybe<Scalars['String']>;
  excludeExportedCompanies?: InputMaybe<Scalars['Boolean']>;
  excludeOrgExportedCompanies?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgExportedContacts?: InputMaybe<Scalars['StringScalar']>;
  excludeCompanyTags?: InputMaybe<Scalars['StringScalar']>;
  personWebReferences?: InputMaybe<Scalars['StringScalar']>;
  personWebReferencesURL?: InputMaybe<Scalars['StringScalar']>;
  departments?: InputMaybe<Scalars['StringScalar']>;
  jobFunctions?: InputMaybe<Scalars['StringScalar']>;
  isEU?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMin?: InputMaybe<Scalars['StringScalar']>;
  confidenceScoreMax?: InputMaybe<Scalars['StringScalar']>;
  hasLocationId?: InputMaybe<Scalars['StringScalar']>;
  hasPersonalEmail?: InputMaybe<Scalars['StringScalar']>;
  hasMobilePhone?: InputMaybe<Scalars['StringScalar']>;
  hasEmail?: InputMaybe<Scalars['StringScalar']>;
  hasPhone?: InputMaybe<Scalars['StringScalar']>;
  hasDirectPhone?: InputMaybe<Scalars['StringScalar']>;
  hasCompanyPhone?: InputMaybe<Scalars['StringScalar']>;
  hasTitle?: InputMaybe<Scalars['StringScalar']>;
  hasBeenNotified?: InputMaybe<Scalars['StringScalar']>;
  hasDepartment?: InputMaybe<Scalars['StringScalar']>;
  hasJobFunction?: InputMaybe<Scalars['StringScalar']>;
  hasSeniority?: InputMaybe<Scalars['StringScalar']>;
  excludeOrgChartTier?: InputMaybe<Scalars['StringScalar']>;
  orgChartTier?: InputMaybe<Scalars['StringScalar']>;
  personCreationStartDate?: InputMaybe<Scalars['StringScalar']>;
  positionStartDate?: InputMaybe<Scalars['StringScalar']>;
  personCreationEndDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedStartDate?: InputMaybe<Scalars['StringScalar']>;
  personModifiedEndDate?: InputMaybe<Scalars['StringScalar']>;
  executivesOnly?: InputMaybe<Scalars['StringScalar']>;
  returnOnlyBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  excludeBoardMembers?: InputMaybe<Scalars['StringScalar']>;
  page?: InputMaybe<Scalars['Float']>;
  rpp?: InputMaybe<Scalars['StringScalar']>;
  facetOptions?: InputMaybe<Scalars['StringScalar']>;
  techAttributeTagAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  techAttributeTagNotUsedAndOrList?: InputMaybe<Array<Scalars['StringScalar']>>;
  findRecommendedContacts?: InputMaybe<Scalars['StringScalar']>;
  sortBy?: InputMaybe<Scalars['String']>;
  sortOrder?: InputMaybe<Scalars['String']>;
  uniqueCompanies?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesPage?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesRpp?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesSortBy?: InputMaybe<Scalars['StringScalar']>;
  uniqueCompaniesContacts?: InputMaybe<Scalars['StringScalar']>;
  solrPseudoOutputFields?: InputMaybe<Scalars['StringScalar']>;
  scoopEndDate?: InputMaybe<Scalars['StringScalar']>;
  scoopStartDate?: InputMaybe<Scalars['StringScalar']>;
  updatedSinceCreation?: InputMaybe<Scalars['StringScalar']>;
  scoopTypes?: InputMaybe<Scalars['StringScalar']>;
  scoopTopics?: InputMaybe<Scalars['StringScalar']>;
  scoopDepartments?: InputMaybe<Scalars['StringScalar']>;
  scoopDesc?: InputMaybe<Scalars['StringScalar']>;
  scoopIds?: InputMaybe<Scalars['StringScalar']>;
  doziIndustry?: InputMaybe<Scalars['String']>;
  scoringOptions?: InputMaybe<Scalars['StringScalar']>;
  masked?: InputMaybe<Scalars['Boolean']>;
  subscribed?: InputMaybe<Scalars['Boolean']>;
  orgImported?: InputMaybe<Scalars['Boolean']>;
  sessionToken?: InputMaybe<Scalars['StringScalar']>;
  definedUniverse?: InputMaybe<Scalars['StringScalar']>;
  outputFieldOptions?: InputMaybe<Scalars['StringScalar']>;
  ignoreDefaultFields?: InputMaybe<Scalars['StringScalar']>;
  includeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPersonOnlyMe?: InputMaybe<Scalars['StringScalar']>;
  excludeInboxAIPerson?: InputMaybe<Scalars['StringScalar']>;
  excludeExportedContacts?: InputMaybe<Scalars['Boolean']>;
  excludeDefunctCompanies?: InputMaybe<Scalars['Boolean']>;
  pTag?: InputMaybe<Scalars['StringScalar']>;
  cTag?: InputMaybe<Scalars['StringScalar']>;
  excludePeopleTags?: InputMaybe<Scalars['StringScalar']>;
  includeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportAccountStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportAssociatedDeals?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeAllOrgImportLeads?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOptout?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  excludeAllOrgImportAccounts?: InputMaybe<AdvanceAllOrgImportsFilters>;
  includeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactOwners?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportContactStatus?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportLeadStatus?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesOwners?: InputMaybe<AdvanceOrgImportFilters>;
  orgImportOpportunities?: InputMaybe<Array<OrgImportOpportunities>>;
  includeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesStages?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesTypes?: InputMaybe<AdvanceOrgImportFilters>;
  includeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  excludeOrgImportOpportunitiesLeadSources?: InputMaybe<AdvanceOrgImportFilters>;
  companyID?: InputMaybe<Scalars['String']>;
  fetchTechAddDropOptions?: InputMaybe<Scalars['Boolean']>;
  showUnmaskedContacts?: InputMaybe<Scalars['Boolean']>;
  defaultSearchParams?: InputMaybe<DefaultSearchParams>;
  packageName?: InputMaybe<Scalars['String']>;
  buyingCommittee?: InputMaybe<Scalars['String']>;
  parsingOptions?: InputMaybe<ParsingOptions>;
  source?: InputMaybe<Scalars['String']>;
  addressVerificationStatusList?: InputMaybe<Scalars['String']>;
  parentId?: InputMaybe<Scalars['String']>;
  ultimateParentId?: InputMaybe<Scalars['String']>;
  subUnitType?: InputMaybe<Scalars['String']>;
  isLocationHierarchy?: InputMaybe<Scalars['Boolean']>;
};

    }
    export type QueryScoopsSearchSdk = {
  /** null **/
  hCompaniesSearch: InContextSdkMethod<ScoopsSearchTypes.Query['hCompaniesSearch'], ScoopsSearchTypes.QueryhCompaniesSearchArgs, MeshContext>,
  /** null **/
  hUnifiedCompaniesSearch: InContextSdkMethod<ScoopsSearchTypes.Query['hUnifiedCompaniesSearch'], ScoopsSearchTypes.QueryhUnifiedCompaniesSearchArgs, MeshContext>,
  /** null **/
  personDetails: InContextSdkMethod<ScoopsSearchTypes.Query['personDetails'], ScoopsSearchTypes.QuerypersonDetailsArgs, MeshContext>,
  /** null **/
  personSearch: InContextSdkMethod<ScoopsSearchTypes.Query['personSearch'], ScoopsSearchTypes.QuerypersonSearchArgs, MeshContext>,
  /** null **/
  scoopsSearch: InContextSdkMethod<ScoopsSearchTypes.Query['scoopsSearch'], ScoopsSearchTypes.QueryscoopsSearchArgs, MeshContext>,
  /** null **/
  orgchartsSearch: InContextSdkMethod<ScoopsSearchTypes.Query['orgchartsSearch'], ScoopsSearchTypes.QueryorgchartsSearchArgs, MeshContext>,
  /** null **/
  companyHierarchySearch: InContextSdkMethod<ScoopsSearchTypes.Query['companyHierarchySearch'], ScoopsSearchTypes.QuerycompanyHierarchySearchArgs, MeshContext>,
  /** null **/
  facets: InContextSdkMethod<ScoopsSearchTypes.Query['facets'], ScoopsSearchTypes.QueryfacetsArgs, MeshContext>,
  /** null **/
  suggestions: InContextSdkMethod<ScoopsSearchTypes.Query['suggestions'], ScoopsSearchTypes.QuerysuggestionsArgs, MeshContext>,
  /** null **/
  quickSearch: InContextSdkMethod<ScoopsSearchTypes.Query['quickSearch'], ScoopsSearchTypes.QueryquickSearchArgs, MeshContext>,
  /** null **/
  companyDetails: InContextSdkMethod<ScoopsSearchTypes.Query['companyDetails'], ScoopsSearchTypes.QuerycompanyDetailsArgs, MeshContext>,
  /** null **/
  companySearch: InContextSdkMethod<ScoopsSearchTypes.Query['companySearch'], ScoopsSearchTypes.QuerycompanySearchArgs, MeshContext>
};

export type MutationScoopsSearchSdk = {

};

export type SubscriptionScoopsSearchSdk = {

};

export type FacetsSearchContext = {
      ["FacetsSearch"]: { Query: QueryFacetsSearchSdk, Mutation: MutationFacetsSearchSdk, Subscription: SubscriptionFacetsSearchSdk },
      
    };

export type ScoopsSearchContext = {
      ["ScoopsSearch"]: { Query: QueryScoopsSearchSdk, Mutation: MutationScoopsSearchSdk, Subscription: SubscriptionScoopsSearchSdk },
      
    };

export type MeshContext = FacetsSearchContext & ScoopsSearchContext & BaseMeshContext;


import { getMesh, ExecuteMeshFn, SubscribeMeshFn } from '@graphql-mesh/runtime';
import { MeshStore, FsStoreStorageAdapter } from '@graphql-mesh/store';
import { path as pathModule } from '@graphql-mesh/cross-helpers';

const baseDir = pathModule.join(typeof __dirname === 'string' ? __dirname : '/', '..');

const importFn = (moduleId: string) => {
  const relativeModuleId = (pathModule.isAbsolute(moduleId) ? pathModule.relative(baseDir, moduleId) : moduleId).split('\\').join('/').replace(baseDir + '/', '');
  switch(relativeModuleId) {
    default:
      return Promise.reject(new Error(`Cannot find module '${relativeModuleId}'.`));
  }
};

const rootStore = new MeshStore('.mesh', new FsStoreStorageAdapter({
  cwd: baseDir,
  importFn,
  fileType: "ts",
}), {
  readonly: true,
  validate: false
});


                import { findAndParseConfig } from '@graphql-mesh/cli';
                function getMeshOptions() {
                  console.warn('WARNING: These artifacts are built for development mode. Please run "mesh build" to build production artifacts');
                  return findAndParseConfig({
                    dir: baseDir,
                    artifactsDir: ".mesh",
                    configName: "mesh",
                    additionalPackagePrefixes: [],
                    initialLoggerPrefix: "🕸️  Mesh",
                  });
                }
              

let meshInstance$: Promise<MeshInstance<MeshContext>>;

export function getBuiltMesh(): Promise<MeshInstance<MeshContext>> {
  if (meshInstance$ == null) {
    meshInstance$ = getMeshOptions().then(meshOptions => getMesh<MeshContext>(meshOptions)).then(mesh => {
      const id$ = mesh.pubsub.subscribe('destroy', () => {
        meshInstance$ = undefined;
        id$.then(id => mesh.pubsub.unsubscribe(id)).catch(err => console.error(err));
      });
      return mesh;
    });
  }
  return meshInstance$;
}

export const execute: ExecuteMeshFn = (...args) => getBuiltMesh().then(({ execute }) => execute(...args));

export const subscribe: SubscribeMeshFn = (...args) => getBuiltMesh().then(({ subscribe }) => subscribe(...args));